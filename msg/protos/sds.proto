syntax = "proto3";

//for future protoc-gen-go requirement
//option go_package = "github.com/stratosnet/sds/msg/protos";

package protos;
// j
import "sds_comm.proto";

// upload -----------------------------------



message ReqGetPPList {
  PPBaseInfo my_address = 1;

}

message RspGetPPList{
  repeated PPBaseInfo pp_list = 1;
  Result result = 2;
}


message ReqRegister {
  PPBaseInfo address = 1;
  bytes public_key = 2;
  PPBaseInfo my_address = 3; //middleman pp address
}

message RspRegister {
  Result result = 1; // if register success or not
  string p2p_address = 2;
  bool   isPP = 3;
}

message ReqMining {
  PPBaseInfo address = 1;
  bytes public_key = 2; // publickey
  bytes sign = 3; //signature
}

message RspMining {
  Result result = 1;
}

message ReqUploadFile {
  FileInfo file_info = 1;
  PPBaseInfo my_address = 2;
  bytes sign = 3;
  string req_id = 4;
  bool is_cover = 5;
  bool is_video_stream = 6;
}

message RspUploadFile {
  string storage_cer = 1; // storage certificate
  repeated SliceNumAddr pp_list = 2; // slice number and pp address list
  string file_hash = 3;
  string task_id = 4; //
  int64 total_slice = 5; //
  Result result = 6; // accept upload or not
  string req_id = 7;//
  string owner_wallet_address = 8;
  bool is_video_stream = 9;
  uint64 video_slice_duration = 10;
}

message ReqUploadFileSlice {
  SliceNumAddr    slice_num_addr = 1; //
  uint32          file_crc = 2; //
  SliceOffsetInfo slice_info = 3; //
  bytes           data = 4; //
  string          file_hash = 5; //
  string          p2p_address = 6;
  string          wallet_address = 7; //
  string          task_id = 8; //
  uint64          slice_size = 9; //
}

message RspUploadFileSlice {
  Result       result = 1; //
  SliceNumAddr slice_num_addr = 2; //
  string       file_hash = 3; //
  string       slice_hash = 4; //
  string       p2p_address = 5;
  string       wallet_address = 6; //
  uint64       slice_size = 7; //
  string       task_id = 8; //
}


message UploadSpeedOfProgress {
  string file_hash = 1; //
  uint64 slice_size = 2; //
}

message ReportUploadSliceResult {
  SliceNumAddr slice_num_addr = 1; //
  string     slice_hash = 2; //
  string     file_hash = 3; //
  bool       upload_success = 4;
  bool       isPP = 5; //
  uint64     slice_size = 6; //
  bytes      sign = 7;
  string     task_id = 8;
  string     p2p_address = 9;
  string     wallet_address = 10;
}

message RspReportUploadSliceResult {
  Result result = 1;
  SliceNumAddr slice_num_addr = 2;
}

message Uploaded {
  string reporter_address = 1;
  string uploader_address = 2;
  string file_hash = 3;
}


message ReqFindMyFileList {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_name = 3; // return all if file name is empty
  string directory = 4; // return first level directory if left empty
  string req_id = 5;//
  FileSortType file_type = 6;
  bool is_up = 7;
  string keyword = 8;

}

message RspFindMyFileList {
  repeated FileInfo file_info = 1;
  string p2p_address = 2;
  string wallet_address = 3;
  string req_id = 4;//
  Result result = 5;
}

message ReqFindDirectoryTree {
  string p2p_address = 1;
  string wallet_address = 2;
  string path_hash = 3;
  string req_id = 4; //
}

message RspFindDirectoryTree {
  string p2p_address = 1;
  string wallet_address = 2;
  string directory = 3;
  repeated FileInfo file_info = 4;
  string req_id = 5;
  Result result = 6;
}

//get file and download -----------------------------------


message ReqFileStorageInfo {
  FileIndexes file_indexes = 1;
  bytes sign = 2;
  string req_id = 3;
  bool is_video_stream = 4;
}

message RspFileStorageInfo {
  string visit_cer = 1;
  string p2p_address = 2;
  string wallet_address = 3;
  repeated DownloadSliceInfo slice_info = 4;
  string     file_hash = 5;
  string     file_name = 6;
  Result result = 7;
  string req_id = 8;
  string save_path = 9;
  uint64 file_size = 10;
  bool is_video_stream = 11;
}


message ReqDownloadSlice {
  SliceOffsetInfo    slice_info = 1;
  string             p2p_address = 2;
  string             wallet_address = 3;
  string             file_hash = 4;
  string             task_id = 5;
  string             save_path = 6;
  string             req_id = 7;
}

message RspDownloadSlice {
  SliceOffsetInfo slice_info = 1;
  uint32 file_crc = 2;
  string file_hash = 3;
  bytes  data = 4;
  string p2p_address = 5;
  string wallet_address = 6;
  string task_id = 7;
  uint64 slice_size = 8;
  bool   needReport = 9; // used for passagePP whether the last slice
  string save_path = 10;
  Result result = 11;
  string req_id = 12;
}

message ReqDownloadSliceWrong {
  string p2p_address = 1;
  string wallet_address = 2;
  string task_id = 3;
  string slice_hash = 4;
  DownloadWrongType type = 5;
  string save_path = 6;
}

message RspDownloadSliceWrong {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
  string task_id = 4;
  DownloadSliceInfo new_slice_info = 5;
  string save_path = 6;
  Result result = 7;
}

message ReqDownloadSlicePause {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
  string req_id = 4;
}
message RspDownloadSlicePause {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
  string req_id = 4;
  Result result = 5;
}

message ReqReportDownloadResult {
  bool isPP = 1; // p doesn't need DownloadSliceInfo
  DownloadSliceInfo slice_info = 2;
  string file_hash = 3;
  string downloader_p2p_address = 4;
  string downloader_wallet_address = 5;
  string my_p2p_address = 6; // PP's P2P key address
  string my_wallet_address = 7; // PP's wallet address
  bytes  sign = 8;
  string task_id = 9;

}

message RspReportDownloadResult {
  Result result = 1;
  DownloadSliceInfo slice_info = 2;
}

message ReqReportTaskBP {
  string task_id = 1;
  PPBaseInfo reporter = 2;
  uint64 traffic = 3;
}

message ReqRegisterNewPP {
  string  p2p_address = 1;
  string  wallet_address = 2;
  uint64  disk_size = 3;
  uint64  memory_size = 4;
  string  os_and_ver = 5;
  string  cpu_info = 6;
  string  mac_address = 7;
  uint32  version = 8;
  bytes  pub_key = 9;
  bytes  sign = 10;
}

message RspRegisterNewPP {
  Result result = 1;
}

message ReqActivate {
  bytes tx = 1;
  string p2p_address = 2;
}

message RspActivate {
  Result result = 1;
  uint32 activation_state = 2;
}

message ReqActivated {
  string p2p_address = 1;
}

message RspActivated {
  Result result = 1;
}

message ReqDeactivate {
  bytes tx = 1;
  string p2p_address = 2;
}

message RspDeactivate {
  Result result = 1;
  uint32 activation_state = 2;
}

message ReqDeactivated {
  string p2p_address = 1;
}

message RspDeactivated {
  Result result = 1;
}

message ReqPrepay {
  bytes tx = 1;
  string p2p_address = 2;
  string wallet_address = 3;
}

message RspPrepay {
  Result result = 1;
}

message ReqPrepaid {
  string wallet_address = 1;
  uint64 purchased_uoz = 2;
}

message RspPrepaid {
  Result result = 1;
}


message ReqDeleteFile {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
  bytes  sign = 4;
  string req_id = 5;
}

message RspDeleteFile {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
  Result result = 4;
  string req_id = 5;
}


// file transfer
// SP notify new PP to get file from storing PPï¼Œslice info are included
// new pp transfer to old pp, slice infos are not included,
message ReqTransferNotice {
  SliceStorageInfo slice_storage_info = 1;
  string transfer_cer = 2;
  bool from_sp = 3;
  PPBaseInfo storage_pp_info = 4;
}
message RspTransferNotice {
  Result result = 1;
  string transfer_cer = 2;
  PPBaseInfo storage_pp_info = 3;
}


//  storagePP-SP
message ReqValidateTransferCer {
  string transfer_cer = 1;
  PPBaseInfo new_pp = 2;
  PPBaseInfo original_pp = 3;
}
//  SP-PP PP-PP
message RspValidateTransferCer {
  Result result = 1;
  string transfer_cer = 2;

}


message ReqTransferDownload {
  string transfer_cer = 1;
}


message RspTransferDownload {
  string transfer_cer = 1;
  bytes  data = 2;
  uint64 offset = 3;
  uint64 slice_size = 4;
  Result result = 5;
}


message RspTransferDownloadResult {
  string transfer_cer = 1;
  Result result = 2;
}



message ReqReportTransferResult {
  string transfer_cer = 1;
  PPBaseInfo new_pp = 2;
  Result result = 3;
  bool is_new = 4;
}

message RspReportTransferResult {
  Result result = 1;
  string transfer_cer = 2;

}

// sp - pp get storage info
message ReqGetHDInfo {
  string p2p_address = 1;
  string wallet_address = 2;
}

message RspGetHDInfo {
  uint64 disk_size = 1;
  uint64 disk_free = 2 ;
  string p2p_address = 3;
  string wallet_address = 4;
}


// 
message ReqSendChatMessages {
  string wallet_address = 1;
  string message = 2;
  MsgType type = 3;
}
message RspSendChatMessages {
  Result result = 1;
}

// sp 
message ReqDeleteSlice {
  string p2p_address = 1;
  string slice_hash = 2; //
  // bytes  sign = 3; //SP signature  wallet address + hash
}

message RspDeleteSlice {
  string p2p_address = 1;
  string slice_hash = 2;
  Result result = 3;
}

// 
message ReqMakeDirectory {
  string p2p_address = 1;
  string wallet_address = 2;
  string directory = 3;
  string req_id = 4;
}

message RspMakeDirectory {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
  Result result = 4;
}


message ReqRemoveDirectory {
  string p2p_address = 1;
  string wallet_address = 2;
  string directory = 3;
  string req_id = 4;
}
message RspRemoveDirectory {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
  Result result = 4;
}


message ReqMoveFileDirectory {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
  string directory_target = 4;
  string directory_original = 5;
  string file_hash = 6;

}

message RspMoveFileDirectory {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
  string file_path = 4;
  Result result = 5;
}



// BP msg ###################

message ReqBLSPublicKey {
  string msg = 1;
  string id = 2;
}

// get bp BLS public key
message RspBPBLSPublicKey {
  ReqRegister bp_info = 1;
  int64 code = 2;
  string id = 3;
}


message ReqBalance {
  string wallet_address = 1;
  string id = 2;
}


message RspBalance {
  float balance = 1;
  int64 code = 2;
  string id = 3;
}


message ReqTransaction {
  string transaction_hash = 1;
  int64 code = 2;
  string id = 3;
}


message RspTransaction {
  string rest = 1;
  int64 code = 2;
  string id = 3;
}


message ReqBlockInfo {
  string block_hash = 1;
  string id = 3;
}


message RspBlockInfo {
  bytes block_info = 1;
  int64 code = 2;
  string id = 3;
}


message ReqBlockCheck{
  int64 block_height = 1;
  string id = 3;
}


message RspBlockCheck {
  repeated BlockCheckInfo block_list = 1;
  int64 code = 2;
  string id = 3;
}


message BlockCheckInfo {
  int64 block_height = 1;
  string block_hash = 2;
  string id = 3;
}


// 
message ReqDownloadTaskInfo {
  string task_id = 1;
  string id = 2;
}

message RspDownloadTaskInfo {
  string task_id = 1;
  uint64 slice_size = 2;
  string slice_hash = 3;
  uint64 slice_number = 4;
  string storage_p2p_address = 5;
  repeated string p2p_address_list = 6;
  uint64 time = 7;
  Result result = 8;
  string id = 9;
}

message ReqShareLink {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
}

message RspShareLink {
  repeated ShareLinkInfo share_info = 1;
  string req_id = 2;
  string p2p_address = 3;
  string wallet_address = 4; //
  Result result = 5;
}

message ReqShareFile {
  string file_hash = 1;
  bool   is_private = 2;
  int64  share_time = 3;
  string req_id = 4;
  string p2p_address = 5;
  string wallet_address = 6;
  string path_hash = 7;// share whole directory if this field is non-empty
}


message RspShareFile {
  string share_link = 1;
  string share_password = 2;
  string p2p_address = 3;
  string wallet_address = 4;
  string share_id = 5;
  string req_id = 6;
  Result result = 7;
}

message ReqDeleteShare {
  string share_id = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
}

message RspDeleteShare {
  string share_id = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
  Result result = 5;
}


message ReqGetShareFile {
  string keyword = 1; //
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
  string share_password = 5;//
}


message RspGetShareFile {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  Result result = 4;  // if failed, wrong share password
  bool is_private = 5;
  repeated FileInfo file_info = 6;
}


//
message ReqSaveFile {
  string file_hash = 1;
  string file_owner_wallet_address = 2; //
  string p2p_address = 3;
  string wallet_address = 4; //
  string req_id = 5;
}

message RspSaveFile {
  string file_path = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
  Result result = 5;
  string file_hash = 6;
}

// 
message ReqSaveFolder {
  string folder_hash = 1;
  string folder_owner_wallet_address = 2; //
  string p2p_address = 3;
  string wallet_address = 4; //
  string req_id = 5;
}

message RspSaveFolder {
  string folder_path = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
  Result result = 5;
  string folder_hash = 6;
}


//
message ReqCreateAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  repeated FileInfo file_info = 4;
  string album_name = 5;
  string album_blurb = 6;
  string album_cover_hash = 7; // album cover file hash
  AlbumType album_type = 8;
  bool is_private = 9;
}

message RspCreateAlbum {
  string album_id = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
  Result result = 5;
}


message ReqEditAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  string album_id = 4;
  bool   is_private = 5;
  repeated FileInfo change_files = 6;  // optional add files
  string album_cover_hash = 7; // optinal album cover file hash
  string album_name = 8; // optional  album name
  string album_blurb = 9; // optional  album abstract
}
message RspEditAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  string album_id = 4;
  Result result = 5;
}

message ReqAlbumContent {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  string album_id = 4;
}
message RspAlbumContent {
  string p2p_address = 1;
  string wallet_address = 2; //
  string owner_wallet_address = 3; //
  string req_id = 4;
  string album_id = 5;
  AlbumInfo album_info = 6; //
  repeated FileInfo file_info = 7;
  bool is_collection = 8;
  Result result = 9;

}


message ReqSearchAlbum {
  AlbumType album_type = 1;
  string keyword = 2;
  AlbumSortType AlbumSortType = 3;
  string p2p_address = 4;
  string wallet_address = 5; //
  string req_id = 6;
  uint64 page = 7;
  uint64 number = 8;
}
message RspSearchAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  repeated AlbumInfo album_info = 4; //
  Result result = 5;
  uint64 page = 6;
  uint64 total = 7;
}

message ReqFindMyAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  AlbumType album_type = 4;
  uint64 page = 5;
  uint64 number = 6;
  string keyword = 7;
}

message RspFindMyAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  repeated  AlbumInfo album_info = 4;
  Result result = 5;
  uint64 total = 6;
}

message ReqCollectionAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  string album_id = 4;
  bool is_collection = 5;
}

message RspCollectionAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  string album_id = 4;
  Result result = 5;
  bool is_collection = 6;
}


message ReqAbstractAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
}

message RspAbstractAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  AlbumNumber my_album = 4;
  AlbumNumber collection_album = 5;
  Result result = 6;
}


message ReqMyCollectionAlbum {
  AlbumType album_type = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
  uint64 page = 5;
  uint64 number = 6;
  string keyword = 7;
}
message RspMyCollectionAlbum {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  repeated AlbumInfo album_info = 4; //
  Result result = 5;
  uint64 page = 6;
}


message ReqDeleteAlbum {
  string album_id = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
}

message RspDeleteAlbum {
  string album_id = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  string req_id = 4;
  Result result = 5;
}


message ReqConfig {
  string p2p_address = 1;
  string wallet_address = 2; //
  string req_id = 3;
  string network_address = 4;
}

message RspConfig {
  string invitation_code = 1;
  string req_id = 2;
  uint64   invite = 3;
  bool is_upgrade = 4;
  uint64 free_capacity = 5;
  Result result = 6;
  string p2p_address = 7;
  string wallet_address = 8;
  uint64 capacity = 9;
}

message ReqInvite {
  string p2p_address = 1;
  string wallet_address = 2; // wallet used the invitation code
  string invitation_code = 3; // invitation code
  string req_id = 4;
}

message RspInvite {
  Result result = 1;
  uint64 capacity_delta = 2;
  uint64 current_capacity = 3;
  string req_id = 4;
  string p2p_address = 5;
  string wallet_address = 6; //
}

message ReqGetReward {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
}

message RspGetReward {
  Result result = 1;
  string req_id = 2;
  string p2p_address = 3;
  string wallet_address = 4;
  uint64 current_capacity = 5;
}

message ReqGetCapacity {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
}

message RspGetCapacity {
  Result result = 1;
  string req_id = 2;
  string p2p_address = 3;
  string wallet_address = 4;
  uint64 capacity = 5;
  uint64 free_capacity = 6;
}

message ReqFileSort {
  repeated FileInfo files = 1;
  string req_id = 2;
  string p2p_address = 3;
  string wallet_address = 4;
  string album_id = 5;
}

message RspFileSort {
  string req_id = 1;
  string p2p_address = 2;
  string wallet_address = 3;
  Result result = 4;
}

message ReqFindDirectory {
  string p2p_address = 1;
  string wallet_address = 2;
  string req_id = 3;
}

message RspFindDirectory {
  repeated FileInfo file_info = 1;
  string p2p_address = 2;
  string wallet_address = 3;
  string req_id = 4;
  Result result = 5;
}

message ReqCustomerAddVolume {
  string wallet_address = 1;
  string req_id = 2;
  uint64 volume = 3;
  bytes public_key = 4;
}

message RspCustomerAddVolume {
  string wallet_address = 1;
  string req_id = 2;
  Result result = 3;
}

message ReqCustomerUseVolume {
  string wallet_address = 1;
  string req_id = 2;
  uint64 required_volume = 3;
  bytes public_key = 4;
}

message RspCustomerUseVolume {
  string wallet_address = 1;
  string req_id = 2;
  Result result = 3;
}

message RelayMessage {
  string type = 1;
  bytes data = 2;
}