syntax = "proto3";

//for future protoc-gen-go requirement
option go_package = "github.com/stratosnet/sds/msg/protos";

package protos;
// j
import "sds_comm.proto";

// upload -----------------------------------



message ReqGetPPList {
  PPBaseInfo my_address = 1;
}

message RspGetPPList{
  repeated PPBaseInfo pp_list = 1;
  Result result = 2;
}

message ReqGetSPList {
  PPBaseInfo my_address = 1;
}

message RspGetSPList{
  repeated SPBaseInfo sp_list = 1;
  Result result = 2;
}

message ReqRegister {
  PPBaseInfo address = 1;
  bytes public_key = 2;
  PPBaseInfo my_address = 3; //middleman pp address
}

message RspRegister {
  Result result = 1; // if register success or not
  string p2p_address = 2;
  bool   isPP = 3;
  bool   is_suspended = 4;
}

message ReqMining {
  PPBaseInfo address = 1;
}

message RspMining {
  Result result = 1;
}

message ReqStartMaintenance {
  PPBaseInfo address = 1;
  uint64 duration = 2;
}

message RspStartMaintenance {
  Result result = 1;
}

message ReqStopMaintenance {
  PPBaseInfo address = 1;
}

message RspStopMaintenance {
  Result result = 1;
}

message ReqUploadFile {
  FileInfo file_info = 1;
  PPBaseInfo my_address = 2;
  bytes wallet_sign = 3;
  bytes wallet_pubkey = 4;
  bool is_cover = 5;
  bool is_video_stream = 6;
  uint32 desired_tier = 7;
  bool allow_higher_tier = 8;
}

message RspUploadFile {
  string storage_cer = 1; // storage certificate
  repeated SliceHashAddr slices = 2; // slice number and pp address list
  string file_hash = 3;
  string task_id = 4;
  int64  total_slice = 5;
  Result result = 6; // accept upload or not
  string owner_wallet_address = 7;
  bool   is_video_stream = 8;
  uint64 video_slice_duration = 9;
  bool   is_encrypted = 10;
  string sp_p2p_address = 11;
  bytes  node_sign = 12;
  int64  time_stamp = 13;
}

message ReqUploadFileSlice {
  RspUploadFile   rsp_upload_file = 1;
  uint64          slice_number = 2;
  string          slice_hash = 3;
  bytes           data = 4;
  SliceOffset     piece_offset = 5;
  string          p2p_address = 6;
  string          wallet_address = 7;
}

message RspUploadFileSlice {
  Result       result = 1;
  SliceHashAddr slice = 2;
  string       file_hash = 3;
  string       slice_hash = 4;
  string       p2p_address = 5; // src p2p_address
  string       wallet_address = 6;
  string       task_id = 7;
  string       sp_p2p_address = 8;
}

message ReqUploadSlicesWrong {
  string file_hash = 1;
  string task_id = 2;
  UploadType upload_type = 3;
  PPBaseInfo my_address = 4;
  string     sp_p2p_address = 5;
  repeated PPBaseInfo excluded_destinations = 6;
  repeated SliceHashAddr slices = 7;
  repeated bool failed_slices = 8;
}

message RspUploadSlicesWrong {
  Result result = 1;
  string file_hash = 2;
  UploadType upload_type = 3;
  string task_id = 4;
  repeated SliceHashAddr slices = 5;
}

message ReqBackupFileSlice {
  RspBackupStatus rsp_backup_file = 1;
  uint64          slice_number = 2;
  string          slice_hash = 3;
  bytes           data = 4;
  SliceOffset     piece_offset = 5;
  string          p2p_address = 6;
  string          wallet_address = 7;
}

message RspBackupFileSlice {
  Result       result = 1;
  SliceHashAddr slice = 2;
  string       file_hash = 3;
  string       slice_hash = 4;
  string       p2p_address = 5;
  string       wallet_address = 6;
  uint64       slice_size = 7;
  string       task_id = 8;
  string       sp_p2p_address = 9;
}
message UploadSpeedOfProgress {
  string file_hash = 1; //
  uint64 slice_size = 2; //
  uint64 slice_off_start = 3;
  int64 handle_time = 4;
}

message ReportUploadSliceResult {
  SliceHashAddr slice = 1; //
  string     file_hash = 2; //
  bool       upload_success = 3;
  bool       isPP = 4; //
  string     task_id = 5;
  string     p2p_address = 6;
  string     wallet_address = 7;
  string     sp_p2p_address = 8;
  int64      cost_time = 9;
  string     opponent_p2p_address = 10;
}

message RspReportUploadSliceResult {
  Result result = 1;
  SliceHashAddr slice = 2;
}

message ReqFindMyFileList {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_name = 3; // return all if file name is empty
  uint64 page_id = 4;
  FileSortType file_type = 5;
  bool is_up = 6;
  string keyword = 7;

}

message RspFindMyFileList {
  repeated FileInfo file_info = 1;
  string p2p_address = 2;
  string wallet_address = 3;
  uint64 total_file_number = 4;
  uint64 page_id = 5;
  Result result = 6;
}

//get file and download -----------------------------------


message ReqFileStorageInfo {
  FileIndexes     file_indexes = 1;
  bytes           wallet_sign = 2;
  bytes           wallet_pubkey = 3;
  ReqGetShareFile share_request = 4;
}

message RspFileStorageInfo {
  string visit_cer = 1;
  string p2p_address = 2;
  string wallet_address = 3;
  repeated DownloadSliceInfo slice_info = 4;
  string file_hash = 5;
  string file_name = 6;
  Result result = 7;
  string req_id = 8;
  string save_path = 9;
  uint64 file_size = 10;
  string rest_address = 11;
  bytes  node_sign = 12; //sp signature
  string sp_p2p_address = 13;
  string encryption_tag = 14;
  string task_id = 15;
  int64  time_stamp = 16;
}

message ReqFileReplicaInfo {
  string    p2p_address = 1;
  string    wallet_address = 2;
  string    file_path = 3;
  uint32    replica_increase_num = 4;
  bytes     wallet_sign = 5;
  bytes     wallet_pubkey = 6;
}

message RspFileReplicaInfo {
  Result    result = 1;
  string    sp_p2p_address = 2;
  string    file_hash = 3;
  uint32    replicas = 4;
  uint32    expected_replicas = 5;
}

message ReqDownloadFileWrong {
  FileIndexes         file_indexes = 1;
  string              file_hash = 2;
  repeated string     failed_slices = 3;
  repeated PPBaseInfo failed_pp_nodes = 4;
}

message ReqDownloadSlice {
  RspFileStorageInfo rsp_file_storage_info = 1;
  uint64             slice_number = 2;
  string             p2p_address = 3;
  bool               is_video_caching = 4;
}

message RspDownloadSlice {
  SliceOffsetInfo slice_info = 1;
  uint32 file_crc = 2;
  string file_hash = 3;
  bytes  data = 4;
  string p2p_address = 5;
  string wallet_address = 6;
  string task_id = 7;
  uint64 slice_size = 8; // is the encrypted slice size if the file is encrypted
  uint64 raw_slice_size = 9;
  bool   needReport = 10; // used for passagePP whether the last slice
  string save_path = 11;
  Result result = 12;
  bool   is_encrypted = 13;
  string sp_p2p_address = 14;
  bool   is_video_caching = 15;
  string storage_p2p_address = 16;
  uint64 slice_number = 17;
}

message ReqDownloadSlicePause {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
}
message RspDownloadSlicePause {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
  Result result = 4;
}

message ReqReportDownloadResult {
  bool isPP = 1;
  DownloadSliceInfo slice_info = 2;
  string file_hash = 3;
  string downloader_p2p_address = 4;
  string wallet_address = 5;
  string pp_p2p_address = 6; // PP's P2P key address
  string pp_wallet_address = 7; // PP's wallet address
  string task_id = 8;
  string sp_p2p_address = 9;
  string opponent_p2p_address = 10;
  int64  cost_time = 11;
}

message RspReportDownloadResult {
  Result result = 1;
  DownloadSliceInfo slice_info = 2;
}

message ReqReportTaskBP {
  string task_id = 1;
  PPBaseInfo reporter = 2;
  uint64 traffic = 3;
}

message ReqRegisterNewPP {
  string  p2p_address = 1;
  string  wallet_address = 2;
  uint64  disk_size = 3;
  uint64  free_disk = 4;
  uint64  memory_size = 5;
  string  os_and_ver = 6;
  string  cpu_info = 7;
  string  mac_address = 8;
  uint32  version = 9;
  bytes   pub_key = 10;
  string  network_address = 11;
}

message RspRegisterNewPP {
  Result result = 1;
  bool   already_pp = 2;
}

message ReqActivatePP {
  bytes      tx = 1;
  PPBaseInfo pp_info = 2;
  bool       already_active = 3;
  string     initial_stake = 4;
}

message RspActivatePP {
  Result result = 1;
  uint32 activation_state = 2;
  bytes  tx = 3;
}

message ReqUpdateStakePP {
  bytes tx = 1;
  string p2p_address = 2;
}

message RspUpdateStakePP {
  Result result = 1;
  uint32 update_state = 2;
  bytes  tx = 3;
}

message NoticeUpdatedStakePP {
  Result result = 1;
  string stake_balance = 2;
  string node_tier = 3;
  string weight_score = 4;
}

message ReqStateChangePP {
  string p2p_address = 1;
}

message RspStateChangePP {
  Result result = 1;
  uint32 update_state = 2;
}

message ReqDeactivatePP {
  bytes tx = 1;
  string p2p_address = 2;
}

message RspDeactivatePP {
  Result result = 1;
  uint32 activation_state = 2;
  bytes  tx = 3;
}

message NoticeUnbondingPP {
  Result result = 1;
}

message NoticeDeactivatedPP {
  Result result = 1;
}

message ReqUnbondingSP {
  string p2p_address = 1;
  string ozone_limit_changes = 2; // negative
  string unbonding_mature_time = 3;
}

message RspUnbondingSP {
  Result result = 1;
}

message ReqPrepay {
  bytes tx = 1;
  string p2p_address = 2;
  string wallet_address = 3;
}

message RspPrepay {
  Result result = 1;
  bytes  tx = 2;
}

message ReqDeleteFile {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
}

message RspDeleteFile {
  string p2p_address = 1;
  string wallet_address = 2;
  string file_hash = 3;
  Result result = 4;
}


// file transfer commented out for backup logic redesign QB-897
/*
// SP notify new PP to get file from storing PPï¼Œslice info are included
// new pp transfer to old pp, slice infos are not included,
message ReqTransferNotice {
  SliceStorageInfo slice_storage_info = 1;
  string transfer_cer = 2;
  bool from_sp = 3;
  PPBaseInfo storage_pp_info = 4;
  bool deleteOrigin = 5;
  string sp_p2p_address = 6;
}
message RspTransferNotice {
  Result result = 1;
  string transfer_cer = 2;
  PPBaseInfo storage_pp_info = 3;
  string sp_p2p_address = 4;
}

//  storagePP-SP
message ReqValidateTransferCer {
  string transfer_cer = 1;
  PPBaseInfo new_pp = 2;
  PPBaseInfo original_pp = 3;
  string sp_p2p_address = 4;
}
//  SP-PP PP-PP
message RspValidateTransferCer {
  Result result = 1;
  string transfer_cer = 2;
  string new_pp_p2p_address = 3;
  string sp_p2p_address = 4;
}

message ReqReportTransferResult {
  string transfer_cer = 1;
  PPBaseInfo new_pp = 2;
  Result result = 3;
  bool is_new = 4;
  bool origin_deleted = 5;
  string sp_p2p_address = 6;
}
message RspReportTransferResult {
  Result result = 1;
  string transfer_cer = 2;
  string new_pp_p2p_address = 3;
}
*/

// the message that is sent to the pp which will pull the
// slice from another pp which stores the file slice
message NoticeFileSliceBackup {
  string           task_id = 1;
  string           file_hash = 2;
  SliceStorageInfo slice_storage_info = 3;
  uint64           slice_number = 4;
  PPBaseInfo       pp_info = 5; // p2p which stores the file slice
  string           sp_p2p_address = 6;
  bool             delete_origin = 7;
  bytes            node_sign = 8;
  bytes            pubkey = 9;
  string           to_p2p_address = 10;
  int64            time_stamp = 11;
}

// the message that is sent back to sp from both the slice sender pp
// and the slice receiver pp
message ReqReportBackupSliceResult {
  string     task_id = 1;
  string     file_hash = 2;
  string     slice_hash = 3;
  bool       backup_success = 4;
  bool       is_receiver = 5;
  bool       origin_deleted = 6;
  uint64     slice_number = 7;
  uint64     slice_size = 8;
  PPBaseInfo pp_info = 9;
  string     sp_p2p_address = 10;
  int64      cost_time = 11;
  string     pp_p2p_address = 12;
  string     opponent_p2p_address = 13;
  string     p2p_address = 14;
}
message RspReportBackupSliceResult {
  string task_id = 1;
  Result result = 2;
  string slice_hash = 3;
}

message ReqBackupStatus {
  string task_id = 1;
  string file_hash = 2;
  PPBaseInfo address = 3;
}

message RspBackupStatus {
  string  task_id = 1;
  Result  result = 2;
  string  file_hash = 3;
  uint32  replicas = 4;
  bool    delete_origin_tmp = 5;
  string  sp_p2p_address = 6;
  repeated SliceHashAddr slices = 7;
  bytes  node_sign = 8;
  int64  time_stamp = 9;
}

message ReqTransferDownload {
  NoticeFileSliceBackup notice_file_slice_backup = 1;
  PPBaseInfo            new_pp = 2;
  string                p2p_address = 3;
}

message RspTransferDownload {
  string task_id = 1;
  bytes  data = 2;
  uint64 offset = 3;
  uint64 slice_size = 4;
  Result result = 5;
  string sp_p2p_address = 6;
  string slice_hash = 7;
  string p2p_address = 8;
}

message RspTransferDownloadResult {
  string task_id = 1;
  Result result = 2;
  string sp_p2p_address = 3;
  string slice_hash = 4;
}

message ReqTransferDownloadWrong {
  string            task_id = 1;
  PPBaseInfo        new_pp = 2;
  PPBaseInfo        original_pp = 3;
  SliceStorageInfo  slice_storage_info = 4;
  string            file_hash = 5;
  string            sp_p2p_address = 6;
}

// sp - pp get storage info
message ReqGetHDInfo {
  string p2p_address = 1;
  string wallet_address = 2;
}

message RspGetHDInfo {
  int64 disk_size = 1;
  int64 disk_free = 2 ;
  string p2p_address = 3;
  string wallet_address = 4;
}

message ReqSpLatencyCheck {
  string p2p_address_pp = 2;
  string network_address_sp = 3;
  string sp_index = 4;
}

message RspSpLatencyCheck {
  string p2p_address_pp = 2;
  string network_address_sp = 3;
  string sp_index = 4;
}

message ReqPpLatencyCheck {
  string p2p_address_pp = 2;
  string network_address_sp = 3;
  string sp_index = 4;
}

message RspPpLatencyCheck {
  string p2p_address_pp = 2;
  string network_address_sp = 3;
  string sp_index = 4;
}

message ReqSpStatus {
  string target_p2p_address = 1;
  string requester_p2p_address = 2;
}

message RspSpStatus {
  string target_p2p_address = 1;
  string requester_p2p_address = 2;
  uint32 activation_state = 3;
  uint64 connection_count = 4;
  uint64 online_pp_count = 5;
}

// get bp BLS public key
message ReqBLSPublicKey {
  string msg = 1;
  string id = 2;
}

message RspBPBLSPublicKey {
  ReqRegister bp_info = 1;
  int64 code = 2;
  string id = 3;
}


message ReqBalance {
  string wallet_address = 1;
  string id = 2;
}

message RspBalance {
  float balance = 1;
  int64 code = 2;
  string id = 3;
}


message ReqTransaction {
  string transaction_hash = 1;
  int64 code = 2;
  string id = 3;
}

message RspTransaction {
  string rest = 1;
  int64 code = 2;
  string id = 3;
}


message ReqBlockInfo {
  string block_hash = 1;
  string id = 3;
}

message RspBlockInfo {
  bytes block_info = 1;
  int64 code = 2;
  string id = 3;
}


message ReqBlockCheck{
  int64 block_height = 1;
  string id = 2;
}

message RspBlockCheck {
  repeated BlockCheckInfo block_list = 1;
  int64 code = 2;
  string id = 3;
}

message BlockCheckInfo {
  int64 block_height = 1;
  string block_hash = 2;
  string id = 3;
}

//
message ReqDownloadTaskInfo {
  string task_id = 1;
  string id = 2;
}

message RspDownloadTaskInfo {
  string task_id = 1;
  uint64 slice_size = 2;
  string slice_hash = 3;
  uint64 slice_number = 4;
  string storage_p2p_address = 5;
  repeated string p2p_address_list = 6;
  uint64 time = 7;
  Result result = 8;
  string id = 9;
}

message ReqClearDownloadTask {
  string wallet_address = 1;
  string file_hash = 2;
  string p2p_address = 3;
}

message ReqShareLink {
  string p2p_address = 1;
  string wallet_address = 2;
  uint64 page_id = 3;
}

message RspShareLink {
  repeated ShareLinkInfo share_info = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  Result result = 4;
  uint64 total_file_number = 5;
  uint64 page_id = 6;
}

message ReqShareFile {
  string file_hash = 1;
  bool   is_private = 2;
  int64  share_time = 3;
  string p2p_address = 4;
  string wallet_address = 5;
  string path_hash = 6;// share whole directory if this field is non-empty
}

message RspShareFile {
  string share_link = 1;
  string share_password = 2;
  string p2p_address = 3;
  string wallet_address = 4;
  string share_id = 5;
  Result result = 6;
}

message ReqDeleteShare {
  string share_id = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
}

message RspDeleteShare {
  string share_id = 1;
  string p2p_address = 2;
  string wallet_address = 3; //
  Result result = 4;
}


message ReqGetShareFile {
  string keyword = 1; //
  string p2p_address = 2;
  string wallet_address = 3; //
  bytes  wallet_pubkey = 4;
  bytes  wallet_sign = 5;
  string share_password = 6;//
  string save_as = 7;
}


message RspGetShareFile {
  ReqGetShareFile share_request = 1;
  Result          result = 2;  // if failed, wrong share password
  bool            is_private = 3;
  repeated        FileInfo file_info = 4;
  string          sequence_number = 5;
}

message ReqTransferBLSSignature {
  string epoch = 1;
  bytes  pub_key = 2;
  bytes  signature = 3;
}

message RspTransferBLSSignature {
  Result result = 1;
}

message ReqReportNodeStatus {
  string        p2p_address = 1;
  CpuStat       cpu = 2;
  MemoryStat    memory = 3;
  DiskStat      disk = 4;
  BandwidthStat bandwidth = 5;
}

message RspReportNodeStatus{
  int32 ppstate = 1;
  Result result = 2;
}

message ReqGetPPDowngradeInfo {
  PPBaseInfo my_address = 1;
}

message RspGetPPDowngradeInfo{
  int64 downgrade_height_delta_to_now = 1;
  uint32 score_decreased = 2;
  string sp_p2p_address = 3;
  Result result = 4;
}

message ReqGetPPStatus {
  PPBaseInfo my_address = 1;
  bool init_pp_list = 2;
}

message RspGetPPStatus{
  uint32 is_active = 1;
  uint32 ongoing_tier = 2;
  uint32 init_tier = 3;
  uint32 weight_score = 4;
  int32 state = 5;
  bool init_pp_list = 6;
  Result result = 7;
}

message ReqGetWalletOz {
  string wallet_address = 1;
  ReqUploadFile upload_request = 2;
  ReqFileStorageInfo download_request = 3;
}

message RspGetWalletOz{
  string wallet_oz = 1;
  string sequence_number = 2;
  string wallet_address = 3;
  Result result = 4;
}

message RspBadVersion{
  int32  version = 1;
  int32  minimum_version = 2;
  string command = 3;
}

message NoticeSpUnderMaintenance{
  string sp_p2p_address = 1;
  int32  maintenance_type = 2;
}
