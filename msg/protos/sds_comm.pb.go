// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: sds_comm.proto

// j

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResultState int32

const (
	ResultState_RES_SUCCESS ResultState = 0
	ResultState_RES_FAIL    ResultState = 1
)

// Enum value maps for ResultState.
var (
	ResultState_name = map[int32]string{
		0: "RES_SUCCESS",
		1: "RES_FAIL",
	}
	ResultState_value = map[string]int32{
		"RES_SUCCESS": 0,
		"RES_FAIL":    1,
	}
)

func (x ResultState) Enum() *ResultState {
	p := new(ResultState)
	*p = x
	return p
}

func (x ResultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultState) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[0].Descriptor()
}

func (ResultState) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[0]
}

func (x ResultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultState.Descriptor instead.
func (ResultState) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{0}
}

type DownloadWrongType int32

const (
	DownloadWrongType_LOSESLICE DownloadWrongType = 0
	DownloadWrongType_OVERTIME  DownloadWrongType = 1
)

// Enum value maps for DownloadWrongType.
var (
	DownloadWrongType_name = map[int32]string{
		0: "LOSESLICE",
		1: "OVERTIME",
	}
	DownloadWrongType_value = map[string]int32{
		"LOSESLICE": 0,
		"OVERTIME":  1,
	}
)

func (x DownloadWrongType) Enum() *DownloadWrongType {
	p := new(DownloadWrongType)
	*p = x
	return p
}

func (x DownloadWrongType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadWrongType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[1].Descriptor()
}

func (DownloadWrongType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[1]
}

func (x DownloadWrongType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadWrongType.Descriptor instead.
func (DownloadWrongType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{1}
}

type UploadType int32

const (
	UploadType_NEW_UPLOAD UploadType = 0
	UploadType_BACKUP     UploadType = 1
)

// Enum value maps for UploadType.
var (
	UploadType_name = map[int32]string{
		0: "NEW_UPLOAD",
		1: "BACKUP",
	}
	UploadType_value = map[string]int32{
		"NEW_UPLOAD": 0,
		"BACKUP":     1,
	}
)

func (x UploadType) Enum() *UploadType {
	p := new(UploadType)
	*p = x
	return p
}

func (x UploadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[2].Descriptor()
}

func (UploadType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[2]
}

func (x UploadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadType.Descriptor instead.
func (UploadType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{2}
}

type FileSortType int32

const (
	FileSortType_DEF  FileSortType = 0 // default
	FileSortType_TIME FileSortType = 1 // time
	FileSortType_SIZE FileSortType = 2 // file size
	FileSortType_NAME FileSortType = 3 // name alphabet
)

// Enum value maps for FileSortType.
var (
	FileSortType_name = map[int32]string{
		0: "DEF",
		1: "TIME",
		2: "SIZE",
		3: "NAME",
	}
	FileSortType_value = map[string]int32{
		"DEF":  0,
		"TIME": 1,
		"SIZE": 2,
		"NAME": 3,
	}
)

func (x FileSortType) Enum() *FileSortType {
	p := new(FileSortType)
	*p = x
	return p
}

func (x FileSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[3].Descriptor()
}

func (FileSortType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[3]
}

func (x FileSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileSortType.Descriptor instead.
func (FileSortType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{3}
}

type MsgType int32

const (
	MsgType_DEFAULT MsgType = 0
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "DEFAULT",
	}
	MsgType_value = map[string]int32{
		"DEFAULT": 0,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[4].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[4]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{4}
}

type HeartbeatType int32

const (
	HeartbeatType_REGULAR_HEARTBEAT HeartbeatType = 0
	HeartbeatType_LATENCY_CHECK     HeartbeatType = 1
	HeartbeatType_LATENCY_CHECK_PP  HeartbeatType = 2
)

// Enum value maps for HeartbeatType.
var (
	HeartbeatType_name = map[int32]string{
		0: "REGULAR_HEARTBEAT",
		1: "LATENCY_CHECK",
		2: "LATENCY_CHECK_PP",
	}
	HeartbeatType_value = map[string]int32{
		"REGULAR_HEARTBEAT": 0,
		"LATENCY_CHECK":     1,
		"LATENCY_CHECK_PP":  2,
	}
)

func (x HeartbeatType) Enum() *HeartbeatType {
	p := new(HeartbeatType)
	*p = x
	return p
}

func (x HeartbeatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartbeatType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[5].Descriptor()
}

func (HeartbeatType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[5]
}

func (x HeartbeatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartbeatType.Descriptor instead.
func (HeartbeatType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{5}
}

type PPState int32

const (
	PPState_OFFLINE     PPState = 0
	PPState_ONLINE      PPState = 1
	PPState_SUSPEND     PPState = 2
	PPState_MAINTENANCE PPState = 3
)

// Enum value maps for PPState.
var (
	PPState_name = map[int32]string{
		0: "OFFLINE",
		1: "ONLINE",
		2: "SUSPEND",
		3: "MAINTENANCE",
	}
	PPState_value = map[string]int32{
		"OFFLINE":     0,
		"ONLINE":      1,
		"SUSPEND":     2,
		"MAINTENANCE": 3,
	}
)

func (x PPState) Enum() *PPState {
	p := new(PPState)
	*p = x
	return p
}

func (x PPState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PPState) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[6].Descriptor()
}

func (PPState) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[6]
}

func (x PPState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PPState.Descriptor instead.
func (PPState) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{6}
}

type SpMaintenanceType int32

const (
	SpMaintenanceType_CONSENSUS SpMaintenanceType = 0
	SpMaintenanceType_OTHER     SpMaintenanceType = 1
)

// Enum value maps for SpMaintenanceType.
var (
	SpMaintenanceType_name = map[int32]string{
		0: "CONSENSUS",
		1: "OTHER",
	}
	SpMaintenanceType_value = map[string]int32{
		"CONSENSUS": 0,
		"OTHER":     1,
	}
)

func (x SpMaintenanceType) Enum() *SpMaintenanceType {
	p := new(SpMaintenanceType)
	*p = x
	return p
}

func (x SpMaintenanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpMaintenanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[7].Descriptor()
}

func (SpMaintenanceType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[7]
}

func (x SpMaintenanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpMaintenanceType.Descriptor instead.
func (SpMaintenanceType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{7}
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State ResultState `protobuf:"varint,1,opt,name=state,proto3,enum=protos.ResultState" json:"state,omitempty"`
	Msg   string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetState() ResultState {
	if x != nil {
		return x.State
	}
	return ResultState_RES_SUCCESS
}

func (x *Result) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PPBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	NetworkAddress string `protobuf:"bytes,3,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
	RestAddress    string `protobuf:"bytes,4,opt,name=rest_address,json=restAddress,proto3" json:"rest_address,omitempty"`
}

func (x *PPBaseInfo) Reset() {
	*x = PPBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPBaseInfo) ProtoMessage() {}

func (x *PPBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPBaseInfo.ProtoReflect.Descriptor instead.
func (*PPBaseInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{1}
}

func (x *PPBaseInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *PPBaseInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *PPBaseInfo) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

func (x *PPBaseInfo) GetRestAddress() string {
	if x != nil {
		return x.RestAddress
	}
	return ""
}

type SPBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	P2PPubKey      string `protobuf:"bytes,2,opt,name=p2p_pub_key,json=p2pPubKey,proto3" json:"p2p_pub_key,omitempty"`
	NetworkAddress string `protobuf:"bytes,3,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
}

func (x *SPBaseInfo) Reset() {
	*x = SPBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPBaseInfo) ProtoMessage() {}

func (x *SPBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPBaseInfo.ProtoReflect.Descriptor instead.
func (*SPBaseInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{2}
}

func (x *SPBaseInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *SPBaseInfo) GetP2PPubKey() string {
	if x != nil {
		return x.P2PPubKey
	}
	return ""
}

func (x *SPBaseInfo) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize           uint64 `protobuf:"varint,1,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileHash           string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FileName           string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	CreateTime         uint64 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	IsDirectory        bool   `protobuf:"varint,5,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory,omitempty"`
	StoragePath        string `protobuf:"bytes,6,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	IsPrivate          bool   `protobuf:"varint,7,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	OwnerWalletAddress string `protobuf:"bytes,8,opt,name=owner_wallet_address,json=ownerWalletAddress,proto3" json:"owner_wallet_address,omitempty"`
	ShareLink          string `protobuf:"bytes,9,opt,name=share_link,json=shareLink,proto3" json:"share_link,omitempty"`
	SortId             uint64 `protobuf:"varint,10,opt,name=sort_id,json=sortId,proto3" json:"sort_id,omitempty"`
	Duration           uint64 `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"`
	EncryptionTag      string `protobuf:"bytes,12,opt,name=encryption_tag,json=encryptionTag,proto3" json:"encryption_tag,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{3}
}

func (x *FileInfo) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FileInfo) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *FileInfo) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *FileInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *FileInfo) GetOwnerWalletAddress() string {
	if x != nil {
		return x.OwnerWalletAddress
	}
	return ""
}

func (x *FileInfo) GetShareLink() string {
	if x != nil {
		return x.ShareLink
	}
	return ""
}

func (x *FileInfo) GetSortId() uint64 {
	if x != nil {
		return x.SortId
	}
	return 0
}

func (x *FileInfo) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FileInfo) GetEncryptionTag() string {
	if x != nil {
		return x.EncryptionTag
	}
	return ""
}

type SliceHashAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceHash   string       `protobuf:"bytes,1,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	SliceNumber uint64       `protobuf:"varint,2,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	SliceSize   uint64       `protobuf:"varint,3,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	SliceOffset *SliceOffset `protobuf:"bytes,4,opt,name=slice_offset,json=sliceOffset,proto3" json:"slice_offset,omitempty"`
	PpInfo      *PPBaseInfo  `protobuf:"bytes,5,opt,name=pp_info,json=ppInfo,proto3" json:"pp_info,omitempty"`
}

func (x *SliceHashAddr) Reset() {
	*x = SliceHashAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceHashAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceHashAddr) ProtoMessage() {}

func (x *SliceHashAddr) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceHashAddr.ProtoReflect.Descriptor instead.
func (*SliceHashAddr) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{4}
}

func (x *SliceHashAddr) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *SliceHashAddr) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *SliceHashAddr) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *SliceHashAddr) GetSliceOffset() *SliceOffset {
	if x != nil {
		return x.SliceOffset
	}
	return nil
}

func (x *SliceHashAddr) GetPpInfo() *PPBaseInfo {
	if x != nil {
		return x.PpInfo
	}
	return nil
}

type SliceOffsetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceHash            string       `protobuf:"bytes,1,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	SliceOffset          *SliceOffset `protobuf:"bytes,2,opt,name=slice_offset,json=sliceOffset,proto3" json:"slice_offset,omitempty"`
	EncryptedSliceOffset *SliceOffset `protobuf:"bytes,3,opt,name=encrypted_slice_offset,json=encryptedSliceOffset,proto3" json:"encrypted_slice_offset,omitempty"`
}

func (x *SliceOffsetInfo) Reset() {
	*x = SliceOffsetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceOffsetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceOffsetInfo) ProtoMessage() {}

func (x *SliceOffsetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceOffsetInfo.ProtoReflect.Descriptor instead.
func (*SliceOffsetInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{5}
}

func (x *SliceOffsetInfo) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *SliceOffsetInfo) GetSliceOffset() *SliceOffset {
	if x != nil {
		return x.SliceOffset
	}
	return nil
}

func (x *SliceOffsetInfo) GetEncryptedSliceOffset() *SliceOffset {
	if x != nil {
		return x.EncryptedSliceOffset
	}
	return nil
}

type SliceOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceOffsetStart uint64 `protobuf:"varint,1,opt,name=slice_offset_start,json=sliceOffsetStart,proto3" json:"slice_offset_start,omitempty"`
	SliceOffsetEnd   uint64 `protobuf:"varint,2,opt,name=slice_offset_end,json=sliceOffsetEnd,proto3" json:"slice_offset_end,omitempty"`
}

func (x *SliceOffset) Reset() {
	*x = SliceOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceOffset) ProtoMessage() {}

func (x *SliceOffset) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceOffset.ProtoReflect.Descriptor instead.
func (*SliceOffset) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{6}
}

func (x *SliceOffset) GetSliceOffsetStart() uint64 {
	if x != nil {
		return x.SliceOffsetStart
	}
	return 0
}

func (x *SliceOffset) GetSliceOffsetEnd() uint64 {
	if x != nil {
		return x.SliceOffsetEnd
	}
	return 0
}

type FileIndexes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath      string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` //  sdm://account/fileHash
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	SavePath      string `protobuf:"bytes,4,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	SaveAs        string `protobuf:"bytes,5,opt,name=save_as,json=saveAs,proto3" json:"save_as,omitempty"`
}

func (x *FileIndexes) Reset() {
	*x = FileIndexes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileIndexes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileIndexes) ProtoMessage() {}

func (x *FileIndexes) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileIndexes.ProtoReflect.Descriptor instead.
func (*FileIndexes) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{7}
}

func (x *FileIndexes) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileIndexes) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *FileIndexes) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *FileIndexes) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *FileIndexes) GetSaveAs() string {
	if x != nil {
		return x.SaveAs
	}
	return ""
}

type DownloadSliceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceStorageInfo *SliceStorageInfo `protobuf:"bytes,1,opt,name=slice_storage_info,json=sliceStorageInfo,proto3" json:"slice_storage_info,omitempty"`
	SliceNumber      uint64            `protobuf:"varint,2,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	StoragePpInfo    *PPBaseInfo       `protobuf:"bytes,3,opt,name=storage_pp_info,json=storagePpInfo,proto3" json:"storage_pp_info,omitempty"`
	BackupsPpInfo    *PPBaseInfo       `protobuf:"bytes,4,opt,name=backups_pp_info,json=backupsPpInfo,proto3" json:"backups_pp_info,omitempty"`
	VisitResult      bool              `protobuf:"varint,5,opt,name=visit_result,json=visitResult,proto3" json:"visit_result,omitempty"`
	TaskId           string            `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SliceOffset      *SliceOffset      `protobuf:"bytes,7,opt,name=slice_offset,json=sliceOffset,proto3" json:"slice_offset,omitempty"`
}

func (x *DownloadSliceInfo) Reset() {
	*x = DownloadSliceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSliceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSliceInfo) ProtoMessage() {}

func (x *DownloadSliceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSliceInfo.ProtoReflect.Descriptor instead.
func (*DownloadSliceInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadSliceInfo) GetSliceStorageInfo() *SliceStorageInfo {
	if x != nil {
		return x.SliceStorageInfo
	}
	return nil
}

func (x *DownloadSliceInfo) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *DownloadSliceInfo) GetStoragePpInfo() *PPBaseInfo {
	if x != nil {
		return x.StoragePpInfo
	}
	return nil
}

func (x *DownloadSliceInfo) GetBackupsPpInfo() *PPBaseInfo {
	if x != nil {
		return x.BackupsPpInfo
	}
	return nil
}

func (x *DownloadSliceInfo) GetVisitResult() bool {
	if x != nil {
		return x.VisitResult
	}
	return false
}

func (x *DownloadSliceInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DownloadSliceInfo) GetSliceOffset() *SliceOffset {
	if x != nil {
		return x.SliceOffset
	}
	return nil
}

type SliceStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceSize uint64 `protobuf:"varint,1,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	SliceHash string `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
}

func (x *SliceStorageInfo) Reset() {
	*x = SliceStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceStorageInfo) ProtoMessage() {}

func (x *SliceStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceStorageInfo.ProtoReflect.Descriptor instead.
func (*SliceStorageInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{9}
}

func (x *SliceStorageInfo) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *SliceStorageInfo) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

type EncryptedSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HdkeyNonce uint32 `protobuf:"varint,1,opt,name=hdkey_nonce,json=hdkeyNonce,proto3" json:"hdkey_nonce,omitempty"`
	AesNonce   uint64 `protobuf:"varint,2,opt,name=aes_nonce,json=aesNonce,proto3" json:"aes_nonce,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RawSize    uint64 `protobuf:"varint,4,opt,name=raw_size,json=rawSize,proto3" json:"raw_size,omitempty"`
}

func (x *EncryptedSlice) Reset() {
	*x = EncryptedSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedSlice) ProtoMessage() {}

func (x *EncryptedSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedSlice.ProtoReflect.Descriptor instead.
func (*EncryptedSlice) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{10}
}

func (x *EncryptedSlice) GetHdkeyNonce() uint32 {
	if x != nil {
		return x.HdkeyNonce
	}
	return 0
}

func (x *EncryptedSlice) GetAesNonce() uint64 {
	if x != nil {
		return x.AesNonce
	}
	return 0
}

func (x *EncryptedSlice) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EncryptedSlice) GetRawSize() uint64 {
	if x != nil {
		return x.RawSize
	}
	return 0
}

type ShareLinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileHash           string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	LinkTime           uint64 `protobuf:"varint,3,opt,name=link_time,json=linkTime,proto3" json:"link_time,omitempty"`
	FileSize           uint64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	LinkTimeExp        uint64 `protobuf:"varint,5,opt,name=link_time_exp,json=linkTimeExp,proto3" json:"link_time_exp,omitempty"`
	ShareId            string `protobuf:"bytes,6,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	IsDirectory        bool   `protobuf:"varint,7,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory,omitempty"`
	ShareLink          string `protobuf:"bytes,8,opt,name=share_link,json=shareLink,proto3" json:"share_link,omitempty"`
	IsPrivate          bool   `protobuf:"varint,9,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ShareLinkPassword  string `protobuf:"bytes,10,opt,name=share_link_password,json=shareLinkPassword,proto3" json:"share_link_password,omitempty"`
	OwnerWalletAddress string `protobuf:"bytes,11,opt,name=owner_wallet_address,json=ownerWalletAddress,proto3" json:"owner_wallet_address,omitempty"`
}

func (x *ShareLinkInfo) Reset() {
	*x = ShareLinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareLinkInfo) ProtoMessage() {}

func (x *ShareLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareLinkInfo.ProtoReflect.Descriptor instead.
func (*ShareLinkInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{11}
}

func (x *ShareLinkInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareLinkInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ShareLinkInfo) GetLinkTime() uint64 {
	if x != nil {
		return x.LinkTime
	}
	return 0
}

func (x *ShareLinkInfo) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ShareLinkInfo) GetLinkTimeExp() uint64 {
	if x != nil {
		return x.LinkTimeExp
	}
	return 0
}

func (x *ShareLinkInfo) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *ShareLinkInfo) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *ShareLinkInfo) GetShareLink() string {
	if x != nil {
		return x.ShareLink
	}
	return ""
}

func (x *ShareLinkInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ShareLinkInfo) GetShareLinkPassword() string {
	if x != nil {
		return x.ShareLinkPassword
	}
	return ""
}

func (x *ShareLinkInfo) GetOwnerWalletAddress() string {
	if x != nil {
		return x.OwnerWalletAddress
	}
	return ""
}

type CpuStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUsedPercent float64 `protobuf:"fixed64,1,opt,name=total_used_percent,json=totalUsedPercent,proto3" json:"total_used_percent,omitempty"`
	NumCores         int64   `protobuf:"varint,2,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
}

func (x *CpuStat) Reset() {
	*x = CpuStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuStat) ProtoMessage() {}

func (x *CpuStat) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuStat.ProtoReflect.Descriptor instead.
func (*CpuStat) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{12}
}

func (x *CpuStat) GetTotalUsedPercent() float64 {
	if x != nil {
		return x.TotalUsedPercent
	}
	return 0
}

func (x *CpuStat) GetNumCores() int64 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

type MemoryStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemUsed      int64 `protobuf:"varint,1,opt,name=mem_used,json=memUsed,proto3" json:"mem_used,omitempty"`
	MemTotal     int64 `protobuf:"varint,2,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
	SwapMemUsed  int64 `protobuf:"varint,3,opt,name=swap_mem_used,json=swapMemUsed,proto3" json:"swap_mem_used,omitempty"`
	SwapMemTotal int64 `protobuf:"varint,4,opt,name=swap_mem_total,json=swapMemTotal,proto3" json:"swap_mem_total,omitempty"`
}

func (x *MemoryStat) Reset() {
	*x = MemoryStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStat) ProtoMessage() {}

func (x *MemoryStat) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStat.ProtoReflect.Descriptor instead.
func (*MemoryStat) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{13}
}

func (x *MemoryStat) GetMemUsed() int64 {
	if x != nil {
		return x.MemUsed
	}
	return 0
}

func (x *MemoryStat) GetMemTotal() int64 {
	if x != nil {
		return x.MemTotal
	}
	return 0
}

func (x *MemoryStat) GetSwapMemUsed() int64 {
	if x != nil {
		return x.SwapMemUsed
	}
	return 0
}

func (x *MemoryStat) GetSwapMemTotal() int64 {
	if x != nil {
		return x.SwapMemTotal
	}
	return 0
}

type DiskStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootUsed  int64 `protobuf:"varint,1,opt,name=root_used,json=rootUsed,proto3" json:"root_used,omitempty"`
	RootTotal int64 `protobuf:"varint,2,opt,name=root_total,json=rootTotal,proto3" json:"root_total,omitempty"`
}

func (x *DiskStat) Reset() {
	*x = DiskStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStat) ProtoMessage() {}

func (x *DiskStat) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStat.ProtoReflect.Descriptor instead.
func (*DiskStat) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{14}
}

func (x *DiskStat) GetRootUsed() int64 {
	if x != nil {
		return x.RootUsed
	}
	return 0
}

func (x *DiskStat) GetRootTotal() int64 {
	if x != nil {
		return x.RootTotal
	}
	return 0
}

type BandwidthStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Used  int64 `protobuf:"varint,1,opt,name=used,proto3" json:"used,omitempty"`
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BandwidthStat) Reset() {
	*x = BandwidthStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandwidthStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthStat) ProtoMessage() {}

func (x *BandwidthStat) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthStat.ProtoReflect.Descriptor instead.
func (*BandwidthStat) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{15}
}

func (x *BandwidthStat) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *BandwidthStat) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_sds_comm_proto protoreflect.FileDescriptor

var file_sds_comm_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x45, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0xa0, 0x01, 0x0a, 0x0a, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x76, 0x0a, 0x0a, 0x53, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x32, 0x70, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x0c,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x65, 0x0a, 0x0b, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61, 0x76, 0x65, 0x41,
	0x73, 0x22, 0xea, 0x02, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a,
	0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x5f, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x50, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x50,
	0x0a, 0x10, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x7d, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x64, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x64, 0x6b, 0x65, 0x79, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x65, 0x73, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xfc, 0x02, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x54,
	0x0a, 0x07, 0x43, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x4d, 0x65, 0x6d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x46, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x39, 0x0a,
	0x0d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0x2c, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x4f, 0x53, 0x45, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56,
	0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x2a, 0x28, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x57, 0x5f, 0x55, 0x50,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x10, 0x01, 0x2a, 0x35, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x46, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x16, 0x0a, 0x07, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x2a, 0x4f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x54,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50, 0x50,
	0x10, 0x02, 0x2a, 0x40, 0x0a, 0x07, 0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x03, 0x2a, 0x2d, 0x0a, 0x11, 0x53, 0x70, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x01, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x64, 0x73,
	0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sds_comm_proto_rawDescOnce sync.Once
	file_sds_comm_proto_rawDescData = file_sds_comm_proto_rawDesc
)

func file_sds_comm_proto_rawDescGZIP() []byte {
	file_sds_comm_proto_rawDescOnce.Do(func() {
		file_sds_comm_proto_rawDescData = protoimpl.X.CompressGZIP(file_sds_comm_proto_rawDescData)
	})
	return file_sds_comm_proto_rawDescData
}

var file_sds_comm_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_sds_comm_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_sds_comm_proto_goTypes = []interface{}{
	(ResultState)(0),          // 0: protos.ResultState
	(DownloadWrongType)(0),    // 1: protos.DownloadWrongType
	(UploadType)(0),           // 2: protos.UploadType
	(FileSortType)(0),         // 3: protos.FileSortType
	(MsgType)(0),              // 4: protos.MsgType
	(HeartbeatType)(0),        // 5: protos.HeartbeatType
	(PPState)(0),              // 6: protos.PPState
	(SpMaintenanceType)(0),    // 7: protos.SpMaintenanceType
	(*Result)(nil),            // 8: protos.Result
	(*PPBaseInfo)(nil),        // 9: protos.PPBaseInfo
	(*SPBaseInfo)(nil),        // 10: protos.SPBaseInfo
	(*FileInfo)(nil),          // 11: protos.FileInfo
	(*SliceHashAddr)(nil),     // 12: protos.SliceHashAddr
	(*SliceOffsetInfo)(nil),   // 13: protos.SliceOffsetInfo
	(*SliceOffset)(nil),       // 14: protos.SliceOffset
	(*FileIndexes)(nil),       // 15: protos.FileIndexes
	(*DownloadSliceInfo)(nil), // 16: protos.DownloadSliceInfo
	(*SliceStorageInfo)(nil),  // 17: protos.SliceStorageInfo
	(*EncryptedSlice)(nil),    // 18: protos.EncryptedSlice
	(*ShareLinkInfo)(nil),     // 19: protos.ShareLinkInfo
	(*CpuStat)(nil),           // 20: protos.CpuStat
	(*MemoryStat)(nil),        // 21: protos.MemoryStat
	(*DiskStat)(nil),          // 22: protos.DiskStat
	(*BandwidthStat)(nil),     // 23: protos.BandwidthStat
}
var file_sds_comm_proto_depIdxs = []int32{
	0,  // 0: protos.Result.state:type_name -> protos.ResultState
	14, // 1: protos.SliceHashAddr.slice_offset:type_name -> protos.SliceOffset
	9,  // 2: protos.SliceHashAddr.pp_info:type_name -> protos.PPBaseInfo
	14, // 3: protos.SliceOffsetInfo.slice_offset:type_name -> protos.SliceOffset
	14, // 4: protos.SliceOffsetInfo.encrypted_slice_offset:type_name -> protos.SliceOffset
	17, // 5: protos.DownloadSliceInfo.slice_storage_info:type_name -> protos.SliceStorageInfo
	9,  // 6: protos.DownloadSliceInfo.storage_pp_info:type_name -> protos.PPBaseInfo
	9,  // 7: protos.DownloadSliceInfo.backups_pp_info:type_name -> protos.PPBaseInfo
	14, // 8: protos.DownloadSliceInfo.slice_offset:type_name -> protos.SliceOffset
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_sds_comm_proto_init() }
func file_sds_comm_proto_init() {
	if File_sds_comm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sds_comm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceHashAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceOffsetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileIndexes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSliceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareLinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandwidthStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sds_comm_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sds_comm_proto_goTypes,
		DependencyIndexes: file_sds_comm_proto_depIdxs,
		EnumInfos:         file_sds_comm_proto_enumTypes,
		MessageInfos:      file_sds_comm_proto_msgTypes,
	}.Build()
	File_sds_comm_proto = out.File
	file_sds_comm_proto_rawDesc = nil
	file_sds_comm_proto_goTypes = nil
	file_sds_comm_proto_depIdxs = nil
}
