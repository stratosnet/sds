// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: sds_comm.proto

//for future protoc-gen-go requirement
//option go_package = "github.com/stratosnet/sds/msg/protos";

// j

package protos

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ResultState int32

const (
	ResultState_RES_SUCCESS ResultState = 0
	ResultState_RES_FAIL    ResultState = 1
)

// Enum value maps for ResultState.
var (
	ResultState_name = map[int32]string{
		0: "RES_SUCCESS",
		1: "RES_FAIL",
	}
	ResultState_value = map[string]int32{
		"RES_SUCCESS": 0,
		"RES_FAIL":    1,
	}
)

func (x ResultState) Enum() *ResultState {
	p := new(ResultState)
	*p = x
	return p
}

func (x ResultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultState) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[0].Descriptor()
}

func (ResultState) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[0]
}

func (x ResultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultState.Descriptor instead.
func (ResultState) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{0}
}

type DownloadWrongType int32

const (
	DownloadWrongType_LOSESLICE DownloadWrongType = 0
	DownloadWrongType_OVERTIME  DownloadWrongType = 1
)

// Enum value maps for DownloadWrongType.
var (
	DownloadWrongType_name = map[int32]string{
		0: "LOSESLICE",
		1: "OVERTIME",
	}
	DownloadWrongType_value = map[string]int32{
		"LOSESLICE": 0,
		"OVERTIME":  1,
	}
)

func (x DownloadWrongType) Enum() *DownloadWrongType {
	p := new(DownloadWrongType)
	*p = x
	return p
}

func (x DownloadWrongType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadWrongType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[1].Descriptor()
}

func (DownloadWrongType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[1]
}

func (x DownloadWrongType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadWrongType.Descriptor instead.
func (DownloadWrongType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{1}
}

type AlbumType int32

const (
	AlbumType_ALL   AlbumType = 0
	AlbumType_VIDEO AlbumType = 1
	AlbumType_MUSIC AlbumType = 2
	AlbumType_OTHER AlbumType = 3
)

// Enum value maps for AlbumType.
var (
	AlbumType_name = map[int32]string{
		0: "ALL",
		1: "VIDEO",
		2: "MUSIC",
		3: "OTHER",
	}
	AlbumType_value = map[string]int32{
		"ALL":   0,
		"VIDEO": 1,
		"MUSIC": 2,
		"OTHER": 3,
	}
)

func (x AlbumType) Enum() *AlbumType {
	p := new(AlbumType)
	*p = x
	return p
}

func (x AlbumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlbumType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[2].Descriptor()
}

func (AlbumType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[2]
}

func (x AlbumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlbumType.Descriptor instead.
func (AlbumType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{2}
}

type AlbumSortType int32

const (
	AlbumSortType_LATEST AlbumSortType = 0
	AlbumSortType_VISITS AlbumSortType = 1 // most visit
)

// Enum value maps for AlbumSortType.
var (
	AlbumSortType_name = map[int32]string{
		0: "LATEST",
		1: "VISITS",
	}
	AlbumSortType_value = map[string]int32{
		"LATEST": 0,
		"VISITS": 1,
	}
)

func (x AlbumSortType) Enum() *AlbumSortType {
	p := new(AlbumSortType)
	*p = x
	return p
}

func (x AlbumSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlbumSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[3].Descriptor()
}

func (AlbumSortType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[3]
}

func (x AlbumSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlbumSortType.Descriptor instead.
func (AlbumSortType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{3}
}

type FileSortType int32

const (
	FileSortType_DEF  FileSortType = 0 // default
	FileSortType_TIME FileSortType = 1 // time
	FileSortType_SIZE FileSortType = 2 // file size
	FileSortType_NAME FileSortType = 3 // name alphabet
)

// Enum value maps for FileSortType.
var (
	FileSortType_name = map[int32]string{
		0: "DEF",
		1: "TIME",
		2: "SIZE",
		3: "NAME",
	}
	FileSortType_value = map[string]int32{
		"DEF":  0,
		"TIME": 1,
		"SIZE": 2,
		"NAME": 3,
	}
)

func (x FileSortType) Enum() *FileSortType {
	p := new(FileSortType)
	*p = x
	return p
}

func (x FileSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[4].Descriptor()
}

func (FileSortType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[4]
}

func (x FileSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileSortType.Descriptor instead.
func (FileSortType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{4}
}

type MsgType int32

const (
	MsgType_DEFAULT MsgType = 0
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "DEFAULT",
	}
	MsgType_value = map[string]int32{
		"DEFAULT": 0,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_sds_comm_proto_enumTypes[5].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_sds_comm_proto_enumTypes[5]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{5}
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State ResultState `protobuf:"varint,1,opt,name=state,proto3,enum=protos.ResultState" json:"state,omitempty"`
	Msg   string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetState() ResultState {
	if x != nil {
		return x.State
	}
	return ResultState_RES_SUCCESS
}

func (x *Result) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PPBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	NetworkAddress string `protobuf:"bytes,3,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
}

func (x *PPBaseInfo) Reset() {
	*x = PPBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPBaseInfo) ProtoMessage() {}

func (x *PPBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPBaseInfo.ProtoReflect.Descriptor instead.
func (*PPBaseInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{1}
}

func (x *PPBaseInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *PPBaseInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *PPBaseInfo) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize           uint64 `protobuf:"varint,1,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileHash           string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FileName           string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	CreateTime         uint64 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	IsDirectory        bool   `protobuf:"varint,5,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory,omitempty"`
	StoragePath        string `protobuf:"bytes,6,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	IsPrivate          bool   `protobuf:"varint,7,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	OwnerWalletAddress string `protobuf:"bytes,8,opt,name=owner_wallet_address,json=ownerWalletAddress,proto3" json:"owner_wallet_address,omitempty"`
	ShareLink          string `protobuf:"bytes,9,opt,name=share_link,json=shareLink,proto3" json:"share_link,omitempty"`
	SortId             uint64 `protobuf:"varint,10,opt,name=sort_id,json=sortId,proto3" json:"sort_id,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{2}
}

func (x *FileInfo) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FileInfo) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *FileInfo) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *FileInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *FileInfo) GetOwnerWalletAddress() string {
	if x != nil {
		return x.OwnerWalletAddress
	}
	return ""
}

func (x *FileInfo) GetShareLink() string {
	if x != nil {
		return x.ShareLink
	}
	return ""
}

func (x *FileInfo) GetSortId() uint64 {
	if x != nil {
		return x.SortId
	}
	return 0
}

// slice number and pp address
type SliceNumAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceNumber uint64       `protobuf:"varint,1,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	SliceOffset *SliceOffset `protobuf:"bytes,2,opt,name=slice_offset,json=sliceOffset,proto3" json:"slice_offset,omitempty"`
	PpInfo      *PPBaseInfo  `protobuf:"bytes,3,opt,name=pp_info,json=ppInfo,proto3" json:"pp_info,omitempty"`
}

func (x *SliceNumAddr) Reset() {
	*x = SliceNumAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceNumAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceNumAddr) ProtoMessage() {}

func (x *SliceNumAddr) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceNumAddr.ProtoReflect.Descriptor instead.
func (*SliceNumAddr) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{3}
}

func (x *SliceNumAddr) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *SliceNumAddr) GetSliceOffset() *SliceOffset {
	if x != nil {
		return x.SliceOffset
	}
	return nil
}

func (x *SliceNumAddr) GetPpInfo() *PPBaseInfo {
	if x != nil {
		return x.PpInfo
	}
	return nil
}

type SliceOffsetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceHash   string       `protobuf:"bytes,1,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	SliceOffset *SliceOffset `protobuf:"bytes,2,opt,name=slice_offset,json=sliceOffset,proto3" json:"slice_offset,omitempty"`
}

func (x *SliceOffsetInfo) Reset() {
	*x = SliceOffsetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceOffsetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceOffsetInfo) ProtoMessage() {}

func (x *SliceOffsetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceOffsetInfo.ProtoReflect.Descriptor instead.
func (*SliceOffsetInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{4}
}

func (x *SliceOffsetInfo) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *SliceOffsetInfo) GetSliceOffset() *SliceOffset {
	if x != nil {
		return x.SliceOffset
	}
	return nil
}

type SliceOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceOffsetStart uint64 `protobuf:"varint,1,opt,name=slice_offset_start,json=sliceOffsetStart,proto3" json:"slice_offset_start,omitempty"`
	SliceOffsetEnd   uint64 `protobuf:"varint,2,opt,name=slice_offset_end,json=sliceOffsetEnd,proto3" json:"slice_offset_end,omitempty"`
}

func (x *SliceOffset) Reset() {
	*x = SliceOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceOffset) ProtoMessage() {}

func (x *SliceOffset) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceOffset.ProtoReflect.Descriptor instead.
func (*SliceOffset) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{5}
}

func (x *SliceOffset) GetSliceOffsetStart() uint64 {
	if x != nil {
		return x.SliceOffsetStart
	}
	return 0
}

func (x *SliceOffset) GetSliceOffsetEnd() uint64 {
	if x != nil {
		return x.SliceOffsetEnd
	}
	return 0
}

type FileIndexes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  string file_hash = 1; // file hash
	FilePath      string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` //  spb://accunt/fileHash|fileName
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	SavePath      string `protobuf:"bytes,4,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
}

func (x *FileIndexes) Reset() {
	*x = FileIndexes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileIndexes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileIndexes) ProtoMessage() {}

func (x *FileIndexes) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileIndexes.ProtoReflect.Descriptor instead.
func (*FileIndexes) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{6}
}

func (x *FileIndexes) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileIndexes) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *FileIndexes) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *FileIndexes) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

type DownloadSliceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceStorageInfo *SliceStorageInfo `protobuf:"bytes,1,opt,name=slice_storage_info,json=sliceStorageInfo,proto3" json:"slice_storage_info,omitempty"`
	SliceNumber      uint64            `protobuf:"varint,2,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	StoragePpInfo    *PPBaseInfo       `protobuf:"bytes,3,opt,name=storage_pp_info,json=storagePpInfo,proto3" json:"storage_pp_info,omitempty"`
	BackupsPpInfo    *PPBaseInfo       `protobuf:"bytes,4,opt,name=backups_pp_info,json=backupsPpInfo,proto3" json:"backups_pp_info,omitempty"`
	VisitResult      bool              `protobuf:"varint,5,opt,name=visit_result,json=visitResult,proto3" json:"visit_result,omitempty"`
	TaskId           string            `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SliceOffset      *SliceOffset      `protobuf:"bytes,7,opt,name=slice_offset,json=sliceOffset,proto3" json:"slice_offset,omitempty"`
}

func (x *DownloadSliceInfo) Reset() {
	*x = DownloadSliceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSliceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSliceInfo) ProtoMessage() {}

func (x *DownloadSliceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSliceInfo.ProtoReflect.Descriptor instead.
func (*DownloadSliceInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{7}
}

func (x *DownloadSliceInfo) GetSliceStorageInfo() *SliceStorageInfo {
	if x != nil {
		return x.SliceStorageInfo
	}
	return nil
}

func (x *DownloadSliceInfo) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *DownloadSliceInfo) GetStoragePpInfo() *PPBaseInfo {
	if x != nil {
		return x.StoragePpInfo
	}
	return nil
}

func (x *DownloadSliceInfo) GetBackupsPpInfo() *PPBaseInfo {
	if x != nil {
		return x.BackupsPpInfo
	}
	return nil
}

func (x *DownloadSliceInfo) GetVisitResult() bool {
	if x != nil {
		return x.VisitResult
	}
	return false
}

func (x *DownloadSliceInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DownloadSliceInfo) GetSliceOffset() *SliceOffset {
	if x != nil {
		return x.SliceOffset
	}
	return nil
}

type SliceStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceSize uint64 `protobuf:"varint,1,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"` //
	SliceHash string `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`  //
}

func (x *SliceStorageInfo) Reset() {
	*x = SliceStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceStorageInfo) ProtoMessage() {}

func (x *SliceStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceStorageInfo.ProtoReflect.Descriptor instead.
func (*SliceStorageInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{8}
}

func (x *SliceStorageInfo) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *SliceStorageInfo) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

type ShareLinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileHash           string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	LinkTime           uint64 `protobuf:"varint,3,opt,name=link_time,json=linkTime,proto3" json:"link_time,omitempty"`
	FileSize           uint64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	LinkTimeExp        uint64 `protobuf:"varint,5,opt,name=link_time_exp,json=linkTimeExp,proto3" json:"link_time_exp,omitempty"`
	ShareId            string `protobuf:"bytes,6,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	IsDirectory        bool   `protobuf:"varint,7,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory,omitempty"`
	ShareLink          string `protobuf:"bytes,8,opt,name=share_link,json=shareLink,proto3" json:"share_link,omitempty"`
	IsPrivate          bool   `protobuf:"varint,9,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ShareLinkPassword  string `protobuf:"bytes,10,opt,name=share_link_password,json=shareLinkPassword,proto3" json:"share_link_password,omitempty"`
	OwnerWalletAddress string `protobuf:"bytes,11,opt,name=owner_wallet_address,json=ownerWalletAddress,proto3" json:"owner_wallet_address,omitempty"`
}

func (x *ShareLinkInfo) Reset() {
	*x = ShareLinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareLinkInfo) ProtoMessage() {}

func (x *ShareLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareLinkInfo.ProtoReflect.Descriptor instead.
func (*ShareLinkInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{9}
}

func (x *ShareLinkInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareLinkInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ShareLinkInfo) GetLinkTime() uint64 {
	if x != nil {
		return x.LinkTime
	}
	return 0
}

func (x *ShareLinkInfo) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ShareLinkInfo) GetLinkTimeExp() uint64 {
	if x != nil {
		return x.LinkTimeExp
	}
	return 0
}

func (x *ShareLinkInfo) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *ShareLinkInfo) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *ShareLinkInfo) GetShareLink() string {
	if x != nil {
		return x.ShareLink
	}
	return ""
}

func (x *ShareLinkInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ShareLinkInfo) GetShareLinkPassword() string {
	if x != nil {
		return x.ShareLinkPassword
	}
	return ""
}

func (x *ShareLinkInfo) GetOwnerWalletAddress() string {
	if x != nil {
		return x.OwnerWalletAddress
	}
	return ""
}

type AlbumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumId        string    `protobuf:"bytes,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`                        // id
	AlbumName      string    `protobuf:"bytes,2,opt,name=album_name,json=albumName,proto3" json:"album_name,omitempty"`                  // name
	AlbumBlurb     string    `protobuf:"bytes,3,opt,name=album_blurb,json=albumBlurb,proto3" json:"album_blurb,omitempty"`               // abstract
	AlbumVisit     int64     `protobuf:"varint,4,opt,name=album_visit,json=albumVisit,proto3" json:"album_visit,omitempty"`              //
	AlbumTime      int64     `protobuf:"varint,5,opt,name=album_time,json=albumTime,proto3" json:"album_time,omitempty"`                 // creation time
	AlbumCoverLink string    `protobuf:"bytes,6,opt,name=album_cover_link,json=albumCoverLink,proto3" json:"album_cover_link,omitempty"` //
	IsPrivate      bool      `protobuf:"varint,7,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`                 //
	AlbumType      AlbumType `protobuf:"varint,8,opt,name=album_type,json=albumType,proto3,enum=protos.AlbumType" json:"album_type,omitempty"`
}

func (x *AlbumInfo) Reset() {
	*x = AlbumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumInfo) ProtoMessage() {}

func (x *AlbumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumInfo.ProtoReflect.Descriptor instead.
func (*AlbumInfo) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{10}
}

func (x *AlbumInfo) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *AlbumInfo) GetAlbumName() string {
	if x != nil {
		return x.AlbumName
	}
	return ""
}

func (x *AlbumInfo) GetAlbumBlurb() string {
	if x != nil {
		return x.AlbumBlurb
	}
	return ""
}

func (x *AlbumInfo) GetAlbumVisit() int64 {
	if x != nil {
		return x.AlbumVisit
	}
	return 0
}

func (x *AlbumInfo) GetAlbumTime() int64 {
	if x != nil {
		return x.AlbumTime
	}
	return 0
}

func (x *AlbumInfo) GetAlbumCoverLink() string {
	if x != nil {
		return x.AlbumCoverLink
	}
	return ""
}

func (x *AlbumInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *AlbumInfo) GetAlbumType() AlbumType {
	if x != nil {
		return x.AlbumType
	}
	return AlbumType_ALL
}

type AlbumNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All   int64 `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Video int64 `protobuf:"varint,2,opt,name=video,proto3" json:"video,omitempty"`
	Music int64 `protobuf:"varint,3,opt,name=music,proto3" json:"music,omitempty"`
	Other int64 `protobuf:"varint,4,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *AlbumNumber) Reset() {
	*x = AlbumNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_comm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumNumber) ProtoMessage() {}

func (x *AlbumNumber) ProtoReflect() protoreflect.Message {
	mi := &file_sds_comm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumNumber.ProtoReflect.Descriptor instead.
func (*AlbumNumber) Descriptor() ([]byte, []int) {
	return file_sds_comm_proto_rawDescGZIP(), []int{11}
}

func (x *AlbumNumber) GetAll() int64 {
	if x != nil {
		return x.All
	}
	return 0
}

func (x *AlbumNumber) GetVideo() int64 {
	if x != nil {
		return x.Video
	}
	return 0
}

func (x *AlbumNumber) GetMusic() int64 {
	if x != nil {
		return x.Music
	}
	return 0
}

func (x *AlbumNumber) GetOther() int64 {
	if x != nil {
		return x.Other
	}
	return 0
}

var File_sds_comm_proto protoreflect.FileDescriptor

var file_sds_comm_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x45, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x7d, 0x0a, 0x0a, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd1,
	0x02, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x0f, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a,
	0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x65, 0x0a, 0x0b, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x22, 0x8f, 0x01, 0x0a,
	0x0b, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xea,
	0x02, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x5f, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x50, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xfc, 0x02,
	0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa1, 0x02, 0x0a,
	0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x62, 0x6c,
	0x75, 0x72, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x42, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x61, 0x0a, 0x0b, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x2a, 0x2c, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x01, 0x2a, 0x30, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x72, 0x6f,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x53, 0x45, 0x53, 0x4c,
	0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x27, 0x0a, 0x0d, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x49, 0x53, 0x49, 0x54,
	0x53, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x46, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x16, 0x0a, 0x07, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sds_comm_proto_rawDescOnce sync.Once
	file_sds_comm_proto_rawDescData = file_sds_comm_proto_rawDesc
)

func file_sds_comm_proto_rawDescGZIP() []byte {
	file_sds_comm_proto_rawDescOnce.Do(func() {
		file_sds_comm_proto_rawDescData = protoimpl.X.CompressGZIP(file_sds_comm_proto_rawDescData)
	})
	return file_sds_comm_proto_rawDescData
}

var file_sds_comm_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_sds_comm_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_sds_comm_proto_goTypes = []interface{}{
	(ResultState)(0),          // 0: protos.ResultState
	(DownloadWrongType)(0),    // 1: protos.DownloadWrongType
	(AlbumType)(0),            // 2: protos.AlbumType
	(AlbumSortType)(0),        // 3: protos.AlbumSortType
	(FileSortType)(0),         // 4: protos.FileSortType
	(MsgType)(0),              // 5: protos.MsgType
	(*Result)(nil),            // 6: protos.Result
	(*PPBaseInfo)(nil),        // 7: protos.PPBaseInfo
	(*FileInfo)(nil),          // 8: protos.FileInfo
	(*SliceNumAddr)(nil),      // 9: protos.SliceNumAddr
	(*SliceOffsetInfo)(nil),   // 10: protos.SliceOffsetInfo
	(*SliceOffset)(nil),       // 11: protos.SliceOffset
	(*FileIndexes)(nil),       // 12: protos.FileIndexes
	(*DownloadSliceInfo)(nil), // 13: protos.DownloadSliceInfo
	(*SliceStorageInfo)(nil),  // 14: protos.SliceStorageInfo
	(*ShareLinkInfo)(nil),     // 15: protos.ShareLinkInfo
	(*AlbumInfo)(nil),         // 16: protos.AlbumInfo
	(*AlbumNumber)(nil),       // 17: protos.AlbumNumber
}
var file_sds_comm_proto_depIdxs = []int32{
	0,  // 0: protos.Result.state:type_name -> protos.ResultState
	11, // 1: protos.SliceNumAddr.slice_offset:type_name -> protos.SliceOffset
	7,  // 2: protos.SliceNumAddr.pp_info:type_name -> protos.PPBaseInfo
	11, // 3: protos.SliceOffsetInfo.slice_offset:type_name -> protos.SliceOffset
	14, // 4: protos.DownloadSliceInfo.slice_storage_info:type_name -> protos.SliceStorageInfo
	7,  // 5: protos.DownloadSliceInfo.storage_pp_info:type_name -> protos.PPBaseInfo
	7,  // 6: protos.DownloadSliceInfo.backups_pp_info:type_name -> protos.PPBaseInfo
	11, // 7: protos.DownloadSliceInfo.slice_offset:type_name -> protos.SliceOffset
	2,  // 8: protos.AlbumInfo.album_type:type_name -> protos.AlbumType
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_sds_comm_proto_init() }
func file_sds_comm_proto_init() {
	if File_sds_comm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sds_comm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceNumAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceOffsetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileIndexes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSliceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareLinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_comm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sds_comm_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sds_comm_proto_goTypes,
		DependencyIndexes: file_sds_comm_proto_depIdxs,
		EnumInfos:         file_sds_comm_proto_enumTypes,
		MessageInfos:      file_sds_comm_proto_msgTypes,
	}.Build()
	File_sds_comm_proto = out.File
	file_sds_comm_proto_rawDesc = nil
	file_sds_comm_proto_goTypes = nil
	file_sds_comm_proto_depIdxs = nil
}
