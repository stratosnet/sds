// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: sds.proto

//for future protoc-gen-go requirement
//option go_package = "github.com/stratosnet/sds/msg/protos";

package protos

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ReqGetPPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyAddress *PPBaseInfo `protobuf:"bytes,1,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
}

func (x *ReqGetPPList) Reset() {
	*x = ReqGetPPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetPPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetPPList) ProtoMessage() {}

func (x *ReqGetPPList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetPPList.ProtoReflect.Descriptor instead.
func (*ReqGetPPList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{0}
}

func (x *ReqGetPPList) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

type RspGetPPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PpList []*PPBaseInfo `protobuf:"bytes,1,rep,name=pp_list,json=ppList,proto3" json:"pp_list,omitempty"`
	Result *Result       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspGetPPList) Reset() {
	*x = RspGetPPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetPPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetPPList) ProtoMessage() {}

func (x *RspGetPPList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetPPList.ProtoReflect.Descriptor instead.
func (*RspGetPPList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{1}
}

func (x *RspGetPPList) GetPpList() []*PPBaseInfo {
	if x != nil {
		return x.PpList
	}
	return nil
}

func (x *RspGetPPList) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   *PPBaseInfo `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey []byte      `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	MyAddress *PPBaseInfo `protobuf:"bytes,3,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"` //middleman pp address
}

func (x *ReqRegister) Reset() {
	*x = ReqRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRegister) ProtoMessage() {}

func (x *ReqRegister) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRegister.ProtoReflect.Descriptor instead.
func (*ReqRegister) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{2}
}

func (x *ReqRegister) GetAddress() *PPBaseInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ReqRegister) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ReqRegister) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

type RspRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // if register success or not
	P2PAddress string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	IsPP       bool    `protobuf:"varint,3,opt,name=isPP,proto3" json:"isPP,omitempty"`
}

func (x *RspRegister) Reset() {
	*x = RspRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRegister) ProtoMessage() {}

func (x *RspRegister) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRegister.ProtoReflect.Descriptor instead.
func (*RspRegister) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{3}
}

func (x *RspRegister) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspRegister) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspRegister) GetIsPP() bool {
	if x != nil {
		return x.IsPP
	}
	return false
}

type ReqMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   *PPBaseInfo `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey []byte      `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // publickey
	Sign      []byte      `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`                            //signature
}

func (x *ReqMining) Reset() {
	*x = ReqMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMining) ProtoMessage() {}

func (x *ReqMining) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMining.ProtoReflect.Descriptor instead.
func (*ReqMining) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{4}
}

func (x *ReqMining) GetAddress() *PPBaseInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ReqMining) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ReqMining) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type RspMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspMining) Reset() {
	*x = RspMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspMining) ProtoMessage() {}

func (x *RspMining) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspMining.ProtoReflect.Descriptor instead.
func (*RspMining) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{5}
}

func (x *RspMining) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqUploadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo  *FileInfo   `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	MyAddress *PPBaseInfo `protobuf:"bytes,2,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
	Sign      []byte      `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	ReqId     string      `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	IsCover   bool        `protobuf:"varint,5,opt,name=is_cover,json=isCover,proto3" json:"is_cover,omitempty"`
}

func (x *ReqUploadFile) Reset() {
	*x = ReqUploadFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUploadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUploadFile) ProtoMessage() {}

func (x *ReqUploadFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUploadFile.ProtoReflect.Descriptor instead.
func (*ReqUploadFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{6}
}

func (x *ReqUploadFile) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *ReqUploadFile) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

func (x *ReqUploadFile) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *ReqUploadFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqUploadFile) GetIsCover() bool {
	if x != nil {
		return x.IsCover
	}
	return false
}

type RspUploadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageCer         string          `protobuf:"bytes,1,opt,name=storage_cer,json=storageCer,proto3" json:"storage_cer,omitempty"` // storage certificate
	PpList             []*SliceNumAddr `protobuf:"bytes,2,rep,name=pp_list,json=ppList,proto3" json:"pp_list,omitempty"`             // slice number and pp address list
	FileHash           string          `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	TaskId             string          `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`              //
	TotalSlice         int64           `protobuf:"varint,5,opt,name=total_slice,json=totalSlice,proto3" json:"total_slice,omitempty"` //
	Result             *Result         `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`                            // accept upload or not
	ReqId              string          `protobuf:"bytes,7,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`                 //
	OwnerWalletAddress string          `protobuf:"bytes,8,opt,name=owner_wallet_address,json=ownerWalletAddress,proto3" json:"owner_wallet_address,omitempty"`
}

func (x *RspUploadFile) Reset() {
	*x = RspUploadFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUploadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUploadFile) ProtoMessage() {}

func (x *RspUploadFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUploadFile.ProtoReflect.Descriptor instead.
func (*RspUploadFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{7}
}

func (x *RspUploadFile) GetStorageCer() string {
	if x != nil {
		return x.StorageCer
	}
	return ""
}

func (x *RspUploadFile) GetPpList() []*SliceNumAddr {
	if x != nil {
		return x.PpList
	}
	return nil
}

func (x *RspUploadFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspUploadFile) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspUploadFile) GetTotalSlice() int64 {
	if x != nil {
		return x.TotalSlice
	}
	return 0
}

func (x *RspUploadFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspUploadFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspUploadFile) GetOwnerWalletAddress() string {
	if x != nil {
		return x.OwnerWalletAddress
	}
	return ""
}

type ReqUploadFileSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceNumAddr  *SliceNumAddr    `protobuf:"bytes,1,opt,name=slice_num_addr,json=sliceNumAddr,proto3" json:"slice_num_addr,omitempty"` //
	FileCrc       uint32           `protobuf:"varint,2,opt,name=file_crc,json=fileCrc,proto3" json:"file_crc,omitempty"`                 //
	SliceInfo     *SliceOffsetInfo `protobuf:"bytes,3,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`            //
	Data          []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                       //
	FileHash      string           `protobuf:"bytes,5,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`               //
	P2PAddress    string           `protobuf:"bytes,6,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string           `protobuf:"bytes,7,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	TaskId        string           `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                      //
	SliceSize     uint64           `protobuf:"varint,9,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`            //
}

func (x *ReqUploadFileSlice) Reset() {
	*x = ReqUploadFileSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUploadFileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUploadFileSlice) ProtoMessage() {}

func (x *ReqUploadFileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUploadFileSlice.ProtoReflect.Descriptor instead.
func (*ReqUploadFileSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{8}
}

func (x *ReqUploadFileSlice) GetSliceNumAddr() *SliceNumAddr {
	if x != nil {
		return x.SliceNumAddr
	}
	return nil
}

func (x *ReqUploadFileSlice) GetFileCrc() uint32 {
	if x != nil {
		return x.FileCrc
	}
	return 0
}

func (x *ReqUploadFileSlice) GetSliceInfo() *SliceOffsetInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *ReqUploadFileSlice) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqUploadFileSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqUploadFileSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqUploadFileSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqUploadFileSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqUploadFileSlice) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

type RspUploadFileSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        *Result       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`                                   //
	SliceNumAddr  *SliceNumAddr `protobuf:"bytes,2,opt,name=slice_num_addr,json=sliceNumAddr,proto3" json:"slice_num_addr,omitempty"` //
	FileHash      string        `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`               //
	SliceHash     string        `protobuf:"bytes,4,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`            //
	P2PAddress    string        `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string        `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	SliceSize     uint64        `protobuf:"varint,7,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`            //
	TaskId        string        `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                      //
}

func (x *RspUploadFileSlice) Reset() {
	*x = RspUploadFileSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUploadFileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUploadFileSlice) ProtoMessage() {}

func (x *RspUploadFileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUploadFileSlice.ProtoReflect.Descriptor instead.
func (*RspUploadFileSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{9}
}

func (x *RspUploadFileSlice) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspUploadFileSlice) GetSliceNumAddr() *SliceNumAddr {
	if x != nil {
		return x.SliceNumAddr
	}
	return nil
}

func (x *RspUploadFileSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspUploadFileSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *RspUploadFileSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspUploadFileSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspUploadFileSlice) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspUploadFileSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type UploadSpeedOfProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash  string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`     //
	SliceSize uint64 `protobuf:"varint,2,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"` //
}

func (x *UploadSpeedOfProgress) Reset() {
	*x = UploadSpeedOfProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSpeedOfProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSpeedOfProgress) ProtoMessage() {}

func (x *UploadSpeedOfProgress) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSpeedOfProgress.ProtoReflect.Descriptor instead.
func (*UploadSpeedOfProgress) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{10}
}

func (x *UploadSpeedOfProgress) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *UploadSpeedOfProgress) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

type ReportUploadSliceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceNumAddr  *SliceNumAddr `protobuf:"bytes,1,opt,name=slice_num_addr,json=sliceNumAddr,proto3" json:"slice_num_addr,omitempty"` //
	SliceHash     string        `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`            //
	FileHash      string        `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`               //
	UploadSuccess bool          `protobuf:"varint,4,opt,name=upload_success,json=uploadSuccess,proto3" json:"upload_success,omitempty"`
	IsPP          bool          `protobuf:"varint,5,opt,name=isPP,proto3" json:"isPP,omitempty"`                            //
	SliceSize     uint64        `protobuf:"varint,6,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"` //
	Sign          []byte        `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId        string        `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	P2PAddress    string        `protobuf:"bytes,9,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string        `protobuf:"bytes,10,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ReportUploadSliceResult) Reset() {
	*x = ReportUploadSliceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUploadSliceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUploadSliceResult) ProtoMessage() {}

func (x *ReportUploadSliceResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUploadSliceResult.ProtoReflect.Descriptor instead.
func (*ReportUploadSliceResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{11}
}

func (x *ReportUploadSliceResult) GetSliceNumAddr() *SliceNumAddr {
	if x != nil {
		return x.SliceNumAddr
	}
	return nil
}

func (x *ReportUploadSliceResult) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *ReportUploadSliceResult) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReportUploadSliceResult) GetUploadSuccess() bool {
	if x != nil {
		return x.UploadSuccess
	}
	return false
}

func (x *ReportUploadSliceResult) GetIsPP() bool {
	if x != nil {
		return x.IsPP
	}
	return false
}

func (x *ReportUploadSliceResult) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *ReportUploadSliceResult) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *ReportUploadSliceResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReportUploadSliceResult) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReportUploadSliceResult) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspReportUploadSliceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *Result       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	SliceNumAddr *SliceNumAddr `protobuf:"bytes,2,opt,name=slice_num_addr,json=sliceNumAddr,proto3" json:"slice_num_addr,omitempty"`
}

func (x *RspReportUploadSliceResult) Reset() {
	*x = RspReportUploadSliceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReportUploadSliceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReportUploadSliceResult) ProtoMessage() {}

func (x *RspReportUploadSliceResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReportUploadSliceResult.ProtoReflect.Descriptor instead.
func (*RspReportUploadSliceResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{12}
}

func (x *RspReportUploadSliceResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspReportUploadSliceResult) GetSliceNumAddr() *SliceNumAddr {
	if x != nil {
		return x.SliceNumAddr
	}
	return nil
}

type Uploaded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReporterAddress string `protobuf:"bytes,1,opt,name=reporter_address,json=reporterAddress,proto3" json:"reporter_address,omitempty"`
	UploaderAddress string `protobuf:"bytes,2,opt,name=uploader_address,json=uploaderAddress,proto3" json:"uploader_address,omitempty"`
	FileHash        string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *Uploaded) Reset() {
	*x = Uploaded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uploaded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uploaded) ProtoMessage() {}

func (x *Uploaded) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uploaded.ProtoReflect.Descriptor instead.
func (*Uploaded) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{13}
}

func (x *Uploaded) GetReporterAddress() string {
	if x != nil {
		return x.ReporterAddress
	}
	return ""
}

func (x *Uploaded) GetUploaderAddress() string {
	if x != nil {
		return x.UploaderAddress
	}
	return ""
}

func (x *Uploaded) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

type ReqFindMyFileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string       `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string       `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileName      string       `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"` // return all if file name is empty
	Directory     string       `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`               // return first level directory if left empty
	ReqId         string       `protobuf:"bytes,5,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`          //
	FileType      FileSortType `protobuf:"varint,6,opt,name=file_type,json=fileType,proto3,enum=protos.FileSortType" json:"file_type,omitempty"`
	IsUp          bool         `protobuf:"varint,7,opt,name=is_up,json=isUp,proto3" json:"is_up,omitempty"`
	Keyword       string       `protobuf:"bytes,8,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ReqFindMyFileList) Reset() {
	*x = ReqFindMyFileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindMyFileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindMyFileList) ProtoMessage() {}

func (x *ReqFindMyFileList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindMyFileList.ProtoReflect.Descriptor instead.
func (*ReqFindMyFileList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{14}
}

func (x *ReqFindMyFileList) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqFindMyFileList) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqFindMyFileList) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ReqFindMyFileList) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ReqFindMyFileList) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqFindMyFileList) GetFileType() FileSortType {
	if x != nil {
		return x.FileType
	}
	return FileSortType_DEF
}

func (x *ReqFindMyFileList) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *ReqFindMyFileList) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type RspFindMyFileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo      []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	P2PAddress    string      `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string      `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string      `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"` //
	Result        *Result     `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspFindMyFileList) Reset() {
	*x = RspFindMyFileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFindMyFileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFindMyFileList) ProtoMessage() {}

func (x *RspFindMyFileList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFindMyFileList.ProtoReflect.Descriptor instead.
func (*RspFindMyFileList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{15}
}

func (x *RspFindMyFileList) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *RspFindMyFileList) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFindMyFileList) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFindMyFileList) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspFindMyFileList) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqFindDirectoryTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	PathHash      string `protobuf:"bytes,3,opt,name=path_hash,json=pathHash,proto3" json:"path_hash,omitempty"`
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"` //
}

func (x *ReqFindDirectoryTree) Reset() {
	*x = ReqFindDirectoryTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindDirectoryTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindDirectoryTree) ProtoMessage() {}

func (x *ReqFindDirectoryTree) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindDirectoryTree.ProtoReflect.Descriptor instead.
func (*ReqFindDirectoryTree) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{16}
}

func (x *ReqFindDirectoryTree) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqFindDirectoryTree) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqFindDirectoryTree) GetPathHash() string {
	if x != nil {
		return x.PathHash
	}
	return ""
}

func (x *ReqFindDirectoryTree) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspFindDirectoryTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string      `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Directory     string      `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
	FileInfo      []*FileInfo `protobuf:"bytes,4,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	ReqId         string      `protobuf:"bytes,5,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result     `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspFindDirectoryTree) Reset() {
	*x = RspFindDirectoryTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFindDirectoryTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFindDirectoryTree) ProtoMessage() {}

func (x *RspFindDirectoryTree) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFindDirectoryTree.ProtoReflect.Descriptor instead.
func (*RspFindDirectoryTree) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{17}
}

func (x *RspFindDirectoryTree) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFindDirectoryTree) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFindDirectoryTree) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *RspFindDirectoryTree) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *RspFindDirectoryTree) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspFindDirectoryTree) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqFileStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIndexes *FileIndexes `protobuf:"bytes,1,opt,name=file_indexes,json=fileIndexes,proto3" json:"file_indexes,omitempty"`
	Sign        []byte       `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	ReqId       string       `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqFileStorageInfo) Reset() {
	*x = ReqFileStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFileStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFileStorageInfo) ProtoMessage() {}

func (x *ReqFileStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFileStorageInfo.ProtoReflect.Descriptor instead.
func (*ReqFileStorageInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{18}
}

func (x *ReqFileStorageInfo) GetFileIndexes() *FileIndexes {
	if x != nil {
		return x.FileIndexes
	}
	return nil
}

func (x *ReqFileStorageInfo) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *ReqFileStorageInfo) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspFileStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisitCer      string               `protobuf:"bytes,1,opt,name=visit_cer,json=visitCer,proto3" json:"visit_cer,omitempty"`
	P2PAddress    string               `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string               `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	SliceInfo     []*DownloadSliceInfo `protobuf:"bytes,4,rep,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
	FileHash      string               `protobuf:"bytes,5,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FileName      string               `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Result        *Result              `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	ReqId         string               `protobuf:"bytes,8,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	SavePath      string               `protobuf:"bytes,9,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	FileSize      uint64               `protobuf:"varint,10,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
}

func (x *RspFileStorageInfo) Reset() {
	*x = RspFileStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFileStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFileStorageInfo) ProtoMessage() {}

func (x *RspFileStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFileStorageInfo.ProtoReflect.Descriptor instead.
func (*RspFileStorageInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{19}
}

func (x *RspFileStorageInfo) GetVisitCer() string {
	if x != nil {
		return x.VisitCer
	}
	return ""
}

func (x *RspFileStorageInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFileStorageInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFileStorageInfo) GetSliceInfo() []*DownloadSliceInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *RspFileStorageInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspFileStorageInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *RspFileStorageInfo) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspFileStorageInfo) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspFileStorageInfo) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *RspFileStorageInfo) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type ReqDownloadSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceInfo     *SliceOffsetInfo `protobuf:"bytes,1,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
	P2PAddress    string           `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string           `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string           `protobuf:"bytes,4,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	TaskId        string           `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SavePath      string           `protobuf:"bytes,6,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
}

func (x *ReqDownloadSlice) Reset() {
	*x = ReqDownloadSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadSlice) ProtoMessage() {}

func (x *ReqDownloadSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadSlice.ProtoReflect.Descriptor instead.
func (*ReqDownloadSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{20}
}

func (x *ReqDownloadSlice) GetSliceInfo() *SliceOffsetInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *ReqDownloadSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDownloadSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDownloadSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqDownloadSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqDownloadSlice) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

type RspDownloadSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceInfo     *SliceOffsetInfo `protobuf:"bytes,1,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
	FileCrc       uint32           `protobuf:"varint,2,opt,name=file_crc,json=fileCrc,proto3" json:"file_crc,omitempty"`
	FileHash      string           `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Data          []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	P2PAddress    string           `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string           `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	TaskId        string           `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SliceSize     uint64           `protobuf:"varint,8,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	NeedReport    bool             `protobuf:"varint,9,opt,name=needReport,proto3" json:"needReport,omitempty"` // used for passagePP whether the last slice
	SavePath      string           `protobuf:"bytes,10,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	Result        *Result          `protobuf:"bytes,11,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDownloadSlice) Reset() {
	*x = RspDownloadSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDownloadSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDownloadSlice) ProtoMessage() {}

func (x *RspDownloadSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDownloadSlice.ProtoReflect.Descriptor instead.
func (*RspDownloadSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{21}
}

func (x *RspDownloadSlice) GetSliceInfo() *SliceOffsetInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *RspDownloadSlice) GetFileCrc() uint32 {
	if x != nil {
		return x.FileCrc
	}
	return 0
}

func (x *RspDownloadSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspDownloadSlice) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RspDownloadSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDownloadSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDownloadSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspDownloadSlice) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspDownloadSlice) GetNeedReport() bool {
	if x != nil {
		return x.NeedReport
	}
	return false
}

func (x *RspDownloadSlice) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *RspDownloadSlice) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqDownloadSliceWrong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string            `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string            `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	TaskId        string            `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SliceHash     string            `protobuf:"bytes,4,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	Type          DownloadWrongType `protobuf:"varint,5,opt,name=type,proto3,enum=protos.DownloadWrongType" json:"type,omitempty"`
	SavePath      string            `protobuf:"bytes,6,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
}

func (x *ReqDownloadSliceWrong) Reset() {
	*x = ReqDownloadSliceWrong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadSliceWrong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadSliceWrong) ProtoMessage() {}

func (x *ReqDownloadSliceWrong) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadSliceWrong.ProtoReflect.Descriptor instead.
func (*ReqDownloadSliceWrong) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{22}
}

func (x *ReqDownloadSliceWrong) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDownloadSliceWrong) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDownloadSliceWrong) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqDownloadSliceWrong) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *ReqDownloadSliceWrong) GetType() DownloadWrongType {
	if x != nil {
		return x.Type
	}
	return DownloadWrongType_LOSESLICE
}

func (x *ReqDownloadSliceWrong) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

type RspDownloadSliceWrong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string             `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string             `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string             `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	TaskId        string             `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NewSliceInfo  *DownloadSliceInfo `protobuf:"bytes,5,opt,name=new_slice_info,json=newSliceInfo,proto3" json:"new_slice_info,omitempty"`
	SavePath      string             `protobuf:"bytes,6,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	Result        *Result            `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDownloadSliceWrong) Reset() {
	*x = RspDownloadSliceWrong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDownloadSliceWrong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDownloadSliceWrong) ProtoMessage() {}

func (x *RspDownloadSliceWrong) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDownloadSliceWrong.ProtoReflect.Descriptor instead.
func (*RspDownloadSliceWrong) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{23}
}

func (x *RspDownloadSliceWrong) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDownloadSliceWrong) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDownloadSliceWrong) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspDownloadSliceWrong) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspDownloadSliceWrong) GetNewSliceInfo() *DownloadSliceInfo {
	if x != nil {
		return x.NewSliceInfo
	}
	return nil
}

func (x *RspDownloadSliceWrong) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *RspDownloadSliceWrong) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqDownloadSlicePause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqDownloadSlicePause) Reset() {
	*x = ReqDownloadSlicePause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadSlicePause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadSlicePause) ProtoMessage() {}

func (x *ReqDownloadSlicePause) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadSlicePause.ProtoReflect.Descriptor instead.
func (*ReqDownloadSlicePause) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{24}
}

func (x *ReqDownloadSlicePause) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDownloadSlicePause) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDownloadSlicePause) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqDownloadSlicePause) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspDownloadSlicePause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string  `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ReqId         string  `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDownloadSlicePause) Reset() {
	*x = RspDownloadSlicePause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDownloadSlicePause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDownloadSlicePause) ProtoMessage() {}

func (x *RspDownloadSlicePause) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDownloadSlicePause.ProtoReflect.Descriptor instead.
func (*RspDownloadSlicePause) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{25}
}

func (x *RspDownloadSlicePause) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDownloadSlicePause) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDownloadSlicePause) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspDownloadSlicePause) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspDownloadSlicePause) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqReportDownloadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPP                    bool               `protobuf:"varint,1,opt,name=isPP,proto3" json:"isPP,omitempty"` // p doesn't need DownloadSliceInfo
	SliceInfo               *DownloadSliceInfo `protobuf:"bytes,2,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
	FileHash                string             `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	DownloaderP2PAddress    string             `protobuf:"bytes,4,opt,name=downloader_p2p_address,json=downloaderP2pAddress,proto3" json:"downloader_p2p_address,omitempty"`
	DownloaderWalletAddress string             `protobuf:"bytes,5,opt,name=downloader_wallet_address,json=downloaderWalletAddress,proto3" json:"downloader_wallet_address,omitempty"`
	MyP2PAddress            string             `protobuf:"bytes,6,opt,name=my_p2p_address,json=myP2pAddress,proto3" json:"my_p2p_address,omitempty"`          // PP's P2P key address
	MyWalletAddress         string             `protobuf:"bytes,7,opt,name=my_wallet_address,json=myWalletAddress,proto3" json:"my_wallet_address,omitempty"` // PP's wallet address
	Sign                    []byte             `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId                  string             `protobuf:"bytes,9,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *ReqReportDownloadResult) Reset() {
	*x = ReqReportDownloadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReportDownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReportDownloadResult) ProtoMessage() {}

func (x *ReqReportDownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReportDownloadResult.ProtoReflect.Descriptor instead.
func (*ReqReportDownloadResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{26}
}

func (x *ReqReportDownloadResult) GetIsPP() bool {
	if x != nil {
		return x.IsPP
	}
	return false
}

func (x *ReqReportDownloadResult) GetSliceInfo() *DownloadSliceInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *ReqReportDownloadResult) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqReportDownloadResult) GetDownloaderP2PAddress() string {
	if x != nil {
		return x.DownloaderP2PAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetDownloaderWalletAddress() string {
	if x != nil {
		return x.DownloaderWalletAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetMyP2PAddress() string {
	if x != nil {
		return x.MyP2PAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetMyWalletAddress() string {
	if x != nil {
		return x.MyWalletAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *ReqReportDownloadResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type RspReportDownloadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *Result            `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	SliceInfo *DownloadSliceInfo `protobuf:"bytes,2,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
}

func (x *RspReportDownloadResult) Reset() {
	*x = RspReportDownloadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReportDownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReportDownloadResult) ProtoMessage() {}

func (x *RspReportDownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReportDownloadResult.ProtoReflect.Descriptor instead.
func (*RspReportDownloadResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{27}
}

func (x *RspReportDownloadResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspReportDownloadResult) GetSliceInfo() *DownloadSliceInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

type ReqReportTaskBP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId   string      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reporter *PPBaseInfo `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Traffic  uint64      `protobuf:"varint,3,opt,name=traffic,proto3" json:"traffic,omitempty"`
}

func (x *ReqReportTaskBP) Reset() {
	*x = ReqReportTaskBP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReportTaskBP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReportTaskBP) ProtoMessage() {}

func (x *ReqReportTaskBP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReportTaskBP.ProtoReflect.Descriptor instead.
func (*ReqReportTaskBP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{28}
}

func (x *ReqReportTaskBP) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqReportTaskBP) GetReporter() *PPBaseInfo {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *ReqReportTaskBP) GetTraffic() uint64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

type ReqRegisterNewPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	DiskSize      uint64 `protobuf:"varint,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	MemorySize    uint64 `protobuf:"varint,4,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	OsAndVer      string `protobuf:"bytes,5,opt,name=os_and_ver,json=osAndVer,proto3" json:"os_and_ver,omitempty"`
	CpuInfo       string `protobuf:"bytes,6,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	MacAddress    string `protobuf:"bytes,7,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Version       uint32 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	PubKey        []byte `protobuf:"bytes,9,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Sign          []byte `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *ReqRegisterNewPP) Reset() {
	*x = ReqRegisterNewPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRegisterNewPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRegisterNewPP) ProtoMessage() {}

func (x *ReqRegisterNewPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRegisterNewPP.ProtoReflect.Descriptor instead.
func (*ReqRegisterNewPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{29}
}

func (x *ReqRegisterNewPP) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqRegisterNewPP) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqRegisterNewPP) GetDiskSize() uint64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *ReqRegisterNewPP) GetMemorySize() uint64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *ReqRegisterNewPP) GetOsAndVer() string {
	if x != nil {
		return x.OsAndVer
	}
	return ""
}

func (x *ReqRegisterNewPP) GetCpuInfo() string {
	if x != nil {
		return x.CpuInfo
	}
	return ""
}

func (x *ReqRegisterNewPP) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReqRegisterNewPP) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReqRegisterNewPP) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ReqRegisterNewPP) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type RspRegisterNewPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspRegisterNewPP) Reset() {
	*x = RspRegisterNewPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRegisterNewPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRegisterNewPP) ProtoMessage() {}

func (x *RspRegisterNewPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRegisterNewPP.ProtoReflect.Descriptor instead.
func (*RspRegisterNewPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{30}
}

func (x *RspRegisterNewPP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx         []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	P2PAddress string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqActivate) Reset() {
	*x = ReqActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqActivate) ProtoMessage() {}

func (x *ReqActivate) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqActivate.ProtoReflect.Descriptor instead.
func (*ReqActivate) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{31}
}

func (x *ReqActivate) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ReqActivate) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ActivationState uint32  `protobuf:"varint,2,opt,name=activation_state,json=activationState,proto3" json:"activation_state,omitempty"`
}

func (x *RspActivate) Reset() {
	*x = RspActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspActivate) ProtoMessage() {}

func (x *RspActivate) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspActivate.ProtoReflect.Descriptor instead.
func (*RspActivate) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{32}
}

func (x *RspActivate) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspActivate) GetActivationState() uint32 {
	if x != nil {
		return x.ActivationState
	}
	return 0
}

type ReqActivated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqActivated) Reset() {
	*x = ReqActivated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqActivated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqActivated) ProtoMessage() {}

func (x *ReqActivated) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqActivated.ProtoReflect.Descriptor instead.
func (*ReqActivated) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{33}
}

func (x *ReqActivated) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspActivated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspActivated) Reset() {
	*x = RspActivated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspActivated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspActivated) ProtoMessage() {}

func (x *RspActivated) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspActivated.ProtoReflect.Descriptor instead.
func (*RspActivated) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{34}
}

func (x *RspActivated) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqDeactivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx         []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	P2PAddress string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqDeactivate) Reset() {
	*x = ReqDeactivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeactivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeactivate) ProtoMessage() {}

func (x *ReqDeactivate) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeactivate.ProtoReflect.Descriptor instead.
func (*ReqDeactivate) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{35}
}

func (x *ReqDeactivate) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ReqDeactivate) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspDeactivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ActivationState uint32  `protobuf:"varint,2,opt,name=activation_state,json=activationState,proto3" json:"activation_state,omitempty"`
}

func (x *RspDeactivate) Reset() {
	*x = RspDeactivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeactivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeactivate) ProtoMessage() {}

func (x *RspDeactivate) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeactivate.ProtoReflect.Descriptor instead.
func (*RspDeactivate) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{36}
}

func (x *RspDeactivate) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspDeactivate) GetActivationState() uint32 {
	if x != nil {
		return x.ActivationState
	}
	return 0
}

type ReqDeactivated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqDeactivated) Reset() {
	*x = ReqDeactivated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeactivated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeactivated) ProtoMessage() {}

func (x *ReqDeactivated) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeactivated.ProtoReflect.Descriptor instead.
func (*ReqDeactivated) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{37}
}

func (x *ReqDeactivated) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspDeactivated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDeactivated) Reset() {
	*x = RspDeactivated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeactivated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeactivated) ProtoMessage() {}

func (x *RspDeactivated) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeactivated.ProtoReflect.Descriptor instead.
func (*RspDeactivated) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{38}
}

func (x *RspDeactivated) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqPrepay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx            []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ReqPrepay) Reset() {
	*x = ReqPrepay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPrepay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPrepay) ProtoMessage() {}

func (x *ReqPrepay) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPrepay.ProtoReflect.Descriptor instead.
func (*ReqPrepay) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{39}
}

func (x *ReqPrepay) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ReqPrepay) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqPrepay) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspPrepay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspPrepay) Reset() {
	*x = RspPrepay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPrepay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPrepay) ProtoMessage() {}

func (x *RspPrepay) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPrepay.ProtoReflect.Descriptor instead.
func (*RspPrepay) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{40}
}

func (x *RspPrepay) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqPrepaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	PurchasedUoz  uint64 `protobuf:"varint,2,opt,name=purchased_uoz,json=purchasedUoz,proto3" json:"purchased_uoz,omitempty"`
}

func (x *ReqPrepaid) Reset() {
	*x = ReqPrepaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPrepaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPrepaid) ProtoMessage() {}

func (x *ReqPrepaid) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPrepaid.ProtoReflect.Descriptor instead.
func (*ReqPrepaid) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{41}
}

func (x *ReqPrepaid) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqPrepaid) GetPurchasedUoz() uint64 {
	if x != nil {
		return x.PurchasedUoz
	}
	return 0
}

type RspPrepaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspPrepaid) Reset() {
	*x = RspPrepaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPrepaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPrepaid) ProtoMessage() {}

func (x *RspPrepaid) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPrepaid.ProtoReflect.Descriptor instead.
func (*RspPrepaid) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{42}
}

func (x *RspPrepaid) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqDeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Sign          []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
	ReqId         string `protobuf:"bytes,5,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqDeleteFile) Reset() {
	*x = ReqDeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteFile) ProtoMessage() {}

func (x *ReqDeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteFile.ProtoReflect.Descriptor instead.
func (*ReqDeleteFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{43}
}

func (x *ReqDeleteFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDeleteFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDeleteFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqDeleteFile) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *ReqDeleteFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspDeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string  `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	ReqId         string  `protobuf:"bytes,5,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *RspDeleteFile) Reset() {
	*x = RspDeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteFile) ProtoMessage() {}

func (x *RspDeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteFile.ProtoReflect.Descriptor instead.
func (*RspDeleteFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{44}
}

func (x *RspDeleteFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDeleteFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDeleteFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspDeleteFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspDeleteFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// file transfer
// SP notify new PP to get file from storing PP，slice info are included
// new pp transfer to old pp, slice infos are not included,
type ReqTransferNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceStorageInfo *SliceStorageInfo `protobuf:"bytes,1,opt,name=slice_storage_info,json=sliceStorageInfo,proto3" json:"slice_storage_info,omitempty"`
	TransferCer      string            `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
	FromSp           bool              `protobuf:"varint,3,opt,name=from_sp,json=fromSp,proto3" json:"from_sp,omitempty"`
	StoragePpInfo    *PPBaseInfo       `protobuf:"bytes,4,opt,name=storage_pp_info,json=storagePpInfo,proto3" json:"storage_pp_info,omitempty"`
}

func (x *ReqTransferNotice) Reset() {
	*x = ReqTransferNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTransferNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTransferNotice) ProtoMessage() {}

func (x *ReqTransferNotice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTransferNotice.ProtoReflect.Descriptor instead.
func (*ReqTransferNotice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{45}
}

func (x *ReqTransferNotice) GetSliceStorageInfo() *SliceStorageInfo {
	if x != nil {
		return x.SliceStorageInfo
	}
	return nil
}

func (x *ReqTransferNotice) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

func (x *ReqTransferNotice) GetFromSp() bool {
	if x != nil {
		return x.FromSp
	}
	return false
}

func (x *ReqTransferNotice) GetStoragePpInfo() *PPBaseInfo {
	if x != nil {
		return x.StoragePpInfo
	}
	return nil
}

type RspTransferNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        *Result     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	TransferCer   string      `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
	StoragePpInfo *PPBaseInfo `protobuf:"bytes,3,opt,name=storage_pp_info,json=storagePpInfo,proto3" json:"storage_pp_info,omitempty"`
}

func (x *RspTransferNotice) Reset() {
	*x = RspTransferNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransferNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransferNotice) ProtoMessage() {}

func (x *RspTransferNotice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransferNotice.ProtoReflect.Descriptor instead.
func (*RspTransferNotice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{46}
}

func (x *RspTransferNotice) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspTransferNotice) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

func (x *RspTransferNotice) GetStoragePpInfo() *PPBaseInfo {
	if x != nil {
		return x.StoragePpInfo
	}
	return nil
}

//  storagePP-SP
type ReqValidateTransferCer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferCer string      `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
	NewPp       *PPBaseInfo `protobuf:"bytes,2,opt,name=new_pp,json=newPp,proto3" json:"new_pp,omitempty"`
	OriginalPp  *PPBaseInfo `protobuf:"bytes,3,opt,name=original_pp,json=originalPp,proto3" json:"original_pp,omitempty"`
}

func (x *ReqValidateTransferCer) Reset() {
	*x = ReqValidateTransferCer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqValidateTransferCer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqValidateTransferCer) ProtoMessage() {}

func (x *ReqValidateTransferCer) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqValidateTransferCer.ProtoReflect.Descriptor instead.
func (*ReqValidateTransferCer) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{47}
}

func (x *ReqValidateTransferCer) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

func (x *ReqValidateTransferCer) GetNewPp() *PPBaseInfo {
	if x != nil {
		return x.NewPp
	}
	return nil
}

func (x *ReqValidateTransferCer) GetOriginalPp() *PPBaseInfo {
	if x != nil {
		return x.OriginalPp
	}
	return nil
}

//  SP-PP PP-PP
type RspValidateTransferCer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	TransferCer string  `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
}

func (x *RspValidateTransferCer) Reset() {
	*x = RspValidateTransferCer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspValidateTransferCer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspValidateTransferCer) ProtoMessage() {}

func (x *RspValidateTransferCer) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspValidateTransferCer.ProtoReflect.Descriptor instead.
func (*RspValidateTransferCer) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{48}
}

func (x *RspValidateTransferCer) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspValidateTransferCer) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

type ReqTransferDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferCer string `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
}

func (x *ReqTransferDownload) Reset() {
	*x = ReqTransferDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTransferDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTransferDownload) ProtoMessage() {}

func (x *ReqTransferDownload) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTransferDownload.ProtoReflect.Descriptor instead.
func (*ReqTransferDownload) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{49}
}

func (x *ReqTransferDownload) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

type RspTransferDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferCer string  `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
	Data        []byte  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Offset      uint64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	SliceSize   uint64  `protobuf:"varint,4,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	Result      *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspTransferDownload) Reset() {
	*x = RspTransferDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransferDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransferDownload) ProtoMessage() {}

func (x *RspTransferDownload) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransferDownload.ProtoReflect.Descriptor instead.
func (*RspTransferDownload) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{50}
}

func (x *RspTransferDownload) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

func (x *RspTransferDownload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RspTransferDownload) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RspTransferDownload) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspTransferDownload) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type RspTransferDownloadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferCer string  `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
	Result      *Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspTransferDownloadResult) Reset() {
	*x = RspTransferDownloadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransferDownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransferDownloadResult) ProtoMessage() {}

func (x *RspTransferDownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransferDownloadResult.ProtoReflect.Descriptor instead.
func (*RspTransferDownloadResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{51}
}

func (x *RspTransferDownloadResult) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

func (x *RspTransferDownloadResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqReportTransferResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferCer string      `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
	NewPp       *PPBaseInfo `protobuf:"bytes,2,opt,name=new_pp,json=newPp,proto3" json:"new_pp,omitempty"`
	Result      *Result     `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	IsNew       bool        `protobuf:"varint,4,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (x *ReqReportTransferResult) Reset() {
	*x = ReqReportTransferResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReportTransferResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReportTransferResult) ProtoMessage() {}

func (x *ReqReportTransferResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReportTransferResult.ProtoReflect.Descriptor instead.
func (*ReqReportTransferResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{52}
}

func (x *ReqReportTransferResult) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

func (x *ReqReportTransferResult) GetNewPp() *PPBaseInfo {
	if x != nil {
		return x.NewPp
	}
	return nil
}

func (x *ReqReportTransferResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReqReportTransferResult) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type RspReportTransferResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	TransferCer string  `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer,proto3" json:"transfer_cer,omitempty"`
}

func (x *RspReportTransferResult) Reset() {
	*x = RspReportTransferResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReportTransferResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReportTransferResult) ProtoMessage() {}

func (x *RspReportTransferResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReportTransferResult.ProtoReflect.Descriptor instead.
func (*RspReportTransferResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{53}
}

func (x *RspReportTransferResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspReportTransferResult) GetTransferCer() string {
	if x != nil {
		return x.TransferCer
	}
	return ""
}

// sp - pp get storage info
type ReqGetHDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ReqGetHDInfo) Reset() {
	*x = ReqGetHDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetHDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetHDInfo) ProtoMessage() {}

func (x *ReqGetHDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetHDInfo.ProtoReflect.Descriptor instead.
func (*ReqGetHDInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{54}
}

func (x *ReqGetHDInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqGetHDInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspGetHDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskSize      uint64 `protobuf:"varint,1,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	DiskFree      uint64 `protobuf:"varint,2,opt,name=disk_free,json=diskFree,proto3" json:"disk_free,omitempty"`
	P2PAddress    string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *RspGetHDInfo) Reset() {
	*x = RspGetHDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetHDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetHDInfo) ProtoMessage() {}

func (x *RspGetHDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetHDInfo.ProtoReflect.Descriptor instead.
func (*RspGetHDInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{55}
}

func (x *RspGetHDInfo) GetDiskSize() uint64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *RspGetHDInfo) GetDiskFree() uint64 {
	if x != nil {
		return x.DiskFree
	}
	return 0
}

func (x *RspGetHDInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspGetHDInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

//
type ReqSendChatMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Message       string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Type          MsgType `protobuf:"varint,3,opt,name=type,proto3,enum=protos.MsgType" json:"type,omitempty"`
}

func (x *ReqSendChatMessages) Reset() {
	*x = ReqSendChatMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendChatMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendChatMessages) ProtoMessage() {}

func (x *ReqSendChatMessages) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendChatMessages.ProtoReflect.Descriptor instead.
func (*ReqSendChatMessages) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{56}
}

func (x *ReqSendChatMessages) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqSendChatMessages) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReqSendChatMessages) GetType() MsgType {
	if x != nil {
		return x.Type
	}
	return MsgType_DEFAULT
}

type RspSendChatMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspSendChatMessages) Reset() {
	*x = RspSendChatMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSendChatMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSendChatMessages) ProtoMessage() {}

func (x *RspSendChatMessages) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSendChatMessages.ProtoReflect.Descriptor instead.
func (*RspSendChatMessages) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{57}
}

func (x *RspSendChatMessages) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// sp
type ReqDeleteSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	SliceHash  string `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"` //
}

func (x *ReqDeleteSlice) Reset() {
	*x = ReqDeleteSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteSlice) ProtoMessage() {}

func (x *ReqDeleteSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteSlice.ProtoReflect.Descriptor instead.
func (*ReqDeleteSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{58}
}

func (x *ReqDeleteSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDeleteSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

type RspDeleteSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	SliceHash  string  `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	Result     *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDeleteSlice) Reset() {
	*x = RspDeleteSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteSlice) ProtoMessage() {}

func (x *RspDeleteSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteSlice.ProtoReflect.Descriptor instead.
func (*RspDeleteSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{59}
}

func (x *RspDeleteSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDeleteSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *RspDeleteSlice) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

//
type ReqMakeDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Directory     string `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqMakeDirectory) Reset() {
	*x = ReqMakeDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMakeDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMakeDirectory) ProtoMessage() {}

func (x *ReqMakeDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMakeDirectory.ProtoReflect.Descriptor instead.
func (*ReqMakeDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{60}
}

func (x *ReqMakeDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqMakeDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqMakeDirectory) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ReqMakeDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspMakeDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspMakeDirectory) Reset() {
	*x = RspMakeDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspMakeDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspMakeDirectory) ProtoMessage() {}

func (x *RspMakeDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspMakeDirectory.ProtoReflect.Descriptor instead.
func (*RspMakeDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{61}
}

func (x *RspMakeDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspMakeDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspMakeDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspMakeDirectory) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqRemoveDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Directory     string `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqRemoveDirectory) Reset() {
	*x = ReqRemoveDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRemoveDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRemoveDirectory) ProtoMessage() {}

func (x *ReqRemoveDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRemoveDirectory.ProtoReflect.Descriptor instead.
func (*ReqRemoveDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{62}
}

func (x *ReqRemoveDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqRemoveDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqRemoveDirectory) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ReqRemoveDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspRemoveDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspRemoveDirectory) Reset() {
	*x = RspRemoveDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRemoveDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRemoveDirectory) ProtoMessage() {}

func (x *RspRemoveDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRemoveDirectory.ProtoReflect.Descriptor instead.
func (*RspRemoveDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{63}
}

func (x *RspRemoveDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspRemoveDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspRemoveDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspRemoveDirectory) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqMoveFileDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress        string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress     string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId             string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	DirectoryTarget   string `protobuf:"bytes,4,opt,name=directory_target,json=directoryTarget,proto3" json:"directory_target,omitempty"`
	DirectoryOriginal string `protobuf:"bytes,5,opt,name=directory_original,json=directoryOriginal,proto3" json:"directory_original,omitempty"`
	FileHash          string `protobuf:"bytes,6,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *ReqMoveFileDirectory) Reset() {
	*x = ReqMoveFileDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMoveFileDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMoveFileDirectory) ProtoMessage() {}

func (x *ReqMoveFileDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMoveFileDirectory.ProtoReflect.Descriptor instead.
func (*ReqMoveFileDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{64}
}

func (x *ReqMoveFileDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqMoveFileDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqMoveFileDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqMoveFileDirectory) GetDirectoryTarget() string {
	if x != nil {
		return x.DirectoryTarget
	}
	return ""
}

func (x *ReqMoveFileDirectory) GetDirectoryOriginal() string {
	if x != nil {
		return x.DirectoryOriginal
	}
	return ""
}

func (x *ReqMoveFileDirectory) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

type RspMoveFileDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	FilePath      string  `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspMoveFileDirectory) Reset() {
	*x = RspMoveFileDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspMoveFileDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspMoveFileDirectory) ProtoMessage() {}

func (x *RspMoveFileDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspMoveFileDirectory.ProtoReflect.Descriptor instead.
func (*RspMoveFileDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{65}
}

func (x *RspMoveFileDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspMoveFileDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspMoveFileDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspMoveFileDirectory) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *RspMoveFileDirectory) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqBLSPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBLSPublicKey) Reset() {
	*x = ReqBLSPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBLSPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBLSPublicKey) ProtoMessage() {}

func (x *ReqBLSPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBLSPublicKey.ProtoReflect.Descriptor instead.
func (*ReqBLSPublicKey) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{66}
}

func (x *ReqBLSPublicKey) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReqBLSPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// get bp BLS public key
type RspBPBLSPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpInfo *ReqRegister `protobuf:"bytes,1,opt,name=bp_info,json=bpInfo,proto3" json:"bp_info,omitempty"`
	Code   int64        `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id     string       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBPBLSPublicKey) Reset() {
	*x = RspBPBLSPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBPBLSPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBPBLSPublicKey) ProtoMessage() {}

func (x *RspBPBLSPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBPBLSPublicKey.ProtoReflect.Descriptor instead.
func (*RspBPBLSPublicKey) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{67}
}

func (x *RspBPBLSPublicKey) GetBpInfo() *ReqRegister {
	if x != nil {
		return x.BpInfo
	}
	return nil
}

func (x *RspBPBLSPublicKey) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBPBLSPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBalance) Reset() {
	*x = ReqBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBalance) ProtoMessage() {}

func (x *ReqBalance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBalance.ProtoReflect.Descriptor instead.
func (*ReqBalance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{68}
}

func (x *ReqBalance) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqBalance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance float32 `protobuf:"fixed32,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Code    int64   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id      string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBalance) Reset() {
	*x = RspBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBalance) ProtoMessage() {}

func (x *RspBalance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBalance.ProtoReflect.Descriptor instead.
func (*RspBalance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{69}
}

func (x *RspBalance) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RspBalance) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBalance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Code            int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id              string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqTransaction) Reset() {
	*x = ReqTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTransaction) ProtoMessage() {}

func (x *ReqTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTransaction.ProtoReflect.Descriptor instead.
func (*ReqTransaction) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{70}
}

func (x *ReqTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *ReqTransaction) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReqTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rest string `protobuf:"bytes,1,opt,name=rest,proto3" json:"rest,omitempty"`
	Code int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspTransaction) Reset() {
	*x = RspTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransaction) ProtoMessage() {}

func (x *RspTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransaction.ProtoReflect.Descriptor instead.
func (*RspTransaction) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{71}
}

func (x *RspTransaction) GetRest() string {
	if x != nil {
		return x.Rest
	}
	return ""
}

func (x *RspTransaction) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBlockInfo) Reset() {
	*x = ReqBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockInfo) ProtoMessage() {}

func (x *ReqBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockInfo.ProtoReflect.Descriptor instead.
func (*ReqBlockInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{72}
}

func (x *ReqBlockInfo) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ReqBlockInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockInfo []byte `protobuf:"bytes,1,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	Code      int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBlockInfo) Reset() {
	*x = RspBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBlockInfo) ProtoMessage() {}

func (x *RspBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBlockInfo.ProtoReflect.Descriptor instead.
func (*RspBlockInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{73}
}

func (x *RspBlockInfo) GetBlockInfo() []byte {
	if x != nil {
		return x.BlockInfo
	}
	return nil
}

func (x *RspBlockInfo) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBlockInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqBlockCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBlockCheck) Reset() {
	*x = ReqBlockCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockCheck) ProtoMessage() {}

func (x *ReqBlockCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockCheck.ProtoReflect.Descriptor instead.
func (*ReqBlockCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{74}
}

func (x *ReqBlockCheck) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ReqBlockCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspBlockCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockList []*BlockCheckInfo `protobuf:"bytes,1,rep,name=block_list,json=blockList,proto3" json:"block_list,omitempty"`
	Code      int64             `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id        string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBlockCheck) Reset() {
	*x = RspBlockCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBlockCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBlockCheck) ProtoMessage() {}

func (x *RspBlockCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBlockCheck.ProtoReflect.Descriptor instead.
func (*RspBlockCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{75}
}

func (x *RspBlockCheck) GetBlockList() []*BlockCheckInfo {
	if x != nil {
		return x.BlockList
	}
	return nil
}

func (x *RspBlockCheck) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBlockCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BlockCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash   string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlockCheckInfo) Reset() {
	*x = BlockCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCheckInfo) ProtoMessage() {}

func (x *BlockCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCheckInfo.ProtoReflect.Descriptor instead.
func (*BlockCheckInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{76}
}

func (x *BlockCheckInfo) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockCheckInfo) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockCheckInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//
type ReqDownloadTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqDownloadTaskInfo) Reset() {
	*x = ReqDownloadTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadTaskInfo) ProtoMessage() {}

func (x *ReqDownloadTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadTaskInfo.ProtoReflect.Descriptor instead.
func (*ReqDownloadTaskInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{77}
}

func (x *ReqDownloadTaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqDownloadTaskInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspDownloadTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId            string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SliceSize         uint64   `protobuf:"varint,2,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	SliceHash         string   `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	SliceNumber       uint64   `protobuf:"varint,4,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	StorageP2PAddress string   `protobuf:"bytes,5,opt,name=storage_p2p_address,json=storageP2pAddress,proto3" json:"storage_p2p_address,omitempty"`
	P2PAddressList    []string `protobuf:"bytes,6,rep,name=p2p_address_list,json=p2pAddressList,proto3" json:"p2p_address_list,omitempty"`
	Time              uint64   `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	Result            *Result  `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	Id                string   `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspDownloadTaskInfo) Reset() {
	*x = RspDownloadTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDownloadTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDownloadTaskInfo) ProtoMessage() {}

func (x *RspDownloadTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDownloadTaskInfo.ProtoReflect.Descriptor instead.
func (*RspDownloadTaskInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{78}
}

func (x *RspDownloadTaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspDownloadTaskInfo) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspDownloadTaskInfo) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *RspDownloadTaskInfo) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *RspDownloadTaskInfo) GetStorageP2PAddress() string {
	if x != nil {
		return x.StorageP2PAddress
	}
	return ""
}

func (x *RspDownloadTaskInfo) GetP2PAddressList() []string {
	if x != nil {
		return x.P2PAddressList
	}
	return nil
}

func (x *RspDownloadTaskInfo) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RspDownloadTaskInfo) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspDownloadTaskInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqShareLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqShareLink) Reset() {
	*x = ReqShareLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShareLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShareLink) ProtoMessage() {}

func (x *ReqShareLink) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShareLink.ProtoReflect.Descriptor instead.
func (*ReqShareLink) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{79}
}

func (x *ReqShareLink) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqShareLink) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqShareLink) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspShareLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareInfo     []*ShareLinkInfo `protobuf:"bytes,1,rep,name=share_info,json=shareInfo,proto3" json:"share_info,omitempty"`
	ReqId         string           `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	P2PAddress    string           `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string           `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	Result        *Result          `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspShareLink) Reset() {
	*x = RspShareLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShareLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShareLink) ProtoMessage() {}

func (x *RspShareLink) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShareLink.ProtoReflect.Descriptor instead.
func (*RspShareLink) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{80}
}

func (x *RspShareLink) GetShareInfo() []*ShareLinkInfo {
	if x != nil {
		return x.ShareInfo
	}
	return nil
}

func (x *RspShareLink) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspShareLink) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspShareLink) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspShareLink) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash      string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	IsPrivate     bool   `protobuf:"varint,2,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ShareTime     int64  `protobuf:"varint,3,opt,name=share_time,json=shareTime,proto3" json:"share_time,omitempty"`
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	P2PAddress    string `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	PathHash      string `protobuf:"bytes,7,opt,name=path_hash,json=pathHash,proto3" json:"path_hash,omitempty"` // share whole directory if this field is non-empty
}

func (x *ReqShareFile) Reset() {
	*x = ReqShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShareFile) ProtoMessage() {}

func (x *ReqShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShareFile.ProtoReflect.Descriptor instead.
func (*ReqShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{81}
}

func (x *ReqShareFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqShareFile) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ReqShareFile) GetShareTime() int64 {
	if x != nil {
		return x.ShareTime
	}
	return 0
}

func (x *ReqShareFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqShareFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqShareFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqShareFile) GetPathHash() string {
	if x != nil {
		return x.PathHash
	}
	return ""
}

type RspShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareLink     string  `protobuf:"bytes,1,opt,name=share_link,json=shareLink,proto3" json:"share_link,omitempty"`
	SharePassword string  `protobuf:"bytes,2,opt,name=share_password,json=sharePassword,proto3" json:"share_password,omitempty"`
	P2PAddress    string  `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ShareId       string  `protobuf:"bytes,5,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	ReqId         string  `protobuf:"bytes,6,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspShareFile) Reset() {
	*x = RspShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShareFile) ProtoMessage() {}

func (x *RspShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShareFile.ProtoReflect.Descriptor instead.
func (*RspShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{82}
}

func (x *RspShareFile) GetShareLink() string {
	if x != nil {
		return x.ShareLink
	}
	return ""
}

func (x *RspShareFile) GetSharePassword() string {
	if x != nil {
		return x.SharePassword
	}
	return ""
}

func (x *RspShareFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspShareFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspShareFile) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *RspShareFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspShareFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqDeleteShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId       string `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqDeleteShare) Reset() {
	*x = ReqDeleteShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteShare) ProtoMessage() {}

func (x *ReqDeleteShare) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteShare.ProtoReflect.Descriptor instead.
func (*ReqDeleteShare) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{83}
}

func (x *ReqDeleteShare) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *ReqDeleteShare) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDeleteShare) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDeleteShare) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspDeleteShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId       string  `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	P2PAddress    string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string  `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDeleteShare) Reset() {
	*x = RspDeleteShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteShare) ProtoMessage() {}

func (x *RspDeleteShare) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteShare.ProtoReflect.Descriptor instead.
func (*RspDeleteShare) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{84}
}

func (x *RspDeleteShare) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *RspDeleteShare) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDeleteShare) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDeleteShare) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspDeleteShare) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqGetShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword       string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"` //
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	SharePassword string `protobuf:"bytes,5,opt,name=share_password,json=sharePassword,proto3" json:"share_password,omitempty"` //
}

func (x *ReqGetShareFile) Reset() {
	*x = ReqGetShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetShareFile) ProtoMessage() {}

func (x *ReqGetShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetShareFile.ProtoReflect.Descriptor instead.
func (*ReqGetShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{85}
}

func (x *ReqGetShareFile) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ReqGetShareFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqGetShareFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqGetShareFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqGetShareFile) GetSharePassword() string {
	if x != nil {
		return x.SharePassword
	}
	return ""
}

type RspGetShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string      `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string      `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result     `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"` // if failed, wrong share password
	IsPrivate     bool        `protobuf:"varint,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	FileInfo      []*FileInfo `protobuf:"bytes,6,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
}

func (x *RspGetShareFile) Reset() {
	*x = RspGetShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetShareFile) ProtoMessage() {}

func (x *RspGetShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetShareFile.ProtoReflect.Descriptor instead.
func (*RspGetShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{86}
}

func (x *RspGetShareFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspGetShareFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspGetShareFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspGetShareFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspGetShareFile) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *RspGetShareFile) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

//
type ReqSaveFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash               string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FileOwnerWalletAddress string `protobuf:"bytes,2,opt,name=file_owner_wallet_address,json=fileOwnerWalletAddress,proto3" json:"file_owner_wallet_address,omitempty"` //
	P2PAddress             string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress          string `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId                  string `protobuf:"bytes,5,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqSaveFile) Reset() {
	*x = ReqSaveFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSaveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSaveFile) ProtoMessage() {}

func (x *ReqSaveFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSaveFile.ProtoReflect.Descriptor instead.
func (*ReqSaveFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{87}
}

func (x *ReqSaveFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqSaveFile) GetFileOwnerWalletAddress() string {
	if x != nil {
		return x.FileOwnerWalletAddress
	}
	return ""
}

func (x *ReqSaveFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqSaveFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqSaveFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspSaveFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath      string  `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	P2PAddress    string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string  `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	FileHash      string  `protobuf:"bytes,6,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *RspSaveFile) Reset() {
	*x = RspSaveFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSaveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSaveFile) ProtoMessage() {}

func (x *RspSaveFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSaveFile.ProtoReflect.Descriptor instead.
func (*RspSaveFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{88}
}

func (x *RspSaveFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *RspSaveFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspSaveFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspSaveFile) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspSaveFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspSaveFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

//
type ReqSaveFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderHash               string `protobuf:"bytes,1,opt,name=folder_hash,json=folderHash,proto3" json:"folder_hash,omitempty"`
	FolderOwnerWalletAddress string `protobuf:"bytes,2,opt,name=folder_owner_wallet_address,json=folderOwnerWalletAddress,proto3" json:"folder_owner_wallet_address,omitempty"` //
	P2PAddress               string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress            string `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId                    string `protobuf:"bytes,5,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqSaveFolder) Reset() {
	*x = ReqSaveFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSaveFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSaveFolder) ProtoMessage() {}

func (x *ReqSaveFolder) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSaveFolder.ProtoReflect.Descriptor instead.
func (*ReqSaveFolder) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{89}
}

func (x *ReqSaveFolder) GetFolderHash() string {
	if x != nil {
		return x.FolderHash
	}
	return ""
}

func (x *ReqSaveFolder) GetFolderOwnerWalletAddress() string {
	if x != nil {
		return x.FolderOwnerWalletAddress
	}
	return ""
}

func (x *ReqSaveFolder) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqSaveFolder) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqSaveFolder) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspSaveFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderPath    string  `protobuf:"bytes,1,opt,name=folder_path,json=folderPath,proto3" json:"folder_path,omitempty"`
	P2PAddress    string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string  `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	FolderHash    string  `protobuf:"bytes,6,opt,name=folder_hash,json=folderHash,proto3" json:"folder_hash,omitempty"`
}

func (x *RspSaveFolder) Reset() {
	*x = RspSaveFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSaveFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSaveFolder) ProtoMessage() {}

func (x *RspSaveFolder) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSaveFolder.ProtoReflect.Descriptor instead.
func (*RspSaveFolder) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{90}
}

func (x *RspSaveFolder) GetFolderPath() string {
	if x != nil {
		return x.FolderPath
	}
	return ""
}

func (x *RspSaveFolder) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspSaveFolder) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspSaveFolder) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspSaveFolder) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspSaveFolder) GetFolderHash() string {
	if x != nil {
		return x.FolderHash
	}
	return ""
}

//
type ReqCreateAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string      `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId          string      `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	FileInfo       []*FileInfo `protobuf:"bytes,4,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	AlbumName      string      `protobuf:"bytes,5,opt,name=album_name,json=albumName,proto3" json:"album_name,omitempty"`
	AlbumBlurb     string      `protobuf:"bytes,6,opt,name=album_blurb,json=albumBlurb,proto3" json:"album_blurb,omitempty"`
	AlbumCoverHash string      `protobuf:"bytes,7,opt,name=album_cover_hash,json=albumCoverHash,proto3" json:"album_cover_hash,omitempty"` // album cover file hash
	AlbumType      AlbumType   `protobuf:"varint,8,opt,name=album_type,json=albumType,proto3,enum=protos.AlbumType" json:"album_type,omitempty"`
	IsPrivate      bool        `protobuf:"varint,9,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (x *ReqCreateAlbum) Reset() {
	*x = ReqCreateAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateAlbum) ProtoMessage() {}

func (x *ReqCreateAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateAlbum.ProtoReflect.Descriptor instead.
func (*ReqCreateAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{91}
}

func (x *ReqCreateAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqCreateAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqCreateAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqCreateAlbum) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *ReqCreateAlbum) GetAlbumName() string {
	if x != nil {
		return x.AlbumName
	}
	return ""
}

func (x *ReqCreateAlbum) GetAlbumBlurb() string {
	if x != nil {
		return x.AlbumBlurb
	}
	return ""
}

func (x *ReqCreateAlbum) GetAlbumCoverHash() string {
	if x != nil {
		return x.AlbumCoverHash
	}
	return ""
}

func (x *ReqCreateAlbum) GetAlbumType() AlbumType {
	if x != nil {
		return x.AlbumType
	}
	return AlbumType_ALL
}

func (x *ReqCreateAlbum) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

type RspCreateAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumId       string  `protobuf:"bytes,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	P2PAddress    string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string  `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspCreateAlbum) Reset() {
	*x = RspCreateAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCreateAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCreateAlbum) ProtoMessage() {}

func (x *RspCreateAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCreateAlbum.ProtoReflect.Descriptor instead.
func (*RspCreateAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{92}
}

func (x *RspCreateAlbum) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *RspCreateAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspCreateAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspCreateAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspCreateAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqEditAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string      `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId          string      `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumId        string      `protobuf:"bytes,4,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	IsPrivate      bool        `protobuf:"varint,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ChangeFiles    []*FileInfo `protobuf:"bytes,6,rep,name=change_files,json=changeFiles,proto3" json:"change_files,omitempty"`            // optional add files
	AlbumCoverHash string      `protobuf:"bytes,7,opt,name=album_cover_hash,json=albumCoverHash,proto3" json:"album_cover_hash,omitempty"` // optinal album cover file hash
	AlbumName      string      `protobuf:"bytes,8,opt,name=album_name,json=albumName,proto3" json:"album_name,omitempty"`                  // optional  album name
	AlbumBlurb     string      `protobuf:"bytes,9,opt,name=album_blurb,json=albumBlurb,proto3" json:"album_blurb,omitempty"`               // optional  album abstract
}

func (x *ReqEditAlbum) Reset() {
	*x = ReqEditAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditAlbum) ProtoMessage() {}

func (x *ReqEditAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditAlbum.ProtoReflect.Descriptor instead.
func (*ReqEditAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{93}
}

func (x *ReqEditAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqEditAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqEditAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqEditAlbum) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *ReqEditAlbum) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ReqEditAlbum) GetChangeFiles() []*FileInfo {
	if x != nil {
		return x.ChangeFiles
	}
	return nil
}

func (x *ReqEditAlbum) GetAlbumCoverHash() string {
	if x != nil {
		return x.AlbumCoverHash
	}
	return ""
}

func (x *ReqEditAlbum) GetAlbumName() string {
	if x != nil {
		return x.AlbumName
	}
	return ""
}

func (x *ReqEditAlbum) GetAlbumBlurb() string {
	if x != nil {
		return x.AlbumBlurb
	}
	return ""
}

type RspEditAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumId       string  `protobuf:"bytes,4,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspEditAlbum) Reset() {
	*x = RspEditAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspEditAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspEditAlbum) ProtoMessage() {}

func (x *RspEditAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspEditAlbum.ProtoReflect.Descriptor instead.
func (*RspEditAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{94}
}

func (x *RspEditAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspEditAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspEditAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspEditAlbum) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *RspEditAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqAlbumContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumId       string `protobuf:"bytes,4,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
}

func (x *ReqAlbumContent) Reset() {
	*x = ReqAlbumContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAlbumContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAlbumContent) ProtoMessage() {}

func (x *ReqAlbumContent) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAlbumContent.ProtoReflect.Descriptor instead.
func (*ReqAlbumContent) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{95}
}

func (x *ReqAlbumContent) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqAlbumContent) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqAlbumContent) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqAlbumContent) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

type RspAlbumContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress         string      `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress      string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`                  //
	OwnerWalletAddress string      `protobuf:"bytes,3,opt,name=owner_wallet_address,json=ownerWalletAddress,proto3" json:"owner_wallet_address,omitempty"` //
	ReqId              string      `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumId            string      `protobuf:"bytes,5,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	AlbumInfo          *AlbumInfo  `protobuf:"bytes,6,opt,name=album_info,json=albumInfo,proto3" json:"album_info,omitempty"` //
	FileInfo           []*FileInfo `protobuf:"bytes,7,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	IsCollection       bool        `protobuf:"varint,8,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
	Result             *Result     `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspAlbumContent) Reset() {
	*x = RspAlbumContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspAlbumContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspAlbumContent) ProtoMessage() {}

func (x *RspAlbumContent) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspAlbumContent.ProtoReflect.Descriptor instead.
func (*RspAlbumContent) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{96}
}

func (x *RspAlbumContent) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspAlbumContent) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspAlbumContent) GetOwnerWalletAddress() string {
	if x != nil {
		return x.OwnerWalletAddress
	}
	return ""
}

func (x *RspAlbumContent) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspAlbumContent) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *RspAlbumContent) GetAlbumInfo() *AlbumInfo {
	if x != nil {
		return x.AlbumInfo
	}
	return nil
}

func (x *RspAlbumContent) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *RspAlbumContent) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

func (x *RspAlbumContent) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqSearchAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumType     AlbumType     `protobuf:"varint,1,opt,name=album_type,json=albumType,proto3,enum=protos.AlbumType" json:"album_type,omitempty"`
	Keyword       string        `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	AlbumSortType AlbumSortType `protobuf:"varint,3,opt,name=AlbumSortType,proto3,enum=protos.AlbumSortType" json:"AlbumSortType,omitempty"`
	P2PAddress    string        `protobuf:"bytes,4,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string        `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string        `protobuf:"bytes,6,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Page          uint64        `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	Number        uint64        `protobuf:"varint,8,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *ReqSearchAlbum) Reset() {
	*x = ReqSearchAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSearchAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSearchAlbum) ProtoMessage() {}

func (x *ReqSearchAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSearchAlbum.ProtoReflect.Descriptor instead.
func (*ReqSearchAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{97}
}

func (x *ReqSearchAlbum) GetAlbumType() AlbumType {
	if x != nil {
		return x.AlbumType
	}
	return AlbumType_ALL
}

func (x *ReqSearchAlbum) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ReqSearchAlbum) GetAlbumSortType() AlbumSortType {
	if x != nil {
		return x.AlbumSortType
	}
	return AlbumSortType_LATEST
}

func (x *ReqSearchAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqSearchAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqSearchAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqSearchAlbum) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqSearchAlbum) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type RspSearchAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string       `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string       `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string       `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumInfo     []*AlbumInfo `protobuf:"bytes,4,rep,name=album_info,json=albumInfo,proto3" json:"album_info,omitempty"` //
	Result        *Result      `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	Page          uint64       `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Total         uint64       `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RspSearchAlbum) Reset() {
	*x = RspSearchAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSearchAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSearchAlbum) ProtoMessage() {}

func (x *RspSearchAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSearchAlbum.ProtoReflect.Descriptor instead.
func (*RspSearchAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{98}
}

func (x *RspSearchAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspSearchAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspSearchAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspSearchAlbum) GetAlbumInfo() []*AlbumInfo {
	if x != nil {
		return x.AlbumInfo
	}
	return nil
}

func (x *RspSearchAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspSearchAlbum) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspSearchAlbum) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ReqFindMyAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string    `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string    `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string    `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumType     AlbumType `protobuf:"varint,4,opt,name=album_type,json=albumType,proto3,enum=protos.AlbumType" json:"album_type,omitempty"`
	Page          uint64    `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Number        uint64    `protobuf:"varint,6,opt,name=number,proto3" json:"number,omitempty"`
	Keyword       string    `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ReqFindMyAlbum) Reset() {
	*x = ReqFindMyAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindMyAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindMyAlbum) ProtoMessage() {}

func (x *ReqFindMyAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindMyAlbum.ProtoReflect.Descriptor instead.
func (*ReqFindMyAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{99}
}

func (x *ReqFindMyAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqFindMyAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqFindMyAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqFindMyAlbum) GetAlbumType() AlbumType {
	if x != nil {
		return x.AlbumType
	}
	return AlbumType_ALL
}

func (x *ReqFindMyAlbum) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqFindMyAlbum) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ReqFindMyAlbum) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type RspFindMyAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string       `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string       `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string       `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumInfo     []*AlbumInfo `protobuf:"bytes,4,rep,name=album_info,json=albumInfo,proto3" json:"album_info,omitempty"`
	Result        *Result      `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	Total         uint64       `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RspFindMyAlbum) Reset() {
	*x = RspFindMyAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFindMyAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFindMyAlbum) ProtoMessage() {}

func (x *RspFindMyAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFindMyAlbum.ProtoReflect.Descriptor instead.
func (*RspFindMyAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{100}
}

func (x *RspFindMyAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFindMyAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFindMyAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspFindMyAlbum) GetAlbumInfo() []*AlbumInfo {
	if x != nil {
		return x.AlbumInfo
	}
	return nil
}

func (x *RspFindMyAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspFindMyAlbum) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ReqCollectionAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumId       string `protobuf:"bytes,4,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	IsCollection  bool   `protobuf:"varint,5,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
}

func (x *ReqCollectionAlbum) Reset() {
	*x = ReqCollectionAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCollectionAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCollectionAlbum) ProtoMessage() {}

func (x *ReqCollectionAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCollectionAlbum.ProtoReflect.Descriptor instead.
func (*ReqCollectionAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{101}
}

func (x *ReqCollectionAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqCollectionAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqCollectionAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqCollectionAlbum) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *ReqCollectionAlbum) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

type RspCollectionAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumId       string  `protobuf:"bytes,4,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	IsCollection  bool    `protobuf:"varint,6,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
}

func (x *RspCollectionAlbum) Reset() {
	*x = RspCollectionAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCollectionAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCollectionAlbum) ProtoMessage() {}

func (x *RspCollectionAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCollectionAlbum.ProtoReflect.Descriptor instead.
func (*RspCollectionAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{102}
}

func (x *RspCollectionAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspCollectionAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspCollectionAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspCollectionAlbum) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *RspCollectionAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspCollectionAlbum) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

type ReqAbstractAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqAbstractAlbum) Reset() {
	*x = ReqAbstractAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAbstractAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAbstractAlbum) ProtoMessage() {}

func (x *ReqAbstractAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAbstractAlbum.ProtoReflect.Descriptor instead.
func (*ReqAbstractAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{103}
}

func (x *ReqAbstractAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqAbstractAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqAbstractAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspAbstractAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress      string       `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress   string       `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId           string       `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	MyAlbum         *AlbumNumber `protobuf:"bytes,4,opt,name=my_album,json=myAlbum,proto3" json:"my_album,omitempty"`
	CollectionAlbum *AlbumNumber `protobuf:"bytes,5,opt,name=collection_album,json=collectionAlbum,proto3" json:"collection_album,omitempty"`
	Result          *Result      `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspAbstractAlbum) Reset() {
	*x = RspAbstractAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspAbstractAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspAbstractAlbum) ProtoMessage() {}

func (x *RspAbstractAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspAbstractAlbum.ProtoReflect.Descriptor instead.
func (*RspAbstractAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{104}
}

func (x *RspAbstractAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspAbstractAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspAbstractAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspAbstractAlbum) GetMyAlbum() *AlbumNumber {
	if x != nil {
		return x.MyAlbum
	}
	return nil
}

func (x *RspAbstractAlbum) GetCollectionAlbum() *AlbumNumber {
	if x != nil {
		return x.CollectionAlbum
	}
	return nil
}

func (x *RspAbstractAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqMyCollectionAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumType     AlbumType `protobuf:"varint,1,opt,name=album_type,json=albumType,proto3,enum=protos.AlbumType" json:"album_type,omitempty"`
	P2PAddress    string    `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string    `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string    `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Page          uint64    `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Number        uint64    `protobuf:"varint,6,opt,name=number,proto3" json:"number,omitempty"`
	Keyword       string    `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ReqMyCollectionAlbum) Reset() {
	*x = ReqMyCollectionAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMyCollectionAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMyCollectionAlbum) ProtoMessage() {}

func (x *ReqMyCollectionAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMyCollectionAlbum.ProtoReflect.Descriptor instead.
func (*ReqMyCollectionAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{105}
}

func (x *ReqMyCollectionAlbum) GetAlbumType() AlbumType {
	if x != nil {
		return x.AlbumType
	}
	return AlbumType_ALL
}

func (x *ReqMyCollectionAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqMyCollectionAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqMyCollectionAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqMyCollectionAlbum) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqMyCollectionAlbum) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ReqMyCollectionAlbum) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type RspMyCollectionAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string       `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string       `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string       `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	AlbumInfo     []*AlbumInfo `protobuf:"bytes,4,rep,name=album_info,json=albumInfo,proto3" json:"album_info,omitempty"` //
	Result        *Result      `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	Page          uint64       `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *RspMyCollectionAlbum) Reset() {
	*x = RspMyCollectionAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspMyCollectionAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspMyCollectionAlbum) ProtoMessage() {}

func (x *RspMyCollectionAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspMyCollectionAlbum.ProtoReflect.Descriptor instead.
func (*RspMyCollectionAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{106}
}

func (x *RspMyCollectionAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspMyCollectionAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspMyCollectionAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspMyCollectionAlbum) GetAlbumInfo() []*AlbumInfo {
	if x != nil {
		return x.AlbumInfo
	}
	return nil
}

func (x *RspMyCollectionAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspMyCollectionAlbum) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ReqDeleteAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumId       string `protobuf:"bytes,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqDeleteAlbum) Reset() {
	*x = ReqDeleteAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteAlbum) ProtoMessage() {}

func (x *ReqDeleteAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteAlbum.ProtoReflect.Descriptor instead.
func (*ReqDeleteAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{107}
}

func (x *ReqDeleteAlbum) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *ReqDeleteAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDeleteAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDeleteAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspDeleteAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumId       string  `protobuf:"bytes,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	P2PAddress    string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId         string  `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDeleteAlbum) Reset() {
	*x = RspDeleteAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteAlbum) ProtoMessage() {}

func (x *RspDeleteAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteAlbum.ProtoReflect.Descriptor instead.
func (*RspDeleteAlbum) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{108}
}

func (x *RspDeleteAlbum) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *RspDeleteAlbum) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDeleteAlbum) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDeleteAlbum) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspDeleteAlbum) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	ReqId          string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	NetworkAddress string `protobuf:"bytes,4,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
}

func (x *ReqConfig) Reset() {
	*x = ReqConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConfig) ProtoMessage() {}

func (x *ReqConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConfig.ProtoReflect.Descriptor instead.
func (*ReqConfig) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{109}
}

func (x *ReqConfig) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqConfig) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqConfig) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqConfig) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

type RspConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode string  `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
	ReqId          string  `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Invite         uint64  `protobuf:"varint,3,opt,name=invite,proto3" json:"invite,omitempty"`
	IsUpgrade      bool    `protobuf:"varint,4,opt,name=is_upgrade,json=isUpgrade,proto3" json:"is_upgrade,omitempty"`
	FreeCapacity   uint64  `protobuf:"varint,5,opt,name=free_capacity,json=freeCapacity,proto3" json:"free_capacity,omitempty"`
	Result         *Result `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
	P2PAddress     string  `protobuf:"bytes,7,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string  `protobuf:"bytes,8,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Capacity       uint64  `protobuf:"varint,9,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *RspConfig) Reset() {
	*x = RspConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspConfig) ProtoMessage() {}

func (x *RspConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspConfig.ProtoReflect.Descriptor instead.
func (*RspConfig) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{110}
}

func (x *RspConfig) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *RspConfig) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspConfig) GetInvite() uint64 {
	if x != nil {
		return x.Invite
	}
	return 0
}

func (x *RspConfig) GetIsUpgrade() bool {
	if x != nil {
		return x.IsUpgrade
	}
	return false
}

func (x *RspConfig) GetFreeCapacity() uint64 {
	if x != nil {
		return x.FreeCapacity
	}
	return 0
}

func (x *RspConfig) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspConfig) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspConfig) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspConfig) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type ReqInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`    // wallet used the invitation code
	InvitationCode string `protobuf:"bytes,3,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"` // invitation code
	ReqId          string `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqInvite) Reset() {
	*x = ReqInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInvite) ProtoMessage() {}

func (x *ReqInvite) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInvite.ProtoReflect.Descriptor instead.
func (*ReqInvite) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{111}
}

func (x *ReqInvite) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqInvite) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqInvite) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *ReqInvite) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	CapacityDelta   uint64  `protobuf:"varint,2,opt,name=capacity_delta,json=capacityDelta,proto3" json:"capacity_delta,omitempty"`
	CurrentCapacity uint64  `protobuf:"varint,3,opt,name=current_capacity,json=currentCapacity,proto3" json:"current_capacity,omitempty"`
	ReqId           string  `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	P2PAddress      string  `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress   string  `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
}

func (x *RspInvite) Reset() {
	*x = RspInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspInvite) ProtoMessage() {}

func (x *RspInvite) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspInvite.ProtoReflect.Descriptor instead.
func (*RspInvite) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{112}
}

func (x *RspInvite) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspInvite) GetCapacityDelta() uint64 {
	if x != nil {
		return x.CapacityDelta
	}
	return 0
}

func (x *RspInvite) GetCurrentCapacity() uint64 {
	if x != nil {
		return x.CurrentCapacity
	}
	return 0
}

func (x *RspInvite) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspInvite) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspInvite) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type ReqGetReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqGetReward) Reset() {
	*x = ReqGetReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetReward) ProtoMessage() {}

func (x *ReqGetReward) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetReward.ProtoReflect.Descriptor instead.
func (*ReqGetReward) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{113}
}

func (x *ReqGetReward) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqGetReward) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqGetReward) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspGetReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ReqId           string  `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	P2PAddress      string  `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress   string  `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	CurrentCapacity uint64  `protobuf:"varint,5,opt,name=current_capacity,json=currentCapacity,proto3" json:"current_capacity,omitempty"`
}

func (x *RspGetReward) Reset() {
	*x = RspGetReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetReward) ProtoMessage() {}

func (x *RspGetReward) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetReward.ProtoReflect.Descriptor instead.
func (*RspGetReward) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{114}
}

func (x *RspGetReward) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspGetReward) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspGetReward) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspGetReward) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspGetReward) GetCurrentCapacity() uint64 {
	if x != nil {
		return x.CurrentCapacity
	}
	return 0
}

type ReqGetCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqGetCapacity) Reset() {
	*x = ReqGetCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetCapacity) ProtoMessage() {}

func (x *ReqGetCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetCapacity.ProtoReflect.Descriptor instead.
func (*ReqGetCapacity) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{115}
}

func (x *ReqGetCapacity) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqGetCapacity) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqGetCapacity) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspGetCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	P2PAddress    string  `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Capacity      uint64  `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	FreeCapacity  uint64  `protobuf:"varint,6,opt,name=free_capacity,json=freeCapacity,proto3" json:"free_capacity,omitempty"`
}

func (x *RspGetCapacity) Reset() {
	*x = RspGetCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetCapacity) ProtoMessage() {}

func (x *RspGetCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetCapacity.ProtoReflect.Descriptor instead.
func (*RspGetCapacity) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{116}
}

func (x *RspGetCapacity) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspGetCapacity) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspGetCapacity) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspGetCapacity) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspGetCapacity) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *RspGetCapacity) GetFreeCapacity() uint64 {
	if x != nil {
		return x.FreeCapacity
	}
	return 0
}

type ReqFileSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files         []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	ReqId         string      `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	P2PAddress    string      `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string      `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	AlbumId       string      `protobuf:"bytes,5,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
}

func (x *ReqFileSort) Reset() {
	*x = ReqFileSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFileSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFileSort) ProtoMessage() {}

func (x *ReqFileSort) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFileSort.ProtoReflect.Descriptor instead.
func (*ReqFileSort) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{117}
}

func (x *ReqFileSort) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ReqFileSort) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqFileSort) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqFileSort) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqFileSort) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

type RspFileSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId         string  `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	P2PAddress    string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspFileSort) Reset() {
	*x = RspFileSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFileSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFileSort) ProtoMessage() {}

func (x *RspFileSort) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFileSort.ProtoReflect.Descriptor instead.
func (*RspFileSort) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{118}
}

func (x *RspFileSort) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspFileSort) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFileSort) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFileSort) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqFindDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *ReqFindDirectory) Reset() {
	*x = ReqFindDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindDirectory) ProtoMessage() {}

func (x *ReqFindDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindDirectory.ProtoReflect.Descriptor instead.
func (*ReqFindDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{119}
}

func (x *ReqFindDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqFindDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqFindDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type RspFindDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo      []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	P2PAddress    string      `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string      `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string      `protobuf:"bytes,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result     `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspFindDirectory) Reset() {
	*x = RspFindDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFindDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFindDirectory) ProtoMessage() {}

func (x *RspFindDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFindDirectory.ProtoReflect.Descriptor instead.
func (*RspFindDirectory) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{120}
}

func (x *RspFindDirectory) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *RspFindDirectory) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFindDirectory) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFindDirectory) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspFindDirectory) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqCustomerAddVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Volume        uint64 `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	PublicKey     []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *ReqCustomerAddVolume) Reset() {
	*x = ReqCustomerAddVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCustomerAddVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCustomerAddVolume) ProtoMessage() {}

func (x *ReqCustomerAddVolume) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCustomerAddVolume.ProtoReflect.Descriptor instead.
func (*ReqCustomerAddVolume) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{121}
}

func (x *ReqCustomerAddVolume) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqCustomerAddVolume) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqCustomerAddVolume) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ReqCustomerAddVolume) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type RspCustomerAddVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspCustomerAddVolume) Reset() {
	*x = RspCustomerAddVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCustomerAddVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCustomerAddVolume) ProtoMessage() {}

func (x *RspCustomerAddVolume) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCustomerAddVolume.ProtoReflect.Descriptor instead.
func (*RspCustomerAddVolume) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{122}
}

func (x *RspCustomerAddVolume) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspCustomerAddVolume) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspCustomerAddVolume) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqCustomerUseVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress  string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId          string `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	RequiredVolume uint64 `protobuf:"varint,3,opt,name=required_volume,json=requiredVolume,proto3" json:"required_volume,omitempty"`
	PublicKey      []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *ReqCustomerUseVolume) Reset() {
	*x = ReqCustomerUseVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCustomerUseVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCustomerUseVolume) ProtoMessage() {}

func (x *ReqCustomerUseVolume) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCustomerUseVolume.ProtoReflect.Descriptor instead.
func (*ReqCustomerUseVolume) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{123}
}

func (x *ReqCustomerUseVolume) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqCustomerUseVolume) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ReqCustomerUseVolume) GetRequiredVolume() uint64 {
	if x != nil {
		return x.RequiredVolume
	}
	return 0
}

func (x *ReqCustomerUseVolume) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type RspCustomerUseVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspCustomerUseVolume) Reset() {
	*x = RspCustomerUseVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCustomerUseVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCustomerUseVolume) ProtoMessage() {}

func (x *RspCustomerUseVolume) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCustomerUseVolume.ProtoReflect.Descriptor instead.
func (*RspCustomerUseVolume) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{124}
}

func (x *RspCustomerUseVolume) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspCustomerUseVolume) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspCustomerUseVolume) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type RelayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RelayMessage) Reset() {
	*x = RelayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayMessage) ProtoMessage() {}

func (x *RelayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayMessage.ProtoReflect.Descriptor instead.
func (*RelayMessage) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{125}
}

func (x *RelayMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelayMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_sds_proto protoreflect.FileDescriptor

var file_sds_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x1a, 0x0e, 0x73, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74,
	0x50, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0b,
	0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x6d, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x0b, 0x52,
	0x73, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x69, 0x73, 0x50, 0x50, 0x22, 0x6c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x33, 0x0a, 0x09, 0x52, 0x73, 0x70, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x6d,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x22, 0xa7, 0x02, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x06,
	0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd4,
	0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x63, 0x12, 0x36, 0x0a, 0x0a,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x15,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xe0, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0c, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x50, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x50, 0x50,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x52, 0x73, 0x70, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x22, 0x7d, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8f, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x46, 0x69,
	0x6e, 0x64, 0x4d, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x55, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x52, 0x73,
	0x70, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22,
	0xe6, 0x02, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x43, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xfb, 0x02, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe3,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x9b, 0x02, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x73, 0x50, 0x50, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a,
	0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x79, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x79, 0x50, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x79, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x17, 0x52, 0x73, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x74, 0x0a, 0x0f, 0x52,
	0x65, 0x71, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x50, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x22, 0xb9, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x65, 0x77, 0x50, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x73, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x3a, 0x0a,
	0x10, 0x52, 0x73, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x50,
	0x50, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x71,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x52, 0x73, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x0c, 0x52,
	0x65, 0x71, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x0c,
	0x52, 0x73, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x40, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x62, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x31, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a,
	0x0e, 0x52, 0x73, 0x70, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x63, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x74, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x09,
	0x52, 0x73, 0x70, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x58, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x75, 0x6f, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x6f, 0x7a, 0x22, 0x34, 0x0a, 0x0a, 0x52,
	0x73, 0x70, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x53, 0x70, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x9a, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9b, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x71, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x6e, 0x65, 0x77, 0x50, 0x70, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x70, 0x22, 0x63, 0x0a, 0x16, 0x52, 0x73,
	0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x22,
	0x38, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x52, 0x73,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x66, 0x0a, 0x19, 0x52, 0x73, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa6, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x50, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x22, 0x64, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x65, 0x72, 0x22, 0x56,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x48, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x47, 0x65,
	0x74, 0x48, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x72, 0x65,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x13, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x78, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x4d, 0x61, 0x6b, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x91, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xba, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a,
	0x0f, 0x52, 0x65, 0x71, 0x42, 0x4c, 0x53, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x65, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x42, 0x50, 0x42, 0x4c, 0x53, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x62,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0a, 0x52, 0x65, 0x71,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a,
	0x0a, 0x0a, 0x52, 0x73, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x0d, 0x52,
	0x73, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x13,
	0x52, 0x73, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x22, 0xf6, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xb2,
	0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x39, 0x0a,
	0x19, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x53,
	0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x53, 0x61, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x52, 0x73,
	0x70, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x62, 0x6c,
	0x75, 0x72, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x42, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69,
	0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x22, 0xb0,
	0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x45, 0x64, 0x69, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x22,
	0xeb, 0x02, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa4, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x12, 0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x0d,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xf3, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a,
	0x12, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x89, 0x02,
	0x0a, 0x10, 0x52, 0x73, 0x70, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x79, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x12, 0x3e, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x4d, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x14, 0x52, 0x73,
	0x70, 0x4d, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a,
	0x0e, 0x52, 0x73, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x09, 0x52, 0x73, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6d, 0x0a, 0x0c, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x52, 0x73,
	0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x6f, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x0e, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x52,
	0x73, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x71, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x8b, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x7c, 0x0a,
	0x14, 0x52, 0x73, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x71, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x55, 0x73, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x7c, 0x0a, 0x14, 0x52, 0x73,
	0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x55, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sds_proto_rawDescOnce sync.Once
	file_sds_proto_rawDescData = file_sds_proto_rawDesc
)

func file_sds_proto_rawDescGZIP() []byte {
	file_sds_proto_rawDescOnce.Do(func() {
		file_sds_proto_rawDescData = protoimpl.X.CompressGZIP(file_sds_proto_rawDescData)
	})
	return file_sds_proto_rawDescData
}

var file_sds_proto_msgTypes = make([]protoimpl.MessageInfo, 126)
var file_sds_proto_goTypes = []interface{}{
	(*ReqGetPPList)(nil),               // 0: protos.ReqGetPPList
	(*RspGetPPList)(nil),               // 1: protos.RspGetPPList
	(*ReqRegister)(nil),                // 2: protos.ReqRegister
	(*RspRegister)(nil),                // 3: protos.RspRegister
	(*ReqMining)(nil),                  // 4: protos.ReqMining
	(*RspMining)(nil),                  // 5: protos.RspMining
	(*ReqUploadFile)(nil),              // 6: protos.ReqUploadFile
	(*RspUploadFile)(nil),              // 7: protos.RspUploadFile
	(*ReqUploadFileSlice)(nil),         // 8: protos.ReqUploadFileSlice
	(*RspUploadFileSlice)(nil),         // 9: protos.RspUploadFileSlice
	(*UploadSpeedOfProgress)(nil),      // 10: protos.UploadSpeedOfProgress
	(*ReportUploadSliceResult)(nil),    // 11: protos.ReportUploadSliceResult
	(*RspReportUploadSliceResult)(nil), // 12: protos.RspReportUploadSliceResult
	(*Uploaded)(nil),                   // 13: protos.Uploaded
	(*ReqFindMyFileList)(nil),          // 14: protos.ReqFindMyFileList
	(*RspFindMyFileList)(nil),          // 15: protos.RspFindMyFileList
	(*ReqFindDirectoryTree)(nil),       // 16: protos.ReqFindDirectoryTree
	(*RspFindDirectoryTree)(nil),       // 17: protos.RspFindDirectoryTree
	(*ReqFileStorageInfo)(nil),         // 18: protos.ReqFileStorageInfo
	(*RspFileStorageInfo)(nil),         // 19: protos.RspFileStorageInfo
	(*ReqDownloadSlice)(nil),           // 20: protos.ReqDownloadSlice
	(*RspDownloadSlice)(nil),           // 21: protos.RspDownloadSlice
	(*ReqDownloadSliceWrong)(nil),      // 22: protos.ReqDownloadSliceWrong
	(*RspDownloadSliceWrong)(nil),      // 23: protos.RspDownloadSliceWrong
	(*ReqDownloadSlicePause)(nil),      // 24: protos.ReqDownloadSlicePause
	(*RspDownloadSlicePause)(nil),      // 25: protos.RspDownloadSlicePause
	(*ReqReportDownloadResult)(nil),    // 26: protos.ReqReportDownloadResult
	(*RspReportDownloadResult)(nil),    // 27: protos.RspReportDownloadResult
	(*ReqReportTaskBP)(nil),            // 28: protos.ReqReportTaskBP
	(*ReqRegisterNewPP)(nil),           // 29: protos.ReqRegisterNewPP
	(*RspRegisterNewPP)(nil),           // 30: protos.RspRegisterNewPP
	(*ReqActivate)(nil),                // 31: protos.ReqActivate
	(*RspActivate)(nil),                // 32: protos.RspActivate
	(*ReqActivated)(nil),               // 33: protos.ReqActivated
	(*RspActivated)(nil),               // 34: protos.RspActivated
	(*ReqDeactivate)(nil),              // 35: protos.ReqDeactivate
	(*RspDeactivate)(nil),              // 36: protos.RspDeactivate
	(*ReqDeactivated)(nil),             // 37: protos.ReqDeactivated
	(*RspDeactivated)(nil),             // 38: protos.RspDeactivated
	(*ReqPrepay)(nil),                  // 39: protos.ReqPrepay
	(*RspPrepay)(nil),                  // 40: protos.RspPrepay
	(*ReqPrepaid)(nil),                 // 41: protos.ReqPrepaid
	(*RspPrepaid)(nil),                 // 42: protos.RspPrepaid
	(*ReqDeleteFile)(nil),              // 43: protos.ReqDeleteFile
	(*RspDeleteFile)(nil),              // 44: protos.RspDeleteFile
	(*ReqTransferNotice)(nil),          // 45: protos.ReqTransferNotice
	(*RspTransferNotice)(nil),          // 46: protos.RspTransferNotice
	(*ReqValidateTransferCer)(nil),     // 47: protos.ReqValidateTransferCer
	(*RspValidateTransferCer)(nil),     // 48: protos.RspValidateTransferCer
	(*ReqTransferDownload)(nil),        // 49: protos.ReqTransferDownload
	(*RspTransferDownload)(nil),        // 50: protos.RspTransferDownload
	(*RspTransferDownloadResult)(nil),  // 51: protos.RspTransferDownloadResult
	(*ReqReportTransferResult)(nil),    // 52: protos.ReqReportTransferResult
	(*RspReportTransferResult)(nil),    // 53: protos.RspReportTransferResult
	(*ReqGetHDInfo)(nil),               // 54: protos.ReqGetHDInfo
	(*RspGetHDInfo)(nil),               // 55: protos.RspGetHDInfo
	(*ReqSendChatMessages)(nil),        // 56: protos.ReqSendChatMessages
	(*RspSendChatMessages)(nil),        // 57: protos.RspSendChatMessages
	(*ReqDeleteSlice)(nil),             // 58: protos.ReqDeleteSlice
	(*RspDeleteSlice)(nil),             // 59: protos.RspDeleteSlice
	(*ReqMakeDirectory)(nil),           // 60: protos.ReqMakeDirectory
	(*RspMakeDirectory)(nil),           // 61: protos.RspMakeDirectory
	(*ReqRemoveDirectory)(nil),         // 62: protos.ReqRemoveDirectory
	(*RspRemoveDirectory)(nil),         // 63: protos.RspRemoveDirectory
	(*ReqMoveFileDirectory)(nil),       // 64: protos.ReqMoveFileDirectory
	(*RspMoveFileDirectory)(nil),       // 65: protos.RspMoveFileDirectory
	(*ReqBLSPublicKey)(nil),            // 66: protos.ReqBLSPublicKey
	(*RspBPBLSPublicKey)(nil),          // 67: protos.RspBPBLSPublicKey
	(*ReqBalance)(nil),                 // 68: protos.ReqBalance
	(*RspBalance)(nil),                 // 69: protos.RspBalance
	(*ReqTransaction)(nil),             // 70: protos.ReqTransaction
	(*RspTransaction)(nil),             // 71: protos.RspTransaction
	(*ReqBlockInfo)(nil),               // 72: protos.ReqBlockInfo
	(*RspBlockInfo)(nil),               // 73: protos.RspBlockInfo
	(*ReqBlockCheck)(nil),              // 74: protos.ReqBlockCheck
	(*RspBlockCheck)(nil),              // 75: protos.RspBlockCheck
	(*BlockCheckInfo)(nil),             // 76: protos.BlockCheckInfo
	(*ReqDownloadTaskInfo)(nil),        // 77: protos.ReqDownloadTaskInfo
	(*RspDownloadTaskInfo)(nil),        // 78: protos.RspDownloadTaskInfo
	(*ReqShareLink)(nil),               // 79: protos.ReqShareLink
	(*RspShareLink)(nil),               // 80: protos.RspShareLink
	(*ReqShareFile)(nil),               // 81: protos.ReqShareFile
	(*RspShareFile)(nil),               // 82: protos.RspShareFile
	(*ReqDeleteShare)(nil),             // 83: protos.ReqDeleteShare
	(*RspDeleteShare)(nil),             // 84: protos.RspDeleteShare
	(*ReqGetShareFile)(nil),            // 85: protos.ReqGetShareFile
	(*RspGetShareFile)(nil),            // 86: protos.RspGetShareFile
	(*ReqSaveFile)(nil),                // 87: protos.ReqSaveFile
	(*RspSaveFile)(nil),                // 88: protos.RspSaveFile
	(*ReqSaveFolder)(nil),              // 89: protos.ReqSaveFolder
	(*RspSaveFolder)(nil),              // 90: protos.RspSaveFolder
	(*ReqCreateAlbum)(nil),             // 91: protos.ReqCreateAlbum
	(*RspCreateAlbum)(nil),             // 92: protos.RspCreateAlbum
	(*ReqEditAlbum)(nil),               // 93: protos.ReqEditAlbum
	(*RspEditAlbum)(nil),               // 94: protos.RspEditAlbum
	(*ReqAlbumContent)(nil),            // 95: protos.ReqAlbumContent
	(*RspAlbumContent)(nil),            // 96: protos.RspAlbumContent
	(*ReqSearchAlbum)(nil),             // 97: protos.ReqSearchAlbum
	(*RspSearchAlbum)(nil),             // 98: protos.RspSearchAlbum
	(*ReqFindMyAlbum)(nil),             // 99: protos.ReqFindMyAlbum
	(*RspFindMyAlbum)(nil),             // 100: protos.RspFindMyAlbum
	(*ReqCollectionAlbum)(nil),         // 101: protos.ReqCollectionAlbum
	(*RspCollectionAlbum)(nil),         // 102: protos.RspCollectionAlbum
	(*ReqAbstractAlbum)(nil),           // 103: protos.ReqAbstractAlbum
	(*RspAbstractAlbum)(nil),           // 104: protos.RspAbstractAlbum
	(*ReqMyCollectionAlbum)(nil),       // 105: protos.ReqMyCollectionAlbum
	(*RspMyCollectionAlbum)(nil),       // 106: protos.RspMyCollectionAlbum
	(*ReqDeleteAlbum)(nil),             // 107: protos.ReqDeleteAlbum
	(*RspDeleteAlbum)(nil),             // 108: protos.RspDeleteAlbum
	(*ReqConfig)(nil),                  // 109: protos.ReqConfig
	(*RspConfig)(nil),                  // 110: protos.RspConfig
	(*ReqInvite)(nil),                  // 111: protos.ReqInvite
	(*RspInvite)(nil),                  // 112: protos.RspInvite
	(*ReqGetReward)(nil),               // 113: protos.ReqGetReward
	(*RspGetReward)(nil),               // 114: protos.RspGetReward
	(*ReqGetCapacity)(nil),             // 115: protos.ReqGetCapacity
	(*RspGetCapacity)(nil),             // 116: protos.RspGetCapacity
	(*ReqFileSort)(nil),                // 117: protos.ReqFileSort
	(*RspFileSort)(nil),                // 118: protos.RspFileSort
	(*ReqFindDirectory)(nil),           // 119: protos.ReqFindDirectory
	(*RspFindDirectory)(nil),           // 120: protos.RspFindDirectory
	(*ReqCustomerAddVolume)(nil),       // 121: protos.ReqCustomerAddVolume
	(*RspCustomerAddVolume)(nil),       // 122: protos.RspCustomerAddVolume
	(*ReqCustomerUseVolume)(nil),       // 123: protos.ReqCustomerUseVolume
	(*RspCustomerUseVolume)(nil),       // 124: protos.RspCustomerUseVolume
	(*RelayMessage)(nil),               // 125: protos.RelayMessage
	(*PPBaseInfo)(nil),                 // 126: protos.PPBaseInfo
	(*Result)(nil),                     // 127: protos.Result
	(*FileInfo)(nil),                   // 128: protos.FileInfo
	(*SliceNumAddr)(nil),               // 129: protos.SliceNumAddr
	(*SliceOffsetInfo)(nil),            // 130: protos.SliceOffsetInfo
	(FileSortType)(0),                  // 131: protos.FileSortType
	(*FileIndexes)(nil),                // 132: protos.FileIndexes
	(*DownloadSliceInfo)(nil),          // 133: protos.DownloadSliceInfo
	(DownloadWrongType)(0),             // 134: protos.DownloadWrongType
	(*SliceStorageInfo)(nil),           // 135: protos.SliceStorageInfo
	(MsgType)(0),                       // 136: protos.MsgType
	(*ShareLinkInfo)(nil),              // 137: protos.ShareLinkInfo
	(AlbumType)(0),                     // 138: protos.AlbumType
	(*AlbumInfo)(nil),                  // 139: protos.AlbumInfo
	(AlbumSortType)(0),                 // 140: protos.AlbumSortType
	(*AlbumNumber)(nil),                // 141: protos.AlbumNumber
}
var file_sds_proto_depIdxs = []int32{
	126, // 0: protos.ReqGetPPList.my_address:type_name -> protos.PPBaseInfo
	126, // 1: protos.RspGetPPList.pp_list:type_name -> protos.PPBaseInfo
	127, // 2: protos.RspGetPPList.result:type_name -> protos.Result
	126, // 3: protos.ReqRegister.address:type_name -> protos.PPBaseInfo
	126, // 4: protos.ReqRegister.my_address:type_name -> protos.PPBaseInfo
	127, // 5: protos.RspRegister.result:type_name -> protos.Result
	126, // 6: protos.ReqMining.address:type_name -> protos.PPBaseInfo
	127, // 7: protos.RspMining.result:type_name -> protos.Result
	128, // 8: protos.ReqUploadFile.file_info:type_name -> protos.FileInfo
	126, // 9: protos.ReqUploadFile.my_address:type_name -> protos.PPBaseInfo
	129, // 10: protos.RspUploadFile.pp_list:type_name -> protos.SliceNumAddr
	127, // 11: protos.RspUploadFile.result:type_name -> protos.Result
	129, // 12: protos.ReqUploadFileSlice.slice_num_addr:type_name -> protos.SliceNumAddr
	130, // 13: protos.ReqUploadFileSlice.slice_info:type_name -> protos.SliceOffsetInfo
	127, // 14: protos.RspUploadFileSlice.result:type_name -> protos.Result
	129, // 15: protos.RspUploadFileSlice.slice_num_addr:type_name -> protos.SliceNumAddr
	129, // 16: protos.ReportUploadSliceResult.slice_num_addr:type_name -> protos.SliceNumAddr
	127, // 17: protos.RspReportUploadSliceResult.result:type_name -> protos.Result
	129, // 18: protos.RspReportUploadSliceResult.slice_num_addr:type_name -> protos.SliceNumAddr
	131, // 19: protos.ReqFindMyFileList.file_type:type_name -> protos.FileSortType
	128, // 20: protos.RspFindMyFileList.file_info:type_name -> protos.FileInfo
	127, // 21: protos.RspFindMyFileList.result:type_name -> protos.Result
	128, // 22: protos.RspFindDirectoryTree.file_info:type_name -> protos.FileInfo
	127, // 23: protos.RspFindDirectoryTree.result:type_name -> protos.Result
	132, // 24: protos.ReqFileStorageInfo.file_indexes:type_name -> protos.FileIndexes
	133, // 25: protos.RspFileStorageInfo.slice_info:type_name -> protos.DownloadSliceInfo
	127, // 26: protos.RspFileStorageInfo.result:type_name -> protos.Result
	130, // 27: protos.ReqDownloadSlice.slice_info:type_name -> protos.SliceOffsetInfo
	130, // 28: protos.RspDownloadSlice.slice_info:type_name -> protos.SliceOffsetInfo
	127, // 29: protos.RspDownloadSlice.result:type_name -> protos.Result
	134, // 30: protos.ReqDownloadSliceWrong.type:type_name -> protos.DownloadWrongType
	133, // 31: protos.RspDownloadSliceWrong.new_slice_info:type_name -> protos.DownloadSliceInfo
	127, // 32: protos.RspDownloadSliceWrong.result:type_name -> protos.Result
	127, // 33: protos.RspDownloadSlicePause.result:type_name -> protos.Result
	133, // 34: protos.ReqReportDownloadResult.slice_info:type_name -> protos.DownloadSliceInfo
	127, // 35: protos.RspReportDownloadResult.result:type_name -> protos.Result
	133, // 36: protos.RspReportDownloadResult.slice_info:type_name -> protos.DownloadSliceInfo
	126, // 37: protos.ReqReportTaskBP.reporter:type_name -> protos.PPBaseInfo
	127, // 38: protos.RspRegisterNewPP.result:type_name -> protos.Result
	127, // 39: protos.RspActivate.result:type_name -> protos.Result
	127, // 40: protos.RspActivated.result:type_name -> protos.Result
	127, // 41: protos.RspDeactivate.result:type_name -> protos.Result
	127, // 42: protos.RspDeactivated.result:type_name -> protos.Result
	127, // 43: protos.RspPrepay.result:type_name -> protos.Result
	127, // 44: protos.RspPrepaid.result:type_name -> protos.Result
	127, // 45: protos.RspDeleteFile.result:type_name -> protos.Result
	135, // 46: protos.ReqTransferNotice.slice_storage_info:type_name -> protos.SliceStorageInfo
	126, // 47: protos.ReqTransferNotice.storage_pp_info:type_name -> protos.PPBaseInfo
	127, // 48: protos.RspTransferNotice.result:type_name -> protos.Result
	126, // 49: protos.RspTransferNotice.storage_pp_info:type_name -> protos.PPBaseInfo
	126, // 50: protos.ReqValidateTransferCer.new_pp:type_name -> protos.PPBaseInfo
	126, // 51: protos.ReqValidateTransferCer.original_pp:type_name -> protos.PPBaseInfo
	127, // 52: protos.RspValidateTransferCer.result:type_name -> protos.Result
	127, // 53: protos.RspTransferDownload.result:type_name -> protos.Result
	127, // 54: protos.RspTransferDownloadResult.result:type_name -> protos.Result
	126, // 55: protos.ReqReportTransferResult.new_pp:type_name -> protos.PPBaseInfo
	127, // 56: protos.ReqReportTransferResult.result:type_name -> protos.Result
	127, // 57: protos.RspReportTransferResult.result:type_name -> protos.Result
	136, // 58: protos.ReqSendChatMessages.type:type_name -> protos.MsgType
	127, // 59: protos.RspSendChatMessages.result:type_name -> protos.Result
	127, // 60: protos.RspDeleteSlice.result:type_name -> protos.Result
	127, // 61: protos.RspMakeDirectory.result:type_name -> protos.Result
	127, // 62: protos.RspRemoveDirectory.result:type_name -> protos.Result
	127, // 63: protos.RspMoveFileDirectory.result:type_name -> protos.Result
	2,   // 64: protos.RspBPBLSPublicKey.bp_info:type_name -> protos.ReqRegister
	76,  // 65: protos.RspBlockCheck.block_list:type_name -> protos.BlockCheckInfo
	127, // 66: protos.RspDownloadTaskInfo.result:type_name -> protos.Result
	137, // 67: protos.RspShareLink.share_info:type_name -> protos.ShareLinkInfo
	127, // 68: protos.RspShareLink.result:type_name -> protos.Result
	127, // 69: protos.RspShareFile.result:type_name -> protos.Result
	127, // 70: protos.RspDeleteShare.result:type_name -> protos.Result
	127, // 71: protos.RspGetShareFile.result:type_name -> protos.Result
	128, // 72: protos.RspGetShareFile.file_info:type_name -> protos.FileInfo
	127, // 73: protos.RspSaveFile.result:type_name -> protos.Result
	127, // 74: protos.RspSaveFolder.result:type_name -> protos.Result
	128, // 75: protos.ReqCreateAlbum.file_info:type_name -> protos.FileInfo
	138, // 76: protos.ReqCreateAlbum.album_type:type_name -> protos.AlbumType
	127, // 77: protos.RspCreateAlbum.result:type_name -> protos.Result
	128, // 78: protos.ReqEditAlbum.change_files:type_name -> protos.FileInfo
	127, // 79: protos.RspEditAlbum.result:type_name -> protos.Result
	139, // 80: protos.RspAlbumContent.album_info:type_name -> protos.AlbumInfo
	128, // 81: protos.RspAlbumContent.file_info:type_name -> protos.FileInfo
	127, // 82: protos.RspAlbumContent.result:type_name -> protos.Result
	138, // 83: protos.ReqSearchAlbum.album_type:type_name -> protos.AlbumType
	140, // 84: protos.ReqSearchAlbum.AlbumSortType:type_name -> protos.AlbumSortType
	139, // 85: protos.RspSearchAlbum.album_info:type_name -> protos.AlbumInfo
	127, // 86: protos.RspSearchAlbum.result:type_name -> protos.Result
	138, // 87: protos.ReqFindMyAlbum.album_type:type_name -> protos.AlbumType
	139, // 88: protos.RspFindMyAlbum.album_info:type_name -> protos.AlbumInfo
	127, // 89: protos.RspFindMyAlbum.result:type_name -> protos.Result
	127, // 90: protos.RspCollectionAlbum.result:type_name -> protos.Result
	141, // 91: protos.RspAbstractAlbum.my_album:type_name -> protos.AlbumNumber
	141, // 92: protos.RspAbstractAlbum.collection_album:type_name -> protos.AlbumNumber
	127, // 93: protos.RspAbstractAlbum.result:type_name -> protos.Result
	138, // 94: protos.ReqMyCollectionAlbum.album_type:type_name -> protos.AlbumType
	139, // 95: protos.RspMyCollectionAlbum.album_info:type_name -> protos.AlbumInfo
	127, // 96: protos.RspMyCollectionAlbum.result:type_name -> protos.Result
	127, // 97: protos.RspDeleteAlbum.result:type_name -> protos.Result
	127, // 98: protos.RspConfig.result:type_name -> protos.Result
	127, // 99: protos.RspInvite.result:type_name -> protos.Result
	127, // 100: protos.RspGetReward.result:type_name -> protos.Result
	127, // 101: protos.RspGetCapacity.result:type_name -> protos.Result
	128, // 102: protos.ReqFileSort.files:type_name -> protos.FileInfo
	127, // 103: protos.RspFileSort.result:type_name -> protos.Result
	128, // 104: protos.RspFindDirectory.file_info:type_name -> protos.FileInfo
	127, // 105: protos.RspFindDirectory.result:type_name -> protos.Result
	127, // 106: protos.RspCustomerAddVolume.result:type_name -> protos.Result
	127, // 107: protos.RspCustomerUseVolume.result:type_name -> protos.Result
	108, // [108:108] is the sub-list for method output_type
	108, // [108:108] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_sds_proto_init() }
func file_sds_proto_init() {
	if File_sds_proto != nil {
		return
	}
	file_sds_comm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sds_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetPPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetPPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUploadFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUploadFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUploadFileSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUploadFileSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSpeedOfProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUploadSliceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReportUploadSliceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uploaded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindMyFileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFindMyFileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindDirectoryTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFindDirectoryTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFileStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFileStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDownloadSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadSliceWrong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDownloadSliceWrong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadSlicePause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDownloadSlicePause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReportDownloadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReportDownloadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReportTaskBP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRegisterNewPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspRegisterNewPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqActivated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspActivated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeactivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeactivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeactivated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeactivated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPrepay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPrepay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPrepaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPrepaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTransferNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransferNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqValidateTransferCer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspValidateTransferCer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTransferDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransferDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransferDownloadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReportTransferResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReportTransferResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetHDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetHDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendChatMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSendChatMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMakeDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspMakeDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRemoveDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspRemoveDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMoveFileDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspMoveFileDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBLSPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBPBLSPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBlockCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDownloadTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShareLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShareLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSaveFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSaveFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSaveFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSaveFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCreateAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspEditAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAlbumContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspAlbumContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSearchAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSearchAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindMyAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFindMyAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCollectionAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCollectionAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAbstractAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspAbstractAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMyCollectionAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspMyCollectionAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFileSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFileSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFindDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCustomerAddVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCustomerAddVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCustomerUseVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCustomerUseVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sds_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   126,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sds_proto_goTypes,
		DependencyIndexes: file_sds_proto_depIdxs,
		MessageInfos:      file_sds_proto_msgTypes,
	}.Build()
	File_sds_proto = out.File
	file_sds_proto_rawDesc = nil
	file_sds_proto_goTypes = nil
	file_sds_proto_depIdxs = nil
}
