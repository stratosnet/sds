// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: sds.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqGetPPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyAddress *PPBaseInfo `protobuf:"bytes,1,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
}

func (x *ReqGetPPList) Reset() {
	*x = ReqGetPPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetPPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetPPList) ProtoMessage() {}

func (x *ReqGetPPList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetPPList.ProtoReflect.Descriptor instead.
func (*ReqGetPPList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{0}
}

func (x *ReqGetPPList) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

type RspGetPPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PpList []*PPBaseInfo `protobuf:"bytes,1,rep,name=pp_list,json=ppList,proto3" json:"pp_list,omitempty"`
	Result *Result       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspGetPPList) Reset() {
	*x = RspGetPPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetPPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetPPList) ProtoMessage() {}

func (x *RspGetPPList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetPPList.ProtoReflect.Descriptor instead.
func (*RspGetPPList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{1}
}

func (x *RspGetPPList) GetPpList() []*PPBaseInfo {
	if x != nil {
		return x.PpList
	}
	return nil
}

func (x *RspGetPPList) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqGetSPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyAddress *PPBaseInfo `protobuf:"bytes,1,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
}

func (x *ReqGetSPList) Reset() {
	*x = ReqGetSPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetSPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetSPList) ProtoMessage() {}

func (x *ReqGetSPList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetSPList.ProtoReflect.Descriptor instead.
func (*ReqGetSPList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{2}
}

func (x *ReqGetSPList) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

type RspGetSPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpList []*SPBaseInfo `protobuf:"bytes,1,rep,name=sp_list,json=spList,proto3" json:"sp_list,omitempty"`
	Result *Result       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspGetSPList) Reset() {
	*x = RspGetSPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetSPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetSPList) ProtoMessage() {}

func (x *RspGetSPList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetSPList.ProtoReflect.Descriptor instead.
func (*RspGetSPList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{3}
}

func (x *RspGetSPList) GetSpList() []*SPBaseInfo {
	if x != nil {
		return x.SpList
	}
	return nil
}

func (x *RspGetSPList) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   *PPBaseInfo `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey []byte      `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	MyAddress *PPBaseInfo `protobuf:"bytes,3,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"` //middleman pp address
}

func (x *ReqRegister) Reset() {
	*x = ReqRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRegister) ProtoMessage() {}

func (x *ReqRegister) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRegister.ProtoReflect.Descriptor instead.
func (*ReqRegister) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{4}
}

func (x *ReqRegister) GetAddress() *PPBaseInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ReqRegister) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ReqRegister) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

type RspRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // if register success or not
	P2PAddress  string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	IsPP        bool    `protobuf:"varint,3,opt,name=isPP,proto3" json:"isPP,omitempty"`
	IsSuspended bool    `protobuf:"varint,4,opt,name=is_suspended,json=isSuspended,proto3" json:"is_suspended,omitempty"`
}

func (x *RspRegister) Reset() {
	*x = RspRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRegister) ProtoMessage() {}

func (x *RspRegister) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRegister.ProtoReflect.Descriptor instead.
func (*RspRegister) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{5}
}

func (x *RspRegister) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspRegister) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspRegister) GetIsPP() bool {
	if x != nil {
		return x.IsPP
	}
	return false
}

func (x *RspRegister) GetIsSuspended() bool {
	if x != nil {
		return x.IsSuspended
	}
	return false
}

type ReqMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *PPBaseInfo `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ReqMining) Reset() {
	*x = ReqMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMining) ProtoMessage() {}

func (x *ReqMining) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMining.ProtoReflect.Descriptor instead.
func (*ReqMining) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{6}
}

func (x *ReqMining) GetAddress() *PPBaseInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

type RspMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspMining) Reset() {
	*x = RspMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspMining) ProtoMessage() {}

func (x *RspMining) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspMining.ProtoReflect.Descriptor instead.
func (*RspMining) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{7}
}

func (x *RspMining) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqStartMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  *PPBaseInfo `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Duration uint64      `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ReqStartMaintenance) Reset() {
	*x = ReqStartMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStartMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStartMaintenance) ProtoMessage() {}

func (x *ReqStartMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStartMaintenance.ProtoReflect.Descriptor instead.
func (*ReqStartMaintenance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{8}
}

func (x *ReqStartMaintenance) GetAddress() *PPBaseInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ReqStartMaintenance) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type RspStartMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspStartMaintenance) Reset() {
	*x = RspStartMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspStartMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspStartMaintenance) ProtoMessage() {}

func (x *RspStartMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspStartMaintenance.ProtoReflect.Descriptor instead.
func (*RspStartMaintenance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{9}
}

func (x *RspStartMaintenance) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqStopMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *PPBaseInfo `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ReqStopMaintenance) Reset() {
	*x = ReqStopMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStopMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStopMaintenance) ProtoMessage() {}

func (x *ReqStopMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStopMaintenance.ProtoReflect.Descriptor instead.
func (*ReqStopMaintenance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{10}
}

func (x *ReqStopMaintenance) GetAddress() *PPBaseInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

type RspStopMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspStopMaintenance) Reset() {
	*x = RspStopMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspStopMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspStopMaintenance) ProtoMessage() {}

func (x *RspStopMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspStopMaintenance.ProtoReflect.Descriptor instead.
func (*RspStopMaintenance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{11}
}

func (x *RspStopMaintenance) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqUploadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo        *FileInfo        `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	Slices          []*SliceHashAddr `protobuf:"bytes,2,rep,name=slices,proto3" json:"slices,omitempty"`
	MyAddress       *PPBaseInfo      `protobuf:"bytes,3,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
	WalletSign      []byte           `protobuf:"bytes,4,opt,name=wallet_sign,json=walletSign,proto3" json:"wallet_sign,omitempty"`
	WalletPubkey    []byte           `protobuf:"bytes,5,opt,name=wallet_pubkey,json=walletPubkey,proto3" json:"wallet_pubkey,omitempty"`
	DesiredTier     uint32           `protobuf:"varint,6,opt,name=desired_tier,json=desiredTier,proto3" json:"desired_tier,omitempty"`
	AllowHigherTier bool             `protobuf:"varint,7,opt,name=allow_higher_tier,json=allowHigherTier,proto3" json:"allow_higher_tier,omitempty"`
}

func (x *ReqUploadFile) Reset() {
	*x = ReqUploadFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUploadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUploadFile) ProtoMessage() {}

func (x *ReqUploadFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUploadFile.ProtoReflect.Descriptor instead.
func (*ReqUploadFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{12}
}

func (x *ReqUploadFile) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *ReqUploadFile) GetSlices() []*SliceHashAddr {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *ReqUploadFile) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

func (x *ReqUploadFile) GetWalletSign() []byte {
	if x != nil {
		return x.WalletSign
	}
	return nil
}

func (x *ReqUploadFile) GetWalletPubkey() []byte {
	if x != nil {
		return x.WalletPubkey
	}
	return nil
}

func (x *ReqUploadFile) GetDesiredTier() uint32 {
	if x != nil {
		return x.DesiredTier
	}
	return 0
}

func (x *ReqUploadFile) GetAllowHigherTier() bool {
	if x != nil {
		return x.AllowHigherTier
	}
	return false
}

type RspUploadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageCer         string           `protobuf:"bytes,1,opt,name=storage_cer,json=storageCer,proto3" json:"storage_cer,omitempty"` // storage certificate
	Slices             []*SliceHashAddr `protobuf:"bytes,2,rep,name=slices,proto3" json:"slices,omitempty"`                           // slice number and pp address list
	FileHash           string           `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	TaskId             string           `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TotalSlice         int64            `protobuf:"varint,5,opt,name=total_slice,json=totalSlice,proto3" json:"total_slice,omitempty"`
	Result             *Result          `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"` // accept upload or not
	OwnerWalletAddress string           `protobuf:"bytes,7,opt,name=owner_wallet_address,json=ownerWalletAddress,proto3" json:"owner_wallet_address,omitempty"`
	IsEncrypted        bool             `protobuf:"varint,8,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
	SpP2PAddress       string           `protobuf:"bytes,9,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	NodeSign           []byte           `protobuf:"bytes,10,opt,name=node_sign,json=nodeSign,proto3" json:"node_sign,omitempty"`
	TimeStamp          int64            `protobuf:"varint,11,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *RspUploadFile) Reset() {
	*x = RspUploadFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUploadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUploadFile) ProtoMessage() {}

func (x *RspUploadFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUploadFile.ProtoReflect.Descriptor instead.
func (*RspUploadFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{13}
}

func (x *RspUploadFile) GetStorageCer() string {
	if x != nil {
		return x.StorageCer
	}
	return ""
}

func (x *RspUploadFile) GetSlices() []*SliceHashAddr {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *RspUploadFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspUploadFile) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspUploadFile) GetTotalSlice() int64 {
	if x != nil {
		return x.TotalSlice
	}
	return 0
}

func (x *RspUploadFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspUploadFile) GetOwnerWalletAddress() string {
	if x != nil {
		return x.OwnerWalletAddress
	}
	return ""
}

func (x *RspUploadFile) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *RspUploadFile) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspUploadFile) GetNodeSign() []byte {
	if x != nil {
		return x.NodeSign
	}
	return nil
}

func (x *RspUploadFile) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type ReqUploadFileSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RspUploadFile *RspUploadFile `protobuf:"bytes,1,opt,name=rsp_upload_file,json=rspUploadFile,proto3" json:"rsp_upload_file,omitempty"`
	SliceNumber   uint64         `protobuf:"varint,2,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	SliceHash     string         `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	Data          []byte         `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	PieceOffset   *SliceOffset   `protobuf:"bytes,5,opt,name=piece_offset,json=pieceOffset,proto3" json:"piece_offset,omitempty"`
	P2PAddress    string         `protobuf:"bytes,6,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string         `protobuf:"bytes,7,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ReqUploadFileSlice) Reset() {
	*x = ReqUploadFileSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUploadFileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUploadFileSlice) ProtoMessage() {}

func (x *ReqUploadFileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUploadFileSlice.ProtoReflect.Descriptor instead.
func (*ReqUploadFileSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{14}
}

func (x *ReqUploadFileSlice) GetRspUploadFile() *RspUploadFile {
	if x != nil {
		return x.RspUploadFile
	}
	return nil
}

func (x *ReqUploadFileSlice) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *ReqUploadFileSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *ReqUploadFileSlice) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqUploadFileSlice) GetPieceOffset() *SliceOffset {
	if x != nil {
		return x.PieceOffset
	}
	return nil
}

func (x *ReqUploadFileSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqUploadFileSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspUploadFileSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        *Result        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Slice         *SliceHashAddr `protobuf:"bytes,2,opt,name=slice,proto3" json:"slice,omitempty"`
	FileHash      string         `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceHash     string         `protobuf:"bytes,4,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	P2PAddress    string         `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"` // src p2p_address
	WalletAddress string         `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	TaskId        string         `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SpP2PAddress  string         `protobuf:"bytes,8,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
}

func (x *RspUploadFileSlice) Reset() {
	*x = RspUploadFileSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUploadFileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUploadFileSlice) ProtoMessage() {}

func (x *RspUploadFileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUploadFileSlice.ProtoReflect.Descriptor instead.
func (*RspUploadFileSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{15}
}

func (x *RspUploadFileSlice) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspUploadFileSlice) GetSlice() *SliceHashAddr {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *RspUploadFileSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspUploadFileSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *RspUploadFileSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspUploadFileSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspUploadFileSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspUploadFileSlice) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

type ReqUploadSlicesWrong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash             string           `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	TaskId               string           `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	UploadType           UploadType       `protobuf:"varint,3,opt,name=upload_type,json=uploadType,proto3,enum=protos.UploadType" json:"upload_type,omitempty"`
	MyAddress            *PPBaseInfo      `protobuf:"bytes,4,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
	SpP2PAddress         string           `protobuf:"bytes,5,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	ExcludedDestinations []*PPBaseInfo    `protobuf:"bytes,6,rep,name=excluded_destinations,json=excludedDestinations,proto3" json:"excluded_destinations,omitempty"`
	Slices               []*SliceHashAddr `protobuf:"bytes,7,rep,name=slices,proto3" json:"slices,omitempty"`
	FailedSlices         []bool           `protobuf:"varint,8,rep,packed,name=failed_slices,json=failedSlices,proto3" json:"failed_slices,omitempty"`
}

func (x *ReqUploadSlicesWrong) Reset() {
	*x = ReqUploadSlicesWrong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUploadSlicesWrong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUploadSlicesWrong) ProtoMessage() {}

func (x *ReqUploadSlicesWrong) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUploadSlicesWrong.ProtoReflect.Descriptor instead.
func (*ReqUploadSlicesWrong) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{16}
}

func (x *ReqUploadSlicesWrong) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqUploadSlicesWrong) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqUploadSlicesWrong) GetUploadType() UploadType {
	if x != nil {
		return x.UploadType
	}
	return UploadType_NEW_UPLOAD
}

func (x *ReqUploadSlicesWrong) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

func (x *ReqUploadSlicesWrong) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *ReqUploadSlicesWrong) GetExcludedDestinations() []*PPBaseInfo {
	if x != nil {
		return x.ExcludedDestinations
	}
	return nil
}

func (x *ReqUploadSlicesWrong) GetSlices() []*SliceHashAddr {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *ReqUploadSlicesWrong) GetFailedSlices() []bool {
	if x != nil {
		return x.FailedSlices
	}
	return nil
}

type RspUploadSlicesWrong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *Result          `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	FileHash   string           `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	UploadType UploadType       `protobuf:"varint,3,opt,name=upload_type,json=uploadType,proto3,enum=protos.UploadType" json:"upload_type,omitempty"`
	TaskId     string           `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Slices     []*SliceHashAddr `protobuf:"bytes,5,rep,name=slices,proto3" json:"slices,omitempty"`
}

func (x *RspUploadSlicesWrong) Reset() {
	*x = RspUploadSlicesWrong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUploadSlicesWrong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUploadSlicesWrong) ProtoMessage() {}

func (x *RspUploadSlicesWrong) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUploadSlicesWrong.ProtoReflect.Descriptor instead.
func (*RspUploadSlicesWrong) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{17}
}

func (x *RspUploadSlicesWrong) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspUploadSlicesWrong) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspUploadSlicesWrong) GetUploadType() UploadType {
	if x != nil {
		return x.UploadType
	}
	return UploadType_NEW_UPLOAD
}

func (x *RspUploadSlicesWrong) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspUploadSlicesWrong) GetSlices() []*SliceHashAddr {
	if x != nil {
		return x.Slices
	}
	return nil
}

type ReqBackupFileSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RspBackupFile *RspBackupStatus `protobuf:"bytes,1,opt,name=rsp_backup_file,json=rspBackupFile,proto3" json:"rsp_backup_file,omitempty"`
	SliceNumber   uint64           `protobuf:"varint,2,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	SliceHash     string           `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	Data          []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	PieceOffset   *SliceOffset     `protobuf:"bytes,5,opt,name=piece_offset,json=pieceOffset,proto3" json:"piece_offset,omitempty"`
	P2PAddress    string           `protobuf:"bytes,6,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string           `protobuf:"bytes,7,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ReqBackupFileSlice) Reset() {
	*x = ReqBackupFileSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBackupFileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBackupFileSlice) ProtoMessage() {}

func (x *ReqBackupFileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBackupFileSlice.ProtoReflect.Descriptor instead.
func (*ReqBackupFileSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{18}
}

func (x *ReqBackupFileSlice) GetRspBackupFile() *RspBackupStatus {
	if x != nil {
		return x.RspBackupFile
	}
	return nil
}

func (x *ReqBackupFileSlice) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *ReqBackupFileSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *ReqBackupFileSlice) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqBackupFileSlice) GetPieceOffset() *SliceOffset {
	if x != nil {
		return x.PieceOffset
	}
	return nil
}

func (x *ReqBackupFileSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqBackupFileSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspBackupFileSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        *Result        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Slice         *SliceHashAddr `protobuf:"bytes,2,opt,name=slice,proto3" json:"slice,omitempty"`
	FileHash      string         `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceHash     string         `protobuf:"bytes,4,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	P2PAddress    string         `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string         `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	SliceSize     uint64         `protobuf:"varint,7,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	TaskId        string         `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SpP2PAddress  string         `protobuf:"bytes,9,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
}

func (x *RspBackupFileSlice) Reset() {
	*x = RspBackupFileSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBackupFileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBackupFileSlice) ProtoMessage() {}

func (x *RspBackupFileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBackupFileSlice.ProtoReflect.Descriptor instead.
func (*RspBackupFileSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{19}
}

func (x *RspBackupFileSlice) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspBackupFileSlice) GetSlice() *SliceHashAddr {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *RspBackupFileSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspBackupFileSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *RspBackupFileSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspBackupFileSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspBackupFileSlice) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspBackupFileSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspBackupFileSlice) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

type UploadSpeedOfProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash      string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`     //
	SliceSize     uint64 `protobuf:"varint,2,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"` //
	SliceOffStart uint64 `protobuf:"varint,3,opt,name=slice_off_start,json=sliceOffStart,proto3" json:"slice_off_start,omitempty"`
	HandleTime    int64  `protobuf:"varint,4,opt,name=handle_time,json=handleTime,proto3" json:"handle_time,omitempty"`
}

func (x *UploadSpeedOfProgress) Reset() {
	*x = UploadSpeedOfProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSpeedOfProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSpeedOfProgress) ProtoMessage() {}

func (x *UploadSpeedOfProgress) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSpeedOfProgress.ProtoReflect.Descriptor instead.
func (*UploadSpeedOfProgress) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{20}
}

func (x *UploadSpeedOfProgress) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *UploadSpeedOfProgress) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *UploadSpeedOfProgress) GetSliceOffStart() uint64 {
	if x != nil {
		return x.SliceOffStart
	}
	return 0
}

func (x *UploadSpeedOfProgress) GetHandleTime() int64 {
	if x != nil {
		return x.HandleTime
	}
	return 0
}

type ReportUploadSliceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slice              *SliceHashAddr `protobuf:"bytes,1,opt,name=slice,proto3" json:"slice,omitempty"`                       //
	FileHash           string         `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"` //
	UploadSuccess      bool           `protobuf:"varint,3,opt,name=upload_success,json=uploadSuccess,proto3" json:"upload_success,omitempty"`
	IsPP               bool           `protobuf:"varint,4,opt,name=isPP,proto3" json:"isPP,omitempty"` //
	TaskId             string         `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	P2PAddress         string         `protobuf:"bytes,6,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress      string         `protobuf:"bytes,7,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	SpP2PAddress       string         `protobuf:"bytes,8,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	CostTime           int64          `protobuf:"varint,9,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	OpponentP2PAddress string         `protobuf:"bytes,10,opt,name=opponent_p2p_address,json=opponentP2pAddress,proto3" json:"opponent_p2p_address,omitempty"`
}

func (x *ReportUploadSliceResult) Reset() {
	*x = ReportUploadSliceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUploadSliceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUploadSliceResult) ProtoMessage() {}

func (x *ReportUploadSliceResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUploadSliceResult.ProtoReflect.Descriptor instead.
func (*ReportUploadSliceResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{21}
}

func (x *ReportUploadSliceResult) GetSlice() *SliceHashAddr {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *ReportUploadSliceResult) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReportUploadSliceResult) GetUploadSuccess() bool {
	if x != nil {
		return x.UploadSuccess
	}
	return false
}

func (x *ReportUploadSliceResult) GetIsPP() bool {
	if x != nil {
		return x.IsPP
	}
	return false
}

func (x *ReportUploadSliceResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReportUploadSliceResult) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReportUploadSliceResult) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReportUploadSliceResult) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *ReportUploadSliceResult) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *ReportUploadSliceResult) GetOpponentP2PAddress() string {
	if x != nil {
		return x.OpponentP2PAddress
	}
	return ""
}

type RspReportUploadSliceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Slice  *SliceHashAddr `protobuf:"bytes,2,opt,name=slice,proto3" json:"slice,omitempty"`
}

func (x *RspReportUploadSliceResult) Reset() {
	*x = RspReportUploadSliceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReportUploadSliceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReportUploadSliceResult) ProtoMessage() {}

func (x *RspReportUploadSliceResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReportUploadSliceResult.ProtoReflect.Descriptor instead.
func (*RspReportUploadSliceResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{22}
}

func (x *RspReportUploadSliceResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspReportUploadSliceResult) GetSlice() *SliceHashAddr {
	if x != nil {
		return x.Slice
	}
	return nil
}

type ReqFindMyFileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string       `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string       `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileName      string       `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"` // return all if file name is empty
	PageId        uint64       `protobuf:"varint,4,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	FileType      FileSortType `protobuf:"varint,5,opt,name=file_type,json=fileType,proto3,enum=protos.FileSortType" json:"file_type,omitempty"`
	IsUp          bool         `protobuf:"varint,6,opt,name=is_up,json=isUp,proto3" json:"is_up,omitempty"`
	Keyword       string       `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ReqFindMyFileList) Reset() {
	*x = ReqFindMyFileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindMyFileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindMyFileList) ProtoMessage() {}

func (x *ReqFindMyFileList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindMyFileList.ProtoReflect.Descriptor instead.
func (*ReqFindMyFileList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{23}
}

func (x *ReqFindMyFileList) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqFindMyFileList) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqFindMyFileList) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ReqFindMyFileList) GetPageId() uint64 {
	if x != nil {
		return x.PageId
	}
	return 0
}

func (x *ReqFindMyFileList) GetFileType() FileSortType {
	if x != nil {
		return x.FileType
	}
	return FileSortType_DEF
}

func (x *ReqFindMyFileList) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *ReqFindMyFileList) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type RspFindMyFileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo        []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	P2PAddress      string      `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress   string      `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	TotalFileNumber uint64      `protobuf:"varint,4,opt,name=total_file_number,json=totalFileNumber,proto3" json:"total_file_number,omitempty"`
	PageId          uint64      `protobuf:"varint,5,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Result          *Result     `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspFindMyFileList) Reset() {
	*x = RspFindMyFileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFindMyFileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFindMyFileList) ProtoMessage() {}

func (x *RspFindMyFileList) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFindMyFileList.ProtoReflect.Descriptor instead.
func (*RspFindMyFileList) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{24}
}

func (x *RspFindMyFileList) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *RspFindMyFileList) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFindMyFileList) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFindMyFileList) GetTotalFileNumber() uint64 {
	if x != nil {
		return x.TotalFileNumber
	}
	return 0
}

func (x *RspFindMyFileList) GetPageId() uint64 {
	if x != nil {
		return x.PageId
	}
	return 0
}

func (x *RspFindMyFileList) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqFileStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIndexes  *FileIndexes     `protobuf:"bytes,1,opt,name=file_indexes,json=fileIndexes,proto3" json:"file_indexes,omitempty"`
	WalletSign   []byte           `protobuf:"bytes,2,opt,name=wallet_sign,json=walletSign,proto3" json:"wallet_sign,omitempty"`
	WalletPubkey []byte           `protobuf:"bytes,3,opt,name=wallet_pubkey,json=walletPubkey,proto3" json:"wallet_pubkey,omitempty"`
	ShareRequest *ReqGetShareFile `protobuf:"bytes,4,opt,name=share_request,json=shareRequest,proto3" json:"share_request,omitempty"`
}

func (x *ReqFileStorageInfo) Reset() {
	*x = ReqFileStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFileStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFileStorageInfo) ProtoMessage() {}

func (x *ReqFileStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFileStorageInfo.ProtoReflect.Descriptor instead.
func (*ReqFileStorageInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{25}
}

func (x *ReqFileStorageInfo) GetFileIndexes() *FileIndexes {
	if x != nil {
		return x.FileIndexes
	}
	return nil
}

func (x *ReqFileStorageInfo) GetWalletSign() []byte {
	if x != nil {
		return x.WalletSign
	}
	return nil
}

func (x *ReqFileStorageInfo) GetWalletPubkey() []byte {
	if x != nil {
		return x.WalletPubkey
	}
	return nil
}

func (x *ReqFileStorageInfo) GetShareRequest() *ReqGetShareFile {
	if x != nil {
		return x.ShareRequest
	}
	return nil
}

type RspFileStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisitCer      string               `protobuf:"bytes,1,opt,name=visit_cer,json=visitCer,proto3" json:"visit_cer,omitempty"`
	P2PAddress    string               `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string               `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	SliceInfo     []*DownloadSliceInfo `protobuf:"bytes,4,rep,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
	FileHash      string               `protobuf:"bytes,5,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FileName      string               `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Result        *Result              `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	ReqId         string               `protobuf:"bytes,8,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	SavePath      string               `protobuf:"bytes,9,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	FileSize      uint64               `protobuf:"varint,10,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	RestAddress   string               `protobuf:"bytes,11,opt,name=rest_address,json=restAddress,proto3" json:"rest_address,omitempty"`
	NodeSign      []byte               `protobuf:"bytes,12,opt,name=node_sign,json=nodeSign,proto3" json:"node_sign,omitempty"` //sp signature
	SpP2PAddress  string               `protobuf:"bytes,13,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	EncryptionTag string               `protobuf:"bytes,14,opt,name=encryption_tag,json=encryptionTag,proto3" json:"encryption_tag,omitempty"`
	TaskId        string               `protobuf:"bytes,15,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TimeStamp     int64                `protobuf:"varint,16,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *RspFileStorageInfo) Reset() {
	*x = RspFileStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFileStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFileStorageInfo) ProtoMessage() {}

func (x *RspFileStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFileStorageInfo.ProtoReflect.Descriptor instead.
func (*RspFileStorageInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{26}
}

func (x *RspFileStorageInfo) GetVisitCer() string {
	if x != nil {
		return x.VisitCer
	}
	return ""
}

func (x *RspFileStorageInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspFileStorageInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspFileStorageInfo) GetSliceInfo() []*DownloadSliceInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *RspFileStorageInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspFileStorageInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *RspFileStorageInfo) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspFileStorageInfo) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RspFileStorageInfo) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *RspFileStorageInfo) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *RspFileStorageInfo) GetRestAddress() string {
	if x != nil {
		return x.RestAddress
	}
	return ""
}

func (x *RspFileStorageInfo) GetNodeSign() []byte {
	if x != nil {
		return x.NodeSign
	}
	return nil
}

func (x *RspFileStorageInfo) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspFileStorageInfo) GetEncryptionTag() string {
	if x != nil {
		return x.EncryptionTag
	}
	return ""
}

func (x *RspFileStorageInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspFileStorageInfo) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type ReqFileReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress         string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress      string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FilePath           string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	ReplicaIncreaseNum uint32 `protobuf:"varint,4,opt,name=replica_increase_num,json=replicaIncreaseNum,proto3" json:"replica_increase_num,omitempty"`
	WalletSign         []byte `protobuf:"bytes,5,opt,name=wallet_sign,json=walletSign,proto3" json:"wallet_sign,omitempty"`
	WalletPubkey       []byte `protobuf:"bytes,6,opt,name=wallet_pubkey,json=walletPubkey,proto3" json:"wallet_pubkey,omitempty"`
}

func (x *ReqFileReplicaInfo) Reset() {
	*x = ReqFileReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFileReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFileReplicaInfo) ProtoMessage() {}

func (x *ReqFileReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFileReplicaInfo.ProtoReflect.Descriptor instead.
func (*ReqFileReplicaInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{27}
}

func (x *ReqFileReplicaInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqFileReplicaInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqFileReplicaInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ReqFileReplicaInfo) GetReplicaIncreaseNum() uint32 {
	if x != nil {
		return x.ReplicaIncreaseNum
	}
	return 0
}

func (x *ReqFileReplicaInfo) GetWalletSign() []byte {
	if x != nil {
		return x.WalletSign
	}
	return nil
}

func (x *ReqFileReplicaInfo) GetWalletPubkey() []byte {
	if x != nil {
		return x.WalletPubkey
	}
	return nil
}

type RspFileReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	SpP2PAddress     string  `protobuf:"bytes,2,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	FileHash         string  `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Replicas         uint32  `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	ExpectedReplicas uint32  `protobuf:"varint,5,opt,name=expected_replicas,json=expectedReplicas,proto3" json:"expected_replicas,omitempty"`
}

func (x *RspFileReplicaInfo) Reset() {
	*x = RspFileReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFileReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFileReplicaInfo) ProtoMessage() {}

func (x *RspFileReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFileReplicaInfo.ProtoReflect.Descriptor instead.
func (*RspFileReplicaInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{28}
}

func (x *RspFileReplicaInfo) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspFileReplicaInfo) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspFileReplicaInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspFileReplicaInfo) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *RspFileReplicaInfo) GetExpectedReplicas() uint32 {
	if x != nil {
		return x.ExpectedReplicas
	}
	return 0
}

type ReqDownloadFileWrong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIndexes   *FileIndexes  `protobuf:"bytes,1,opt,name=file_indexes,json=fileIndexes,proto3" json:"file_indexes,omitempty"`
	FileHash      string        `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FailedSlices  []string      `protobuf:"bytes,3,rep,name=failed_slices,json=failedSlices,proto3" json:"failed_slices,omitempty"`
	FailedPpNodes []*PPBaseInfo `protobuf:"bytes,4,rep,name=failed_pp_nodes,json=failedPpNodes,proto3" json:"failed_pp_nodes,omitempty"`
}

func (x *ReqDownloadFileWrong) Reset() {
	*x = ReqDownloadFileWrong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadFileWrong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadFileWrong) ProtoMessage() {}

func (x *ReqDownloadFileWrong) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadFileWrong.ProtoReflect.Descriptor instead.
func (*ReqDownloadFileWrong) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{29}
}

func (x *ReqDownloadFileWrong) GetFileIndexes() *FileIndexes {
	if x != nil {
		return x.FileIndexes
	}
	return nil
}

func (x *ReqDownloadFileWrong) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqDownloadFileWrong) GetFailedSlices() []string {
	if x != nil {
		return x.FailedSlices
	}
	return nil
}

func (x *ReqDownloadFileWrong) GetFailedPpNodes() []*PPBaseInfo {
	if x != nil {
		return x.FailedPpNodes
	}
	return nil
}

type ReqDownloadSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RspFileStorageInfo *RspFileStorageInfo `protobuf:"bytes,1,opt,name=rsp_file_storage_info,json=rspFileStorageInfo,proto3" json:"rsp_file_storage_info,omitempty"`
	SliceNumber        uint64              `protobuf:"varint,2,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	P2PAddress         string              `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqDownloadSlice) Reset() {
	*x = ReqDownloadSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadSlice) ProtoMessage() {}

func (x *ReqDownloadSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadSlice.ProtoReflect.Descriptor instead.
func (*ReqDownloadSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{30}
}

func (x *ReqDownloadSlice) GetRspFileStorageInfo() *RspFileStorageInfo {
	if x != nil {
		return x.RspFileStorageInfo
	}
	return nil
}

func (x *ReqDownloadSlice) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *ReqDownloadSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspDownloadSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceInfo         *SliceOffsetInfo `protobuf:"bytes,1,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
	FileCrc           uint32           `protobuf:"varint,2,opt,name=file_crc,json=fileCrc,proto3" json:"file_crc,omitempty"`
	FileHash          string           `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Data              []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	P2PAddress        string           `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress     string           `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	TaskId            string           `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SliceSize         uint64           `protobuf:"varint,8,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"` // is the encrypted slice size if the file is encrypted
	RawSliceSize      uint64           `protobuf:"varint,9,opt,name=raw_slice_size,json=rawSliceSize,proto3" json:"raw_slice_size,omitempty"`
	NeedReport        bool             `protobuf:"varint,10,opt,name=needReport,proto3" json:"needReport,omitempty"` // used for passagePP whether the last slice
	SavePath          string           `protobuf:"bytes,11,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	Result            *Result          `protobuf:"bytes,12,opt,name=result,proto3" json:"result,omitempty"`
	IsEncrypted       bool             `protobuf:"varint,13,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
	SpP2PAddress      string           `protobuf:"bytes,14,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	IsVideoCaching    bool             `protobuf:"varint,15,opt,name=is_video_caching,json=isVideoCaching,proto3" json:"is_video_caching,omitempty"`
	StorageP2PAddress string           `protobuf:"bytes,16,opt,name=storage_p2p_address,json=storageP2pAddress,proto3" json:"storage_p2p_address,omitempty"`
	SliceNumber       uint64           `protobuf:"varint,17,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
}

func (x *RspDownloadSlice) Reset() {
	*x = RspDownloadSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDownloadSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDownloadSlice) ProtoMessage() {}

func (x *RspDownloadSlice) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDownloadSlice.ProtoReflect.Descriptor instead.
func (*RspDownloadSlice) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{31}
}

func (x *RspDownloadSlice) GetSliceInfo() *SliceOffsetInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *RspDownloadSlice) GetFileCrc() uint32 {
	if x != nil {
		return x.FileCrc
	}
	return 0
}

func (x *RspDownloadSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspDownloadSlice) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RspDownloadSlice) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDownloadSlice) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDownloadSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspDownloadSlice) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspDownloadSlice) GetRawSliceSize() uint64 {
	if x != nil {
		return x.RawSliceSize
	}
	return 0
}

func (x *RspDownloadSlice) GetNeedReport() bool {
	if x != nil {
		return x.NeedReport
	}
	return false
}

func (x *RspDownloadSlice) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *RspDownloadSlice) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspDownloadSlice) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *RspDownloadSlice) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspDownloadSlice) GetIsVideoCaching() bool {
	if x != nil {
		return x.IsVideoCaching
	}
	return false
}

func (x *RspDownloadSlice) GetStorageP2PAddress() string {
	if x != nil {
		return x.StorageP2PAddress
	}
	return ""
}

func (x *RspDownloadSlice) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

type ReqDownloadSlicePause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *ReqDownloadSlicePause) Reset() {
	*x = ReqDownloadSlicePause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadSlicePause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadSlicePause) ProtoMessage() {}

func (x *ReqDownloadSlicePause) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadSlicePause.ProtoReflect.Descriptor instead.
func (*ReqDownloadSlicePause) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{32}
}

func (x *ReqDownloadSlicePause) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDownloadSlicePause) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDownloadSlicePause) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

type RspDownloadSlicePause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string  `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDownloadSlicePause) Reset() {
	*x = RspDownloadSlicePause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDownloadSlicePause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDownloadSlicePause) ProtoMessage() {}

func (x *RspDownloadSlicePause) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDownloadSlicePause.ProtoReflect.Descriptor instead.
func (*RspDownloadSlicePause) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{33}
}

func (x *RspDownloadSlicePause) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDownloadSlicePause) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDownloadSlicePause) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspDownloadSlicePause) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqReportDownloadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPP                 bool               `protobuf:"varint,1,opt,name=isPP,proto3" json:"isPP,omitempty"`
	SliceInfo            *DownloadSliceInfo `protobuf:"bytes,2,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
	FileHash             string             `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	DownloaderP2PAddress string             `protobuf:"bytes,4,opt,name=downloader_p2p_address,json=downloaderP2pAddress,proto3" json:"downloader_p2p_address,omitempty"`
	WalletAddress        string             `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	PpP2PAddress         string             `protobuf:"bytes,6,opt,name=pp_p2p_address,json=ppP2pAddress,proto3" json:"pp_p2p_address,omitempty"`          // PP's P2P key address
	PpWalletAddress      string             `protobuf:"bytes,7,opt,name=pp_wallet_address,json=ppWalletAddress,proto3" json:"pp_wallet_address,omitempty"` // PP's wallet address
	TaskId               string             `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SpP2PAddress         string             `protobuf:"bytes,9,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	OpponentP2PAddress   string             `protobuf:"bytes,10,opt,name=opponent_p2p_address,json=opponentP2pAddress,proto3" json:"opponent_p2p_address,omitempty"`
	CostTime             int64              `protobuf:"varint,11,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
}

func (x *ReqReportDownloadResult) Reset() {
	*x = ReqReportDownloadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReportDownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReportDownloadResult) ProtoMessage() {}

func (x *ReqReportDownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReportDownloadResult.ProtoReflect.Descriptor instead.
func (*ReqReportDownloadResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{34}
}

func (x *ReqReportDownloadResult) GetIsPP() bool {
	if x != nil {
		return x.IsPP
	}
	return false
}

func (x *ReqReportDownloadResult) GetSliceInfo() *DownloadSliceInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

func (x *ReqReportDownloadResult) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqReportDownloadResult) GetDownloaderP2PAddress() string {
	if x != nil {
		return x.DownloaderP2PAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetPpP2PAddress() string {
	if x != nil {
		return x.PpP2PAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetPpWalletAddress() string {
	if x != nil {
		return x.PpWalletAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqReportDownloadResult) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetOpponentP2PAddress() string {
	if x != nil {
		return x.OpponentP2PAddress
	}
	return ""
}

func (x *ReqReportDownloadResult) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type RspReportDownloadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *Result            `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	SliceInfo *DownloadSliceInfo `protobuf:"bytes,2,opt,name=slice_info,json=sliceInfo,proto3" json:"slice_info,omitempty"`
}

func (x *RspReportDownloadResult) Reset() {
	*x = RspReportDownloadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReportDownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReportDownloadResult) ProtoMessage() {}

func (x *RspReportDownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReportDownloadResult.ProtoReflect.Descriptor instead.
func (*RspReportDownloadResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{35}
}

func (x *RspReportDownloadResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspReportDownloadResult) GetSliceInfo() *DownloadSliceInfo {
	if x != nil {
		return x.SliceInfo
	}
	return nil
}

type ReqReportTaskBP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId   string      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reporter *PPBaseInfo `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Traffic  uint64      `protobuf:"varint,3,opt,name=traffic,proto3" json:"traffic,omitempty"`
}

func (x *ReqReportTaskBP) Reset() {
	*x = ReqReportTaskBP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReportTaskBP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReportTaskBP) ProtoMessage() {}

func (x *ReqReportTaskBP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReportTaskBP.ProtoReflect.Descriptor instead.
func (*ReqReportTaskBP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{36}
}

func (x *ReqReportTaskBP) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqReportTaskBP) GetReporter() *PPBaseInfo {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *ReqReportTaskBP) GetTraffic() uint64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

type ReqRegisterNewPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress  string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	DiskSize       uint64 `protobuf:"varint,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	FreeDisk       uint64 `protobuf:"varint,4,opt,name=free_disk,json=freeDisk,proto3" json:"free_disk,omitempty"`
	MemorySize     uint64 `protobuf:"varint,5,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	OsAndVer       string `protobuf:"bytes,6,opt,name=os_and_ver,json=osAndVer,proto3" json:"os_and_ver,omitempty"`
	CpuInfo        string `protobuf:"bytes,7,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	MacAddress     string `protobuf:"bytes,8,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Version        uint32 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	PubKey         []byte `protobuf:"bytes,10,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	NetworkAddress string `protobuf:"bytes,11,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
}

func (x *ReqRegisterNewPP) Reset() {
	*x = ReqRegisterNewPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRegisterNewPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRegisterNewPP) ProtoMessage() {}

func (x *ReqRegisterNewPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRegisterNewPP.ProtoReflect.Descriptor instead.
func (*ReqRegisterNewPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{37}
}

func (x *ReqRegisterNewPP) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqRegisterNewPP) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqRegisterNewPP) GetDiskSize() uint64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *ReqRegisterNewPP) GetFreeDisk() uint64 {
	if x != nil {
		return x.FreeDisk
	}
	return 0
}

func (x *ReqRegisterNewPP) GetMemorySize() uint64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *ReqRegisterNewPP) GetOsAndVer() string {
	if x != nil {
		return x.OsAndVer
	}
	return ""
}

func (x *ReqRegisterNewPP) GetCpuInfo() string {
	if x != nil {
		return x.CpuInfo
	}
	return ""
}

func (x *ReqRegisterNewPP) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReqRegisterNewPP) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReqRegisterNewPP) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ReqRegisterNewPP) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

type RspRegisterNewPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	AlreadyPp bool    `protobuf:"varint,2,opt,name=already_pp,json=alreadyPp,proto3" json:"already_pp,omitempty"`
}

func (x *RspRegisterNewPP) Reset() {
	*x = RspRegisterNewPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRegisterNewPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRegisterNewPP) ProtoMessage() {}

func (x *RspRegisterNewPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRegisterNewPP.ProtoReflect.Descriptor instead.
func (*RspRegisterNewPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{38}
}

func (x *RspRegisterNewPP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspRegisterNewPP) GetAlreadyPp() bool {
	if x != nil {
		return x.AlreadyPp
	}
	return false
}

type ReqActivatePP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx             []byte      `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	PpInfo         *PPBaseInfo `protobuf:"bytes,2,opt,name=pp_info,json=ppInfo,proto3" json:"pp_info,omitempty"`
	AlreadyActive  bool        `protobuf:"varint,3,opt,name=already_active,json=alreadyActive,proto3" json:"already_active,omitempty"`
	InitialDeposit string      `protobuf:"bytes,4,opt,name=initial_deposit,json=initialDeposit,proto3" json:"initial_deposit,omitempty"`
}

func (x *ReqActivatePP) Reset() {
	*x = ReqActivatePP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqActivatePP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqActivatePP) ProtoMessage() {}

func (x *ReqActivatePP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqActivatePP.ProtoReflect.Descriptor instead.
func (*ReqActivatePP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{39}
}

func (x *ReqActivatePP) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ReqActivatePP) GetPpInfo() *PPBaseInfo {
	if x != nil {
		return x.PpInfo
	}
	return nil
}

func (x *ReqActivatePP) GetAlreadyActive() bool {
	if x != nil {
		return x.AlreadyActive
	}
	return false
}

func (x *ReqActivatePP) GetInitialDeposit() string {
	if x != nil {
		return x.InitialDeposit
	}
	return ""
}

type RspActivatePP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ActivationState uint32  `protobuf:"varint,2,opt,name=activation_state,json=activationState,proto3" json:"activation_state,omitempty"`
	Tx              []byte  `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *RspActivatePP) Reset() {
	*x = RspActivatePP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspActivatePP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspActivatePP) ProtoMessage() {}

func (x *RspActivatePP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspActivatePP.ProtoReflect.Descriptor instead.
func (*RspActivatePP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{40}
}

func (x *RspActivatePP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspActivatePP) GetActivationState() uint32 {
	if x != nil {
		return x.ActivationState
	}
	return 0
}

func (x *RspActivatePP) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ReqUpdateDepositPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx         []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	P2PAddress string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqUpdateDepositPP) Reset() {
	*x = ReqUpdateDepositPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateDepositPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateDepositPP) ProtoMessage() {}

func (x *ReqUpdateDepositPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateDepositPP.ProtoReflect.Descriptor instead.
func (*ReqUpdateDepositPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{41}
}

func (x *ReqUpdateDepositPP) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ReqUpdateDepositPP) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspUpdateDepositPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	UpdateState uint32  `protobuf:"varint,2,opt,name=update_state,json=updateState,proto3" json:"update_state,omitempty"`
	Tx          []byte  `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *RspUpdateDepositPP) Reset() {
	*x = RspUpdateDepositPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUpdateDepositPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUpdateDepositPP) ProtoMessage() {}

func (x *RspUpdateDepositPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUpdateDepositPP.ProtoReflect.Descriptor instead.
func (*RspUpdateDepositPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{42}
}

func (x *RspUpdateDepositPP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspUpdateDepositPP) GetUpdateState() uint32 {
	if x != nil {
		return x.UpdateState
	}
	return 0
}

func (x *RspUpdateDepositPP) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

type NoticeUpdatedDepositPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	DepositBalance string  `protobuf:"bytes,2,opt,name=deposit_balance,json=depositBalance,proto3" json:"deposit_balance,omitempty"`
	NodeTier       string  `protobuf:"bytes,3,opt,name=node_tier,json=nodeTier,proto3" json:"node_tier,omitempty"`
	WeightScore    string  `protobuf:"bytes,4,opt,name=weight_score,json=weightScore,proto3" json:"weight_score,omitempty"`
}

func (x *NoticeUpdatedDepositPP) Reset() {
	*x = NoticeUpdatedDepositPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeUpdatedDepositPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeUpdatedDepositPP) ProtoMessage() {}

func (x *NoticeUpdatedDepositPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeUpdatedDepositPP.ProtoReflect.Descriptor instead.
func (*NoticeUpdatedDepositPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{43}
}

func (x *NoticeUpdatedDepositPP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *NoticeUpdatedDepositPP) GetDepositBalance() string {
	if x != nil {
		return x.DepositBalance
	}
	return ""
}

func (x *NoticeUpdatedDepositPP) GetNodeTier() string {
	if x != nil {
		return x.NodeTier
	}
	return ""
}

func (x *NoticeUpdatedDepositPP) GetWeightScore() string {
	if x != nil {
		return x.WeightScore
	}
	return ""
}

type ReqStateChangePP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqStateChangePP) Reset() {
	*x = ReqStateChangePP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStateChangePP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStateChangePP) ProtoMessage() {}

func (x *ReqStateChangePP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStateChangePP.ProtoReflect.Descriptor instead.
func (*ReqStateChangePP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{44}
}

func (x *ReqStateChangePP) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspStateChangePP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	UpdateState uint32  `protobuf:"varint,2,opt,name=update_state,json=updateState,proto3" json:"update_state,omitempty"`
}

func (x *RspStateChangePP) Reset() {
	*x = RspStateChangePP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspStateChangePP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspStateChangePP) ProtoMessage() {}

func (x *RspStateChangePP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspStateChangePP.ProtoReflect.Descriptor instead.
func (*RspStateChangePP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{45}
}

func (x *RspStateChangePP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspStateChangePP) GetUpdateState() uint32 {
	if x != nil {
		return x.UpdateState
	}
	return 0
}

type ReqDeactivatePP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx         []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	P2PAddress string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqDeactivatePP) Reset() {
	*x = ReqDeactivatePP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeactivatePP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeactivatePP) ProtoMessage() {}

func (x *ReqDeactivatePP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeactivatePP.ProtoReflect.Descriptor instead.
func (*ReqDeactivatePP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{46}
}

func (x *ReqDeactivatePP) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ReqDeactivatePP) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspDeactivatePP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ActivationState uint32  `protobuf:"varint,2,opt,name=activation_state,json=activationState,proto3" json:"activation_state,omitempty"`
	Tx              []byte  `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *RspDeactivatePP) Reset() {
	*x = RspDeactivatePP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeactivatePP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeactivatePP) ProtoMessage() {}

func (x *RspDeactivatePP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeactivatePP.ProtoReflect.Descriptor instead.
func (*RspDeactivatePP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{47}
}

func (x *RspDeactivatePP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspDeactivatePP) GetActivationState() uint32 {
	if x != nil {
		return x.ActivationState
	}
	return 0
}

func (x *RspDeactivatePP) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

type NoticeUnbondingPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NoticeUnbondingPP) Reset() {
	*x = NoticeUnbondingPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeUnbondingPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeUnbondingPP) ProtoMessage() {}

func (x *NoticeUnbondingPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeUnbondingPP.ProtoReflect.Descriptor instead.
func (*NoticeUnbondingPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{48}
}

func (x *NoticeUnbondingPP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type NoticeDeactivatedPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NoticeDeactivatedPP) Reset() {
	*x = NoticeDeactivatedPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeDeactivatedPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeDeactivatedPP) ProtoMessage() {}

func (x *NoticeDeactivatedPP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeDeactivatedPP.ProtoReflect.Descriptor instead.
func (*NoticeDeactivatedPP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{49}
}

func (x *NoticeDeactivatedPP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type RspUnbondingSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspUnbondingSP) Reset() {
	*x = RspUnbondingSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUnbondingSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUnbondingSP) ProtoMessage() {}

func (x *RspUnbondingSP) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUnbondingSP.ProtoReflect.Descriptor instead.
func (*RspUnbondingSP) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{50}
}

func (x *RspUnbondingSP) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqPrepay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx            []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ReqPrepay) Reset() {
	*x = ReqPrepay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPrepay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPrepay) ProtoMessage() {}

func (x *ReqPrepay) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPrepay.ProtoReflect.Descriptor instead.
func (*ReqPrepay) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{51}
}

func (x *ReqPrepay) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ReqPrepay) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqPrepay) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspPrepay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Tx     []byte  `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *RspPrepay) Reset() {
	*x = RspPrepay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPrepay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPrepay) ProtoMessage() {}

func (x *RspPrepay) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPrepay.ProtoReflect.Descriptor instead.
func (*RspPrepay) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{52}
}

func (x *RspPrepay) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspPrepay) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ReqDeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *ReqDeleteFile) Reset() {
	*x = ReqDeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteFile) ProtoMessage() {}

func (x *ReqDeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteFile.ProtoReflect.Descriptor instead.
func (*ReqDeleteFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{53}
}

func (x *ReqDeleteFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDeleteFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqDeleteFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

type RspDeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string  `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string  `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDeleteFile) Reset() {
	*x = RspDeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteFile) ProtoMessage() {}

func (x *RspDeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteFile.ProtoReflect.Descriptor instead.
func (*RspDeleteFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{54}
}

func (x *RspDeleteFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDeleteFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDeleteFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspDeleteFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// the message that is sent to the pp which will pull the
// slice from another pp which stores the file slice
type NoticeFileSliceBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string            `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FileHash         string            `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceStorageInfo *SliceStorageInfo `protobuf:"bytes,3,opt,name=slice_storage_info,json=sliceStorageInfo,proto3" json:"slice_storage_info,omitempty"`
	SliceNumber      uint64            `protobuf:"varint,4,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	PpInfo           *PPBaseInfo       `protobuf:"bytes,5,opt,name=pp_info,json=ppInfo,proto3" json:"pp_info,omitempty"` // p2p which stores the file slice
	SpP2PAddress     string            `protobuf:"bytes,6,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	DeleteOrigin     bool              `protobuf:"varint,7,opt,name=delete_origin,json=deleteOrigin,proto3" json:"delete_origin,omitempty"`
	NodeSign         []byte            `protobuf:"bytes,8,opt,name=node_sign,json=nodeSign,proto3" json:"node_sign,omitempty"`
	Pubkey           []byte            `protobuf:"bytes,9,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	ToP2PAddress     string            `protobuf:"bytes,10,opt,name=to_p2p_address,json=toP2pAddress,proto3" json:"to_p2p_address,omitempty"`
	TimeStamp        int64             `protobuf:"varint,11,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *NoticeFileSliceBackup) Reset() {
	*x = NoticeFileSliceBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeFileSliceBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeFileSliceBackup) ProtoMessage() {}

func (x *NoticeFileSliceBackup) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeFileSliceBackup.ProtoReflect.Descriptor instead.
func (*NoticeFileSliceBackup) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{55}
}

func (x *NoticeFileSliceBackup) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *NoticeFileSliceBackup) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *NoticeFileSliceBackup) GetSliceStorageInfo() *SliceStorageInfo {
	if x != nil {
		return x.SliceStorageInfo
	}
	return nil
}

func (x *NoticeFileSliceBackup) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *NoticeFileSliceBackup) GetPpInfo() *PPBaseInfo {
	if x != nil {
		return x.PpInfo
	}
	return nil
}

func (x *NoticeFileSliceBackup) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *NoticeFileSliceBackup) GetDeleteOrigin() bool {
	if x != nil {
		return x.DeleteOrigin
	}
	return false
}

func (x *NoticeFileSliceBackup) GetNodeSign() []byte {
	if x != nil {
		return x.NodeSign
	}
	return nil
}

func (x *NoticeFileSliceBackup) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *NoticeFileSliceBackup) GetToP2PAddress() string {
	if x != nil {
		return x.ToP2PAddress
	}
	return ""
}

func (x *NoticeFileSliceBackup) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// the message that is sent back to sp from both the slice sender pp
// and the slice receiver pp
type ReqReportBackupSliceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             string      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FileHash           string      `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceHash          string      `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	BackupSuccess      bool        `protobuf:"varint,4,opt,name=backup_success,json=backupSuccess,proto3" json:"backup_success,omitempty"`
	IsReceiver         bool        `protobuf:"varint,5,opt,name=is_receiver,json=isReceiver,proto3" json:"is_receiver,omitempty"`
	OriginDeleted      bool        `protobuf:"varint,6,opt,name=origin_deleted,json=originDeleted,proto3" json:"origin_deleted,omitempty"`
	SliceNumber        uint64      `protobuf:"varint,7,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	SliceSize          uint64      `protobuf:"varint,8,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	PpInfo             *PPBaseInfo `protobuf:"bytes,9,opt,name=pp_info,json=ppInfo,proto3" json:"pp_info,omitempty"`
	SpP2PAddress       string      `protobuf:"bytes,10,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	CostTime           int64       `protobuf:"varint,11,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	PpP2PAddress       string      `protobuf:"bytes,12,opt,name=pp_p2p_address,json=ppP2pAddress,proto3" json:"pp_p2p_address,omitempty"`
	OpponentP2PAddress string      `protobuf:"bytes,13,opt,name=opponent_p2p_address,json=opponentP2pAddress,proto3" json:"opponent_p2p_address,omitempty"`
	P2PAddress         string      `protobuf:"bytes,14,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqReportBackupSliceResult) Reset() {
	*x = ReqReportBackupSliceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReportBackupSliceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReportBackupSliceResult) ProtoMessage() {}

func (x *ReqReportBackupSliceResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReportBackupSliceResult.ProtoReflect.Descriptor instead.
func (*ReqReportBackupSliceResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{56}
}

func (x *ReqReportBackupSliceResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqReportBackupSliceResult) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqReportBackupSliceResult) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *ReqReportBackupSliceResult) GetBackupSuccess() bool {
	if x != nil {
		return x.BackupSuccess
	}
	return false
}

func (x *ReqReportBackupSliceResult) GetIsReceiver() bool {
	if x != nil {
		return x.IsReceiver
	}
	return false
}

func (x *ReqReportBackupSliceResult) GetOriginDeleted() bool {
	if x != nil {
		return x.OriginDeleted
	}
	return false
}

func (x *ReqReportBackupSliceResult) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *ReqReportBackupSliceResult) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *ReqReportBackupSliceResult) GetPpInfo() *PPBaseInfo {
	if x != nil {
		return x.PpInfo
	}
	return nil
}

func (x *ReqReportBackupSliceResult) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *ReqReportBackupSliceResult) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *ReqReportBackupSliceResult) GetPpP2PAddress() string {
	if x != nil {
		return x.PpP2PAddress
	}
	return ""
}

func (x *ReqReportBackupSliceResult) GetOpponentP2PAddress() string {
	if x != nil {
		return x.OpponentP2PAddress
	}
	return ""
}

func (x *ReqReportBackupSliceResult) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspReportBackupSliceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId    string  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Result    *Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	SliceHash string  `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
}

func (x *RspReportBackupSliceResult) Reset() {
	*x = RspReportBackupSliceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReportBackupSliceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReportBackupSliceResult) ProtoMessage() {}

func (x *RspReportBackupSliceResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReportBackupSliceResult.ProtoReflect.Descriptor instead.
func (*RspReportBackupSliceResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{57}
}

func (x *RspReportBackupSliceResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspReportBackupSliceResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspReportBackupSliceResult) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

type ReqBackupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId   string      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FileHash string      `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Address  *PPBaseInfo `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ReqBackupStatus) Reset() {
	*x = ReqBackupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBackupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBackupStatus) ProtoMessage() {}

func (x *ReqBackupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBackupStatus.ProtoReflect.Descriptor instead.
func (*ReqBackupStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{58}
}

func (x *ReqBackupStatus) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqBackupStatus) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqBackupStatus) GetAddress() *PPBaseInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

type RspBackupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          string           `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Result          *Result          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	FileHash        string           `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Replicas        uint32           `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	DeleteOriginTmp bool             `protobuf:"varint,5,opt,name=delete_origin_tmp,json=deleteOriginTmp,proto3" json:"delete_origin_tmp,omitempty"`
	SpP2PAddress    string           `protobuf:"bytes,6,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	Slices          []*SliceHashAddr `protobuf:"bytes,7,rep,name=slices,proto3" json:"slices,omitempty"`
	NodeSign        []byte           `protobuf:"bytes,8,opt,name=node_sign,json=nodeSign,proto3" json:"node_sign,omitempty"`
	TimeStamp       int64            `protobuf:"varint,9,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *RspBackupStatus) Reset() {
	*x = RspBackupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBackupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBackupStatus) ProtoMessage() {}

func (x *RspBackupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBackupStatus.ProtoReflect.Descriptor instead.
func (*RspBackupStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{59}
}

func (x *RspBackupStatus) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspBackupStatus) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspBackupStatus) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *RspBackupStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *RspBackupStatus) GetDeleteOriginTmp() bool {
	if x != nil {
		return x.DeleteOriginTmp
	}
	return false
}

func (x *RspBackupStatus) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspBackupStatus) GetSlices() []*SliceHashAddr {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *RspBackupStatus) GetNodeSign() []byte {
	if x != nil {
		return x.NodeSign
	}
	return nil
}

func (x *RspBackupStatus) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type ReqTransferDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeFileSliceBackup *NoticeFileSliceBackup `protobuf:"bytes,1,opt,name=notice_file_slice_backup,json=noticeFileSliceBackup,proto3" json:"notice_file_slice_backup,omitempty"`
	NewPp                 *PPBaseInfo            `protobuf:"bytes,2,opt,name=new_pp,json=newPp,proto3" json:"new_pp,omitempty"`
	P2PAddress            string                 `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqTransferDownload) Reset() {
	*x = ReqTransferDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTransferDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTransferDownload) ProtoMessage() {}

func (x *ReqTransferDownload) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTransferDownload.ProtoReflect.Descriptor instead.
func (*ReqTransferDownload) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{60}
}

func (x *ReqTransferDownload) GetNoticeFileSliceBackup() *NoticeFileSliceBackup {
	if x != nil {
		return x.NoticeFileSliceBackup
	}
	return nil
}

func (x *ReqTransferDownload) GetNewPp() *PPBaseInfo {
	if x != nil {
		return x.NewPp
	}
	return nil
}

func (x *ReqTransferDownload) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspTransferDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Data         []byte  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Offset       uint64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	SliceSize    uint64  `protobuf:"varint,4,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	Result       *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	SpP2PAddress string  `protobuf:"bytes,6,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	SliceHash    string  `protobuf:"bytes,7,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	P2PAddress   string  `protobuf:"bytes,8,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *RspTransferDownload) Reset() {
	*x = RspTransferDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransferDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransferDownload) ProtoMessage() {}

func (x *RspTransferDownload) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransferDownload.ProtoReflect.Descriptor instead.
func (*RspTransferDownload) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{61}
}

func (x *RspTransferDownload) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspTransferDownload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RspTransferDownload) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RspTransferDownload) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspTransferDownload) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspTransferDownload) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspTransferDownload) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *RspTransferDownload) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type RspTransferDownloadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Result       *Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	SpP2PAddress string  `protobuf:"bytes,3,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	SliceHash    string  `protobuf:"bytes,4,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
}

func (x *RspTransferDownloadResult) Reset() {
	*x = RspTransferDownloadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransferDownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransferDownloadResult) ProtoMessage() {}

func (x *RspTransferDownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransferDownloadResult.ProtoReflect.Descriptor instead.
func (*RspTransferDownloadResult) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{62}
}

func (x *RspTransferDownloadResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspTransferDownloadResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspTransferDownloadResult) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspTransferDownloadResult) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

type ReqTransferDownloadWrong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string            `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NewPp            *PPBaseInfo       `protobuf:"bytes,2,opt,name=new_pp,json=newPp,proto3" json:"new_pp,omitempty"`
	OriginalPp       *PPBaseInfo       `protobuf:"bytes,3,opt,name=original_pp,json=originalPp,proto3" json:"original_pp,omitempty"`
	SliceStorageInfo *SliceStorageInfo `protobuf:"bytes,4,opt,name=slice_storage_info,json=sliceStorageInfo,proto3" json:"slice_storage_info,omitempty"`
	FileHash         string            `protobuf:"bytes,5,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SpP2PAddress     string            `protobuf:"bytes,6,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
}

func (x *ReqTransferDownloadWrong) Reset() {
	*x = ReqTransferDownloadWrong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTransferDownloadWrong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTransferDownloadWrong) ProtoMessage() {}

func (x *ReqTransferDownloadWrong) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTransferDownloadWrong.ProtoReflect.Descriptor instead.
func (*ReqTransferDownloadWrong) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{63}
}

func (x *ReqTransferDownloadWrong) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqTransferDownloadWrong) GetNewPp() *PPBaseInfo {
	if x != nil {
		return x.NewPp
	}
	return nil
}

func (x *ReqTransferDownloadWrong) GetOriginalPp() *PPBaseInfo {
	if x != nil {
		return x.OriginalPp
	}
	return nil
}

func (x *ReqTransferDownloadWrong) GetSliceStorageInfo() *SliceStorageInfo {
	if x != nil {
		return x.SliceStorageInfo
	}
	return nil
}

func (x *ReqTransferDownloadWrong) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqTransferDownloadWrong) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

// sp - pp get storage info
type ReqGetHDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ReqGetHDInfo) Reset() {
	*x = ReqGetHDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetHDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetHDInfo) ProtoMessage() {}

func (x *ReqGetHDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetHDInfo.ProtoReflect.Descriptor instead.
func (*ReqGetHDInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{64}
}

func (x *ReqGetHDInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqGetHDInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspGetHDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskSize      int64  `protobuf:"varint,1,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	DiskFree      int64  `protobuf:"varint,2,opt,name=disk_free,json=diskFree,proto3" json:"disk_free,omitempty"`
	P2PAddress    string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *RspGetHDInfo) Reset() {
	*x = RspGetHDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetHDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetHDInfo) ProtoMessage() {}

func (x *RspGetHDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetHDInfo.ProtoReflect.Descriptor instead.
func (*RspGetHDInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{65}
}

func (x *RspGetHDInfo) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *RspGetHDInfo) GetDiskFree() int64 {
	if x != nil {
		return x.DiskFree
	}
	return 0
}

func (x *RspGetHDInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspGetHDInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type ReqSpLatencyCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddressPp     string `protobuf:"bytes,2,opt,name=p2p_address_pp,json=p2pAddressPp,proto3" json:"p2p_address_pp,omitempty"`
	NetworkAddressSp string `protobuf:"bytes,3,opt,name=network_address_sp,json=networkAddressSp,proto3" json:"network_address_sp,omitempty"`
	SpIndex          string `protobuf:"bytes,4,opt,name=sp_index,json=spIndex,proto3" json:"sp_index,omitempty"`
}

func (x *ReqSpLatencyCheck) Reset() {
	*x = ReqSpLatencyCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSpLatencyCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSpLatencyCheck) ProtoMessage() {}

func (x *ReqSpLatencyCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSpLatencyCheck.ProtoReflect.Descriptor instead.
func (*ReqSpLatencyCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{66}
}

func (x *ReqSpLatencyCheck) GetP2PAddressPp() string {
	if x != nil {
		return x.P2PAddressPp
	}
	return ""
}

func (x *ReqSpLatencyCheck) GetNetworkAddressSp() string {
	if x != nil {
		return x.NetworkAddressSp
	}
	return ""
}

func (x *ReqSpLatencyCheck) GetSpIndex() string {
	if x != nil {
		return x.SpIndex
	}
	return ""
}

type RspSpLatencyCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddressPp     string `protobuf:"bytes,2,opt,name=p2p_address_pp,json=p2pAddressPp,proto3" json:"p2p_address_pp,omitempty"`
	NetworkAddressSp string `protobuf:"bytes,3,opt,name=network_address_sp,json=networkAddressSp,proto3" json:"network_address_sp,omitempty"`
	SpIndex          string `protobuf:"bytes,4,opt,name=sp_index,json=spIndex,proto3" json:"sp_index,omitempty"`
}

func (x *RspSpLatencyCheck) Reset() {
	*x = RspSpLatencyCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSpLatencyCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSpLatencyCheck) ProtoMessage() {}

func (x *RspSpLatencyCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSpLatencyCheck.ProtoReflect.Descriptor instead.
func (*RspSpLatencyCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{67}
}

func (x *RspSpLatencyCheck) GetP2PAddressPp() string {
	if x != nil {
		return x.P2PAddressPp
	}
	return ""
}

func (x *RspSpLatencyCheck) GetNetworkAddressSp() string {
	if x != nil {
		return x.NetworkAddressSp
	}
	return ""
}

func (x *RspSpLatencyCheck) GetSpIndex() string {
	if x != nil {
		return x.SpIndex
	}
	return ""
}

type ReqPpLatencyCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddressPp     string `protobuf:"bytes,2,opt,name=p2p_address_pp,json=p2pAddressPp,proto3" json:"p2p_address_pp,omitempty"`
	NetworkAddressSp string `protobuf:"bytes,3,opt,name=network_address_sp,json=networkAddressSp,proto3" json:"network_address_sp,omitempty"`
	SpIndex          string `protobuf:"bytes,4,opt,name=sp_index,json=spIndex,proto3" json:"sp_index,omitempty"`
}

func (x *ReqPpLatencyCheck) Reset() {
	*x = ReqPpLatencyCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPpLatencyCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPpLatencyCheck) ProtoMessage() {}

func (x *ReqPpLatencyCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPpLatencyCheck.ProtoReflect.Descriptor instead.
func (*ReqPpLatencyCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{68}
}

func (x *ReqPpLatencyCheck) GetP2PAddressPp() string {
	if x != nil {
		return x.P2PAddressPp
	}
	return ""
}

func (x *ReqPpLatencyCheck) GetNetworkAddressSp() string {
	if x != nil {
		return x.NetworkAddressSp
	}
	return ""
}

func (x *ReqPpLatencyCheck) GetSpIndex() string {
	if x != nil {
		return x.SpIndex
	}
	return ""
}

type RspPpLatencyCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddressPp     string `protobuf:"bytes,2,opt,name=p2p_address_pp,json=p2pAddressPp,proto3" json:"p2p_address_pp,omitempty"`
	NetworkAddressSp string `protobuf:"bytes,3,opt,name=network_address_sp,json=networkAddressSp,proto3" json:"network_address_sp,omitempty"`
	SpIndex          string `protobuf:"bytes,4,opt,name=sp_index,json=spIndex,proto3" json:"sp_index,omitempty"`
}

func (x *RspPpLatencyCheck) Reset() {
	*x = RspPpLatencyCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPpLatencyCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPpLatencyCheck) ProtoMessage() {}

func (x *RspPpLatencyCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPpLatencyCheck.ProtoReflect.Descriptor instead.
func (*RspPpLatencyCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{69}
}

func (x *RspPpLatencyCheck) GetP2PAddressPp() string {
	if x != nil {
		return x.P2PAddressPp
	}
	return ""
}

func (x *RspPpLatencyCheck) GetNetworkAddressSp() string {
	if x != nil {
		return x.NetworkAddressSp
	}
	return ""
}

func (x *RspPpLatencyCheck) GetSpIndex() string {
	if x != nil {
		return x.SpIndex
	}
	return ""
}

type ReqSpStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetP2PAddress    string `protobuf:"bytes,1,opt,name=target_p2p_address,json=targetP2pAddress,proto3" json:"target_p2p_address,omitempty"`
	RequesterP2PAddress string `protobuf:"bytes,2,opt,name=requester_p2p_address,json=requesterP2pAddress,proto3" json:"requester_p2p_address,omitempty"`
}

func (x *ReqSpStatus) Reset() {
	*x = ReqSpStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSpStatus) ProtoMessage() {}

func (x *ReqSpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSpStatus.ProtoReflect.Descriptor instead.
func (*ReqSpStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{70}
}

func (x *ReqSpStatus) GetTargetP2PAddress() string {
	if x != nil {
		return x.TargetP2PAddress
	}
	return ""
}

func (x *ReqSpStatus) GetRequesterP2PAddress() string {
	if x != nil {
		return x.RequesterP2PAddress
	}
	return ""
}

type RspSpStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetP2PAddress    string `protobuf:"bytes,1,opt,name=target_p2p_address,json=targetP2pAddress,proto3" json:"target_p2p_address,omitempty"`
	RequesterP2PAddress string `protobuf:"bytes,2,opt,name=requester_p2p_address,json=requesterP2pAddress,proto3" json:"requester_p2p_address,omitempty"`
	ActivationState     uint32 `protobuf:"varint,3,opt,name=activation_state,json=activationState,proto3" json:"activation_state,omitempty"`
	ConnectionCount     uint64 `protobuf:"varint,4,opt,name=connection_count,json=connectionCount,proto3" json:"connection_count,omitempty"`
	OnlinePpCount       uint64 `protobuf:"varint,5,opt,name=online_pp_count,json=onlinePpCount,proto3" json:"online_pp_count,omitempty"`
}

func (x *RspSpStatus) Reset() {
	*x = RspSpStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSpStatus) ProtoMessage() {}

func (x *RspSpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSpStatus.ProtoReflect.Descriptor instead.
func (*RspSpStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{71}
}

func (x *RspSpStatus) GetTargetP2PAddress() string {
	if x != nil {
		return x.TargetP2PAddress
	}
	return ""
}

func (x *RspSpStatus) GetRequesterP2PAddress() string {
	if x != nil {
		return x.RequesterP2PAddress
	}
	return ""
}

func (x *RspSpStatus) GetActivationState() uint32 {
	if x != nil {
		return x.ActivationState
	}
	return 0
}

func (x *RspSpStatus) GetConnectionCount() uint64 {
	if x != nil {
		return x.ConnectionCount
	}
	return 0
}

func (x *RspSpStatus) GetOnlinePpCount() uint64 {
	if x != nil {
		return x.OnlinePpCount
	}
	return 0
}

// get bp BLS public key
type ReqBLSPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBLSPublicKey) Reset() {
	*x = ReqBLSPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBLSPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBLSPublicKey) ProtoMessage() {}

func (x *ReqBLSPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBLSPublicKey.ProtoReflect.Descriptor instead.
func (*ReqBLSPublicKey) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{72}
}

func (x *ReqBLSPublicKey) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReqBLSPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspBPBLSPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpInfo *ReqRegister `protobuf:"bytes,1,opt,name=bp_info,json=bpInfo,proto3" json:"bp_info,omitempty"`
	Code   int64        `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id     string       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBPBLSPublicKey) Reset() {
	*x = RspBPBLSPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBPBLSPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBPBLSPublicKey) ProtoMessage() {}

func (x *RspBPBLSPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBPBLSPublicKey.ProtoReflect.Descriptor instead.
func (*RspBPBLSPublicKey) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{73}
}

func (x *RspBPBLSPublicKey) GetBpInfo() *ReqRegister {
	if x != nil {
		return x.BpInfo
	}
	return nil
}

func (x *RspBPBLSPublicKey) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBPBLSPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBalance) Reset() {
	*x = ReqBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBalance) ProtoMessage() {}

func (x *ReqBalance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBalance.ProtoReflect.Descriptor instead.
func (*ReqBalance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{74}
}

func (x *ReqBalance) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqBalance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance float32 `protobuf:"fixed32,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Code    int64   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id      string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBalance) Reset() {
	*x = RspBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBalance) ProtoMessage() {}

func (x *RspBalance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBalance.ProtoReflect.Descriptor instead.
func (*RspBalance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{75}
}

func (x *RspBalance) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RspBalance) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBalance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Code            int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id              string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqTransaction) Reset() {
	*x = ReqTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTransaction) ProtoMessage() {}

func (x *ReqTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTransaction.ProtoReflect.Descriptor instead.
func (*ReqTransaction) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{76}
}

func (x *ReqTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *ReqTransaction) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReqTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rest string `protobuf:"bytes,1,opt,name=rest,proto3" json:"rest,omitempty"`
	Code int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspTransaction) Reset() {
	*x = RspTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransaction) ProtoMessage() {}

func (x *RspTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransaction.ProtoReflect.Descriptor instead.
func (*RspTransaction) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{77}
}

func (x *RspTransaction) GetRest() string {
	if x != nil {
		return x.Rest
	}
	return ""
}

func (x *RspTransaction) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBlockInfo) Reset() {
	*x = ReqBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockInfo) ProtoMessage() {}

func (x *ReqBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockInfo.ProtoReflect.Descriptor instead.
func (*ReqBlockInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{78}
}

func (x *ReqBlockInfo) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ReqBlockInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockInfo []byte `protobuf:"bytes,1,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	Code      int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBlockInfo) Reset() {
	*x = RspBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBlockInfo) ProtoMessage() {}

func (x *RspBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBlockInfo.ProtoReflect.Descriptor instead.
func (*RspBlockInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{79}
}

func (x *RspBlockInfo) GetBlockInfo() []byte {
	if x != nil {
		return x.BlockInfo
	}
	return nil
}

func (x *RspBlockInfo) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBlockInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqBlockCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqBlockCheck) Reset() {
	*x = ReqBlockCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBlockCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBlockCheck) ProtoMessage() {}

func (x *ReqBlockCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBlockCheck.ProtoReflect.Descriptor instead.
func (*ReqBlockCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{80}
}

func (x *ReqBlockCheck) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ReqBlockCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspBlockCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockList []*BlockCheckInfo `protobuf:"bytes,1,rep,name=block_list,json=blockList,proto3" json:"block_list,omitempty"`
	Code      int64             `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id        string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspBlockCheck) Reset() {
	*x = RspBlockCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBlockCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBlockCheck) ProtoMessage() {}

func (x *RspBlockCheck) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBlockCheck.ProtoReflect.Descriptor instead.
func (*RspBlockCheck) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{81}
}

func (x *RspBlockCheck) GetBlockList() []*BlockCheckInfo {
	if x != nil {
		return x.BlockList
	}
	return nil
}

func (x *RspBlockCheck) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspBlockCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BlockCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash   string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlockCheckInfo) Reset() {
	*x = BlockCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCheckInfo) ProtoMessage() {}

func (x *BlockCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCheckInfo.ProtoReflect.Descriptor instead.
func (*BlockCheckInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{82}
}

func (x *BlockCheckInfo) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockCheckInfo) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockCheckInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqDownloadTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqDownloadTaskInfo) Reset() {
	*x = ReqDownloadTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDownloadTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDownloadTaskInfo) ProtoMessage() {}

func (x *ReqDownloadTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDownloadTaskInfo.ProtoReflect.Descriptor instead.
func (*ReqDownloadTaskInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{83}
}

func (x *ReqDownloadTaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReqDownloadTaskInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RspDownloadTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId            string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SliceSize         uint64   `protobuf:"varint,2,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	SliceHash         string   `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	SliceNumber       uint64   `protobuf:"varint,4,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	StorageP2PAddress string   `protobuf:"bytes,5,opt,name=storage_p2p_address,json=storageP2pAddress,proto3" json:"storage_p2p_address,omitempty"`
	P2PAddressList    []string `protobuf:"bytes,6,rep,name=p2p_address_list,json=p2pAddressList,proto3" json:"p2p_address_list,omitempty"`
	Time              uint64   `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	Result            *Result  `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	Id                string   `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspDownloadTaskInfo) Reset() {
	*x = RspDownloadTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDownloadTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDownloadTaskInfo) ProtoMessage() {}

func (x *RspDownloadTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDownloadTaskInfo.ProtoReflect.Descriptor instead.
func (*RspDownloadTaskInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{84}
}

func (x *RspDownloadTaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RspDownloadTaskInfo) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *RspDownloadTaskInfo) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *RspDownloadTaskInfo) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *RspDownloadTaskInfo) GetStorageP2PAddress() string {
	if x != nil {
		return x.StorageP2PAddress
	}
	return ""
}

func (x *RspDownloadTaskInfo) GetP2PAddressList() []string {
	if x != nil {
		return x.P2PAddressList
	}
	return nil
}

func (x *RspDownloadTaskInfo) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RspDownloadTaskInfo) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspDownloadTaskInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqClearDownloadTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	FileHash      string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	P2PAddress    string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *ReqClearDownloadTask) Reset() {
	*x = ReqClearDownloadTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqClearDownloadTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqClearDownloadTask) ProtoMessage() {}

func (x *ReqClearDownloadTask) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqClearDownloadTask.ProtoReflect.Descriptor instead.
func (*ReqClearDownloadTask) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{85}
}

func (x *ReqClearDownloadTask) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqClearDownloadTask) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqClearDownloadTask) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

type ReqShareLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress    string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	PageId        uint64 `protobuf:"varint,3,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
}

func (x *ReqShareLink) Reset() {
	*x = ReqShareLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShareLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShareLink) ProtoMessage() {}

func (x *ReqShareLink) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShareLink.ProtoReflect.Descriptor instead.
func (*ReqShareLink) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{86}
}

func (x *ReqShareLink) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqShareLink) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqShareLink) GetPageId() uint64 {
	if x != nil {
		return x.PageId
	}
	return 0
}

type RspShareLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareInfo       []*ShareLinkInfo `protobuf:"bytes,1,rep,name=share_info,json=shareInfo,proto3" json:"share_info,omitempty"`
	P2PAddress      string           `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress   string           `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	Result          *Result          `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	TotalFileNumber uint64           `protobuf:"varint,5,opt,name=total_file_number,json=totalFileNumber,proto3" json:"total_file_number,omitempty"`
	PageId          uint64           `protobuf:"varint,6,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
}

func (x *RspShareLink) Reset() {
	*x = RspShareLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShareLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShareLink) ProtoMessage() {}

func (x *RspShareLink) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShareLink.ProtoReflect.Descriptor instead.
func (*RspShareLink) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{87}
}

func (x *RspShareLink) GetShareInfo() []*ShareLinkInfo {
	if x != nil {
		return x.ShareInfo
	}
	return nil
}

func (x *RspShareLink) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspShareLink) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspShareLink) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspShareLink) GetTotalFileNumber() uint64 {
	if x != nil {
		return x.TotalFileNumber
	}
	return 0
}

func (x *RspShareLink) GetPageId() uint64 {
	if x != nil {
		return x.PageId
	}
	return 0
}

type ReqShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash      string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	IsPrivate     bool   `protobuf:"varint,2,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ShareTime     int64  `protobuf:"varint,3,opt,name=share_time,json=shareTime,proto3" json:"share_time,omitempty"`
	P2PAddress    string `protobuf:"bytes,4,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	PathHash      string `protobuf:"bytes,6,opt,name=path_hash,json=pathHash,proto3" json:"path_hash,omitempty"` // share whole directory if this field is non-empty
}

func (x *ReqShareFile) Reset() {
	*x = ReqShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShareFile) ProtoMessage() {}

func (x *ReqShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShareFile.ProtoReflect.Descriptor instead.
func (*ReqShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{88}
}

func (x *ReqShareFile) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ReqShareFile) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ReqShareFile) GetShareTime() int64 {
	if x != nil {
		return x.ShareTime
	}
	return 0
}

func (x *ReqShareFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqShareFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqShareFile) GetPathHash() string {
	if x != nil {
		return x.PathHash
	}
	return ""
}

type RspShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareLink     string  `protobuf:"bytes,1,opt,name=share_link,json=shareLink,proto3" json:"share_link,omitempty"`
	SharePassword string  `protobuf:"bytes,2,opt,name=share_password,json=sharePassword,proto3" json:"share_password,omitempty"`
	P2PAddress    string  `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ShareId       string  `protobuf:"bytes,5,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	Result        *Result `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspShareFile) Reset() {
	*x = RspShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShareFile) ProtoMessage() {}

func (x *RspShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShareFile.ProtoReflect.Descriptor instead.
func (*RspShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{89}
}

func (x *RspShareFile) GetShareLink() string {
	if x != nil {
		return x.ShareLink
	}
	return ""
}

func (x *RspShareFile) GetSharePassword() string {
	if x != nil {
		return x.SharePassword
	}
	return ""
}

func (x *RspShareFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspShareFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspShareFile) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *RspShareFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqDeleteShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId       string `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
}

func (x *ReqDeleteShare) Reset() {
	*x = ReqDeleteShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteShare) ProtoMessage() {}

func (x *ReqDeleteShare) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteShare.ProtoReflect.Descriptor instead.
func (*ReqDeleteShare) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{90}
}

func (x *ReqDeleteShare) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *ReqDeleteShare) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqDeleteShare) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type RspDeleteShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId       string  `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	P2PAddress    string  `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	Result        *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspDeleteShare) Reset() {
	*x = RspDeleteShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteShare) ProtoMessage() {}

func (x *RspDeleteShare) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteShare.ProtoReflect.Descriptor instead.
func (*RspDeleteShare) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{91}
}

func (x *RspDeleteShare) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *RspDeleteShare) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *RspDeleteShare) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspDeleteShare) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqGetShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword       string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"` //
	P2PAddress    string `protobuf:"bytes,2,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"` //
	WalletPubkey  []byte `protobuf:"bytes,4,opt,name=wallet_pubkey,json=walletPubkey,proto3" json:"wallet_pubkey,omitempty"`
	WalletSign    []byte `protobuf:"bytes,5,opt,name=wallet_sign,json=walletSign,proto3" json:"wallet_sign,omitempty"`
	SharePassword string `protobuf:"bytes,6,opt,name=share_password,json=sharePassword,proto3" json:"share_password,omitempty"` //
	SaveAs        string `protobuf:"bytes,7,opt,name=save_as,json=saveAs,proto3" json:"save_as,omitempty"`
}

func (x *ReqGetShareFile) Reset() {
	*x = ReqGetShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetShareFile) ProtoMessage() {}

func (x *ReqGetShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetShareFile.ProtoReflect.Descriptor instead.
func (*ReqGetShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{92}
}

func (x *ReqGetShareFile) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ReqGetShareFile) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqGetShareFile) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqGetShareFile) GetWalletPubkey() []byte {
	if x != nil {
		return x.WalletPubkey
	}
	return nil
}

func (x *ReqGetShareFile) GetWalletSign() []byte {
	if x != nil {
		return x.WalletSign
	}
	return nil
}

func (x *ReqGetShareFile) GetSharePassword() string {
	if x != nil {
		return x.SharePassword
	}
	return ""
}

func (x *ReqGetShareFile) GetSaveAs() string {
	if x != nil {
		return x.SaveAs
	}
	return ""
}

type RspGetShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareRequest   *ReqGetShareFile `protobuf:"bytes,1,opt,name=share_request,json=shareRequest,proto3" json:"share_request,omitempty"`
	Result         *Result          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"` // if failed, wrong share password
	IsPrivate      bool             `protobuf:"varint,3,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	FileInfo       []*FileInfo      `protobuf:"bytes,4,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	SequenceNumber string           `protobuf:"bytes,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *RspGetShareFile) Reset() {
	*x = RspGetShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetShareFile) ProtoMessage() {}

func (x *RspGetShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetShareFile.ProtoReflect.Descriptor instead.
func (*RspGetShareFile) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{93}
}

func (x *RspGetShareFile) GetShareRequest() *ReqGetShareFile {
	if x != nil {
		return x.ShareRequest
	}
	return nil
}

func (x *RspGetShareFile) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RspGetShareFile) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *RspGetShareFile) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *RspGetShareFile) GetSequenceNumber() string {
	if x != nil {
		return x.SequenceNumber
	}
	return ""
}

type ReqTransferBLSSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     string `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	PubKey    []byte `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ReqTransferBLSSignature) Reset() {
	*x = ReqTransferBLSSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTransferBLSSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTransferBLSSignature) ProtoMessage() {}

func (x *ReqTransferBLSSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTransferBLSSignature.ProtoReflect.Descriptor instead.
func (*ReqTransferBLSSignature) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{94}
}

func (x *ReqTransferBLSSignature) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *ReqTransferBLSSignature) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ReqTransferBLSSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RspTransferBLSSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspTransferBLSSignature) Reset() {
	*x = RspTransferBLSSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTransferBLSSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTransferBLSSignature) ProtoMessage() {}

func (x *RspTransferBLSSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTransferBLSSignature.ProtoReflect.Descriptor instead.
func (*RspTransferBLSSignature) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{95}
}

func (x *RspTransferBLSSignature) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqReportNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress string         `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	Cpu        *CpuStat       `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory     *MemoryStat    `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk       *DiskStat      `protobuf:"bytes,4,opt,name=disk,proto3" json:"disk,omitempty"`
	Bandwidth  *BandwidthStat `protobuf:"bytes,5,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *ReqReportNodeStatus) Reset() {
	*x = ReqReportNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReportNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReportNodeStatus) ProtoMessage() {}

func (x *ReqReportNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReportNodeStatus.ProtoReflect.Descriptor instead.
func (*ReqReportNodeStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{96}
}

func (x *ReqReportNodeStatus) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *ReqReportNodeStatus) GetCpu() *CpuStat {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *ReqReportNodeStatus) GetMemory() *MemoryStat {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *ReqReportNodeStatus) GetDisk() *DiskStat {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *ReqReportNodeStatus) GetBandwidth() *BandwidthStat {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

type RspReportNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ppstate int32   `protobuf:"varint,1,opt,name=ppstate,proto3" json:"ppstate,omitempty"`
	Result  *Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspReportNodeStatus) Reset() {
	*x = RspReportNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReportNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReportNodeStatus) ProtoMessage() {}

func (x *RspReportNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReportNodeStatus.ProtoReflect.Descriptor instead.
func (*RspReportNodeStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{97}
}

func (x *RspReportNodeStatus) GetPpstate() int32 {
	if x != nil {
		return x.Ppstate
	}
	return 0
}

func (x *RspReportNodeStatus) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqGetPPDowngradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyAddress *PPBaseInfo `protobuf:"bytes,1,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
}

func (x *ReqGetPPDowngradeInfo) Reset() {
	*x = ReqGetPPDowngradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetPPDowngradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetPPDowngradeInfo) ProtoMessage() {}

func (x *ReqGetPPDowngradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetPPDowngradeInfo.ProtoReflect.Descriptor instead.
func (*ReqGetPPDowngradeInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{98}
}

func (x *ReqGetPPDowngradeInfo) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

type RspGetPPDowngradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DowngradeHeightDeltaToNow int64   `protobuf:"varint,1,opt,name=downgrade_height_delta_to_now,json=downgradeHeightDeltaToNow,proto3" json:"downgrade_height_delta_to_now,omitempty"`
	ScoreDecreased            uint32  `protobuf:"varint,2,opt,name=score_decreased,json=scoreDecreased,proto3" json:"score_decreased,omitempty"`
	SpP2PAddress              string  `protobuf:"bytes,3,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	Result                    *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspGetPPDowngradeInfo) Reset() {
	*x = RspGetPPDowngradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetPPDowngradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetPPDowngradeInfo) ProtoMessage() {}

func (x *RspGetPPDowngradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetPPDowngradeInfo.ProtoReflect.Descriptor instead.
func (*RspGetPPDowngradeInfo) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{99}
}

func (x *RspGetPPDowngradeInfo) GetDowngradeHeightDeltaToNow() int64 {
	if x != nil {
		return x.DowngradeHeightDeltaToNow
	}
	return 0
}

func (x *RspGetPPDowngradeInfo) GetScoreDecreased() uint32 {
	if x != nil {
		return x.ScoreDecreased
	}
	return 0
}

func (x *RspGetPPDowngradeInfo) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *RspGetPPDowngradeInfo) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqGetPPStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyAddress  *PPBaseInfo `protobuf:"bytes,1,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
	InitPpList bool        `protobuf:"varint,2,opt,name=init_pp_list,json=initPpList,proto3" json:"init_pp_list,omitempty"`
}

func (x *ReqGetPPStatus) Reset() {
	*x = ReqGetPPStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetPPStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetPPStatus) ProtoMessage() {}

func (x *ReqGetPPStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetPPStatus.ProtoReflect.Descriptor instead.
func (*ReqGetPPStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{100}
}

func (x *ReqGetPPStatus) GetMyAddress() *PPBaseInfo {
	if x != nil {
		return x.MyAddress
	}
	return nil
}

func (x *ReqGetPPStatus) GetInitPpList() bool {
	if x != nil {
		return x.InitPpList
	}
	return false
}

type RspGetPPStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive    uint32  `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	OngoingTier uint32  `protobuf:"varint,2,opt,name=ongoing_tier,json=ongoingTier,proto3" json:"ongoing_tier,omitempty"`
	InitTier    uint32  `protobuf:"varint,3,opt,name=init_tier,json=initTier,proto3" json:"init_tier,omitempty"`
	WeightScore uint32  `protobuf:"varint,4,opt,name=weight_score,json=weightScore,proto3" json:"weight_score,omitempty"`
	State       int32   `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	InitPpList  bool    `protobuf:"varint,6,opt,name=init_pp_list,json=initPpList,proto3" json:"init_pp_list,omitempty"`
	Result      *Result `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspGetPPStatus) Reset() {
	*x = RspGetPPStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetPPStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetPPStatus) ProtoMessage() {}

func (x *RspGetPPStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetPPStatus.ProtoReflect.Descriptor instead.
func (*RspGetPPStatus) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{101}
}

func (x *RspGetPPStatus) GetIsActive() uint32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *RspGetPPStatus) GetOngoingTier() uint32 {
	if x != nil {
		return x.OngoingTier
	}
	return 0
}

func (x *RspGetPPStatus) GetInitTier() uint32 {
	if x != nil {
		return x.InitTier
	}
	return 0
}

func (x *RspGetPPStatus) GetWeightScore() uint32 {
	if x != nil {
		return x.WeightScore
	}
	return 0
}

func (x *RspGetPPStatus) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RspGetPPStatus) GetInitPpList() bool {
	if x != nil {
		return x.InitPpList
	}
	return false
}

func (x *RspGetPPStatus) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReqGetWalletOz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress   string              `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	UploadRequest   *ReqUploadFile      `protobuf:"bytes,2,opt,name=upload_request,json=uploadRequest,proto3" json:"upload_request,omitempty"`
	DownloadRequest *ReqFileStorageInfo `protobuf:"bytes,3,opt,name=download_request,json=downloadRequest,proto3" json:"download_request,omitempty"`
}

func (x *ReqGetWalletOz) Reset() {
	*x = ReqGetWalletOz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetWalletOz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetWalletOz) ProtoMessage() {}

func (x *ReqGetWalletOz) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetWalletOz.ProtoReflect.Descriptor instead.
func (*ReqGetWalletOz) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{102}
}

func (x *ReqGetWalletOz) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ReqGetWalletOz) GetUploadRequest() *ReqUploadFile {
	if x != nil {
		return x.UploadRequest
	}
	return nil
}

func (x *ReqGetWalletOz) GetDownloadRequest() *ReqFileStorageInfo {
	if x != nil {
		return x.DownloadRequest
	}
	return nil
}

type RspGetWalletOz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletOz       string  `protobuf:"bytes,1,opt,name=wallet_oz,json=walletOz,proto3" json:"wallet_oz,omitempty"`
	SequenceNumber string  `protobuf:"bytes,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	WalletAddress  string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Result         *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspGetWalletOz) Reset() {
	*x = RspGetWalletOz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetWalletOz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetWalletOz) ProtoMessage() {}

func (x *RspGetWalletOz) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetWalletOz.ProtoReflect.Descriptor instead.
func (*RspGetWalletOz) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{103}
}

func (x *RspGetWalletOz) GetWalletOz() string {
	if x != nil {
		return x.WalletOz
	}
	return ""
}

func (x *RspGetWalletOz) GetSequenceNumber() string {
	if x != nil {
		return x.SequenceNumber
	}
	return ""
}

func (x *RspGetWalletOz) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *RspGetWalletOz) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type RspBadVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	MinimumVersion int32  `protobuf:"varint,2,opt,name=minimum_version,json=minimumVersion,proto3" json:"minimum_version,omitempty"`
	Command        uint32 `protobuf:"varint,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *RspBadVersion) Reset() {
	*x = RspBadVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBadVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBadVersion) ProtoMessage() {}

func (x *RspBadVersion) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBadVersion.ProtoReflect.Descriptor instead.
func (*RspBadVersion) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{104}
}

func (x *RspBadVersion) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RspBadVersion) GetMinimumVersion() int32 {
	if x != nil {
		return x.MinimumVersion
	}
	return 0
}

func (x *RspBadVersion) GetCommand() uint32 {
	if x != nil {
		return x.Command
	}
	return 0
}

type NoticeSpUnderMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpP2PAddress    string `protobuf:"bytes,1,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	MaintenanceType int32  `protobuf:"varint,2,opt,name=maintenance_type,json=maintenanceType,proto3" json:"maintenance_type,omitempty"`
}

func (x *NoticeSpUnderMaintenance) Reset() {
	*x = NoticeSpUnderMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sds_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeSpUnderMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeSpUnderMaintenance) ProtoMessage() {}

func (x *NoticeSpUnderMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_sds_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeSpUnderMaintenance.ProtoReflect.Descriptor instead.
func (*NoticeSpUnderMaintenance) Descriptor() ([]byte, []int) {
	return file_sds_proto_rawDescGZIP(), []int{105}
}

func (x *NoticeSpUnderMaintenance) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *NoticeSpUnderMaintenance) GetMaintenanceType() int32 {
	if x != nil {
		return x.MaintenanceType
	}
	return 0
}

var File_sds_proto protoreflect.FileDescriptor

var file_sds_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x1a, 0x0e, 0x73, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74,
	0x50, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x41, 0x0a, 0x0c, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6d,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x63,
	0x0a, 0x0c, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74, 0x53, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x50, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x50, 0x50,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x33,
	0x0a, 0x09, 0x52, 0x73, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5f, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x42, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x53, 0x74,
	0x6f, 0x70, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x06, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x22, 0x95, 0x03,
	0x0a, 0x0d, 0x52, 0x73, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa9, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0f,
	0x72, 0x73, 0x70, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x73, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x72, 0x73,
	0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x70, 0x69,
	0x65, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xac, 0x02, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70,
	0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xf7, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a,
	0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x06, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x52,
	0x73, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x57, 0x72,
	0x6f, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x06, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0f,
	0x72, 0x73, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x73, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x72, 0x73, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b,
	0x70, 0x69, 0x65, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xf4, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x05,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x50, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x50,
	0x50, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x71, 0x0a, 0x1a, 0x52, 0x73, 0x70, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a,
	0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x73, 0x55, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xf7, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xab, 0x04,
	0x0a, 0x12, 0x52, 0x73, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x73, 0x69, 0x74, 0x43, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf1, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22,
	0xc8, 0x01, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x71, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x72,
	0x6f, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x50, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x15, 0x72, 0x73, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x73, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x73, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xe7, 0x04, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x52, 0x73,
	0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc1, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x50, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x50, 0x50,
	0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x70,
	0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x70,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x70, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x74, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x50, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0xeb, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x50, 0x50, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x73, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x59, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x50, 0x50, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x70,
	0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x50, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x74, 0x78, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x22,
	0x72, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x50,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x74, 0x78, 0x22, 0x45, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x12, 0x52, 0x73,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x50,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x22, 0xa9, 0x01, 0x0a, 0x16,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x50, 0x50, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5d, 0x0a, 0x10,
	0x52, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x50,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x52,
	0x65, 0x71, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x50, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x74, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x50, 0x50, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x74, 0x78, 0x22, 0x3b, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x55,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x50, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x3d, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x50, 0x50, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x38, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x50, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x63, 0x0a, 0x09, 0x52,
	0x65, 0x71, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x43, 0x0a, 0x09, 0x52, 0x73, 0x70, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x74, 0x78, 0x22, 0x74, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x9c, 0x01, 0x0a, 0x0d,
	0x52, 0x73, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x15, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x50, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8b, 0x04, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7c, 0x0a, 0x1a, 0x52, 0x73, 0x70, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x75, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x0f, 0x52,
	0x73, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x54, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70,
	0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x56, 0x0a,
	0x18, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x15,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x50, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x19,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70,
	0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x9e, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x50, 0x70,
	0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x70, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70,
	0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x56, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x48, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70,
	0x47, 0x65, 0x74, 0x48, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x53, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x82, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x53, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x70, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x50, 0x70, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x52,
	0x73, 0x70, 0x50, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x6f, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x53, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xed, 0x01, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x53, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x33, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x42, 0x4c, 0x53, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x42, 0x50, 0x42, 0x4c,
	0x53, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x62, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0a,
	0x52, 0x65, 0x71, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4a, 0x0a, 0x0a, 0x52, 0x73, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48,
	0x0a, 0x0e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a,
	0x0a, 0x0d, 0x52, 0x73, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x35, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5,
	0x02, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0xce, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x73, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61, 0x76, 0x65,
	0x41, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x4c, 0x53, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x4c, 0x53, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe0,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x22, 0x57, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x70, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x70, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4a, 0x0a, 0x15, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x50, 0x50, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x47, 0x65,
	0x74, 0x50, 0x50, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x40, 0x0a, 0x1d, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x6f, 0x4e,
	0x6f, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x0e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x6d,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74, 0x50, 0x50, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x7a, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a,
	0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4f, 0x7a, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x6f, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4f, 0x7a, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6c, 0x0a, 0x0d, 0x52, 0x73,
	0x70, 0x42, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x6b, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x53, 0x70, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70,
	0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2f, 0x73,
	0x64, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sds_proto_rawDescOnce sync.Once
	file_sds_proto_rawDescData = file_sds_proto_rawDesc
)

func file_sds_proto_rawDescGZIP() []byte {
	file_sds_proto_rawDescOnce.Do(func() {
		file_sds_proto_rawDescData = protoimpl.X.CompressGZIP(file_sds_proto_rawDescData)
	})
	return file_sds_proto_rawDescData
}

var file_sds_proto_msgTypes = make([]protoimpl.MessageInfo, 106)
var file_sds_proto_goTypes = []interface{}{
	(*ReqGetPPList)(nil),               // 0: protos.ReqGetPPList
	(*RspGetPPList)(nil),               // 1: protos.RspGetPPList
	(*ReqGetSPList)(nil),               // 2: protos.ReqGetSPList
	(*RspGetSPList)(nil),               // 3: protos.RspGetSPList
	(*ReqRegister)(nil),                // 4: protos.ReqRegister
	(*RspRegister)(nil),                // 5: protos.RspRegister
	(*ReqMining)(nil),                  // 6: protos.ReqMining
	(*RspMining)(nil),                  // 7: protos.RspMining
	(*ReqStartMaintenance)(nil),        // 8: protos.ReqStartMaintenance
	(*RspStartMaintenance)(nil),        // 9: protos.RspStartMaintenance
	(*ReqStopMaintenance)(nil),         // 10: protos.ReqStopMaintenance
	(*RspStopMaintenance)(nil),         // 11: protos.RspStopMaintenance
	(*ReqUploadFile)(nil),              // 12: protos.ReqUploadFile
	(*RspUploadFile)(nil),              // 13: protos.RspUploadFile
	(*ReqUploadFileSlice)(nil),         // 14: protos.ReqUploadFileSlice
	(*RspUploadFileSlice)(nil),         // 15: protos.RspUploadFileSlice
	(*ReqUploadSlicesWrong)(nil),       // 16: protos.ReqUploadSlicesWrong
	(*RspUploadSlicesWrong)(nil),       // 17: protos.RspUploadSlicesWrong
	(*ReqBackupFileSlice)(nil),         // 18: protos.ReqBackupFileSlice
	(*RspBackupFileSlice)(nil),         // 19: protos.RspBackupFileSlice
	(*UploadSpeedOfProgress)(nil),      // 20: protos.UploadSpeedOfProgress
	(*ReportUploadSliceResult)(nil),    // 21: protos.ReportUploadSliceResult
	(*RspReportUploadSliceResult)(nil), // 22: protos.RspReportUploadSliceResult
	(*ReqFindMyFileList)(nil),          // 23: protos.ReqFindMyFileList
	(*RspFindMyFileList)(nil),          // 24: protos.RspFindMyFileList
	(*ReqFileStorageInfo)(nil),         // 25: protos.ReqFileStorageInfo
	(*RspFileStorageInfo)(nil),         // 26: protos.RspFileStorageInfo
	(*ReqFileReplicaInfo)(nil),         // 27: protos.ReqFileReplicaInfo
	(*RspFileReplicaInfo)(nil),         // 28: protos.RspFileReplicaInfo
	(*ReqDownloadFileWrong)(nil),       // 29: protos.ReqDownloadFileWrong
	(*ReqDownloadSlice)(nil),           // 30: protos.ReqDownloadSlice
	(*RspDownloadSlice)(nil),           // 31: protos.RspDownloadSlice
	(*ReqDownloadSlicePause)(nil),      // 32: protos.ReqDownloadSlicePause
	(*RspDownloadSlicePause)(nil),      // 33: protos.RspDownloadSlicePause
	(*ReqReportDownloadResult)(nil),    // 34: protos.ReqReportDownloadResult
	(*RspReportDownloadResult)(nil),    // 35: protos.RspReportDownloadResult
	(*ReqReportTaskBP)(nil),            // 36: protos.ReqReportTaskBP
	(*ReqRegisterNewPP)(nil),           // 37: protos.ReqRegisterNewPP
	(*RspRegisterNewPP)(nil),           // 38: protos.RspRegisterNewPP
	(*ReqActivatePP)(nil),              // 39: protos.ReqActivatePP
	(*RspActivatePP)(nil),              // 40: protos.RspActivatePP
	(*ReqUpdateDepositPP)(nil),         // 41: protos.ReqUpdateDepositPP
	(*RspUpdateDepositPP)(nil),         // 42: protos.RspUpdateDepositPP
	(*NoticeUpdatedDepositPP)(nil),     // 43: protos.NoticeUpdatedDepositPP
	(*ReqStateChangePP)(nil),           // 44: protos.ReqStateChangePP
	(*RspStateChangePP)(nil),           // 45: protos.RspStateChangePP
	(*ReqDeactivatePP)(nil),            // 46: protos.ReqDeactivatePP
	(*RspDeactivatePP)(nil),            // 47: protos.RspDeactivatePP
	(*NoticeUnbondingPP)(nil),          // 48: protos.NoticeUnbondingPP
	(*NoticeDeactivatedPP)(nil),        // 49: protos.NoticeDeactivatedPP
	(*RspUnbondingSP)(nil),             // 50: protos.RspUnbondingSP
	(*ReqPrepay)(nil),                  // 51: protos.ReqPrepay
	(*RspPrepay)(nil),                  // 52: protos.RspPrepay
	(*ReqDeleteFile)(nil),              // 53: protos.ReqDeleteFile
	(*RspDeleteFile)(nil),              // 54: protos.RspDeleteFile
	(*NoticeFileSliceBackup)(nil),      // 55: protos.NoticeFileSliceBackup
	(*ReqReportBackupSliceResult)(nil), // 56: protos.ReqReportBackupSliceResult
	(*RspReportBackupSliceResult)(nil), // 57: protos.RspReportBackupSliceResult
	(*ReqBackupStatus)(nil),            // 58: protos.ReqBackupStatus
	(*RspBackupStatus)(nil),            // 59: protos.RspBackupStatus
	(*ReqTransferDownload)(nil),        // 60: protos.ReqTransferDownload
	(*RspTransferDownload)(nil),        // 61: protos.RspTransferDownload
	(*RspTransferDownloadResult)(nil),  // 62: protos.RspTransferDownloadResult
	(*ReqTransferDownloadWrong)(nil),   // 63: protos.ReqTransferDownloadWrong
	(*ReqGetHDInfo)(nil),               // 64: protos.ReqGetHDInfo
	(*RspGetHDInfo)(nil),               // 65: protos.RspGetHDInfo
	(*ReqSpLatencyCheck)(nil),          // 66: protos.ReqSpLatencyCheck
	(*RspSpLatencyCheck)(nil),          // 67: protos.RspSpLatencyCheck
	(*ReqPpLatencyCheck)(nil),          // 68: protos.ReqPpLatencyCheck
	(*RspPpLatencyCheck)(nil),          // 69: protos.RspPpLatencyCheck
	(*ReqSpStatus)(nil),                // 70: protos.ReqSpStatus
	(*RspSpStatus)(nil),                // 71: protos.RspSpStatus
	(*ReqBLSPublicKey)(nil),            // 72: protos.ReqBLSPublicKey
	(*RspBPBLSPublicKey)(nil),          // 73: protos.RspBPBLSPublicKey
	(*ReqBalance)(nil),                 // 74: protos.ReqBalance
	(*RspBalance)(nil),                 // 75: protos.RspBalance
	(*ReqTransaction)(nil),             // 76: protos.ReqTransaction
	(*RspTransaction)(nil),             // 77: protos.RspTransaction
	(*ReqBlockInfo)(nil),               // 78: protos.ReqBlockInfo
	(*RspBlockInfo)(nil),               // 79: protos.RspBlockInfo
	(*ReqBlockCheck)(nil),              // 80: protos.ReqBlockCheck
	(*RspBlockCheck)(nil),              // 81: protos.RspBlockCheck
	(*BlockCheckInfo)(nil),             // 82: protos.BlockCheckInfo
	(*ReqDownloadTaskInfo)(nil),        // 83: protos.ReqDownloadTaskInfo
	(*RspDownloadTaskInfo)(nil),        // 84: protos.RspDownloadTaskInfo
	(*ReqClearDownloadTask)(nil),       // 85: protos.ReqClearDownloadTask
	(*ReqShareLink)(nil),               // 86: protos.ReqShareLink
	(*RspShareLink)(nil),               // 87: protos.RspShareLink
	(*ReqShareFile)(nil),               // 88: protos.ReqShareFile
	(*RspShareFile)(nil),               // 89: protos.RspShareFile
	(*ReqDeleteShare)(nil),             // 90: protos.ReqDeleteShare
	(*RspDeleteShare)(nil),             // 91: protos.RspDeleteShare
	(*ReqGetShareFile)(nil),            // 92: protos.ReqGetShareFile
	(*RspGetShareFile)(nil),            // 93: protos.RspGetShareFile
	(*ReqTransferBLSSignature)(nil),    // 94: protos.ReqTransferBLSSignature
	(*RspTransferBLSSignature)(nil),    // 95: protos.RspTransferBLSSignature
	(*ReqReportNodeStatus)(nil),        // 96: protos.ReqReportNodeStatus
	(*RspReportNodeStatus)(nil),        // 97: protos.RspReportNodeStatus
	(*ReqGetPPDowngradeInfo)(nil),      // 98: protos.ReqGetPPDowngradeInfo
	(*RspGetPPDowngradeInfo)(nil),      // 99: protos.RspGetPPDowngradeInfo
	(*ReqGetPPStatus)(nil),             // 100: protos.ReqGetPPStatus
	(*RspGetPPStatus)(nil),             // 101: protos.RspGetPPStatus
	(*ReqGetWalletOz)(nil),             // 102: protos.ReqGetWalletOz
	(*RspGetWalletOz)(nil),             // 103: protos.RspGetWalletOz
	(*RspBadVersion)(nil),              // 104: protos.RspBadVersion
	(*NoticeSpUnderMaintenance)(nil),   // 105: protos.NoticeSpUnderMaintenance
	(*PPBaseInfo)(nil),                 // 106: protos.PPBaseInfo
	(*Result)(nil),                     // 107: protos.Result
	(*SPBaseInfo)(nil),                 // 108: protos.SPBaseInfo
	(*FileInfo)(nil),                   // 109: protos.FileInfo
	(*SliceHashAddr)(nil),              // 110: protos.SliceHashAddr
	(*SliceOffset)(nil),                // 111: protos.SliceOffset
	(UploadType)(0),                    // 112: protos.UploadType
	(FileSortType)(0),                  // 113: protos.FileSortType
	(*FileIndexes)(nil),                // 114: protos.FileIndexes
	(*DownloadSliceInfo)(nil),          // 115: protos.DownloadSliceInfo
	(*SliceOffsetInfo)(nil),            // 116: protos.SliceOffsetInfo
	(*SliceStorageInfo)(nil),           // 117: protos.SliceStorageInfo
	(*ShareLinkInfo)(nil),              // 118: protos.ShareLinkInfo
	(*CpuStat)(nil),                    // 119: protos.CpuStat
	(*MemoryStat)(nil),                 // 120: protos.MemoryStat
	(*DiskStat)(nil),                   // 121: protos.DiskStat
	(*BandwidthStat)(nil),              // 122: protos.BandwidthStat
}
var file_sds_proto_depIdxs = []int32{
	106, // 0: protos.ReqGetPPList.my_address:type_name -> protos.PPBaseInfo
	106, // 1: protos.RspGetPPList.pp_list:type_name -> protos.PPBaseInfo
	107, // 2: protos.RspGetPPList.result:type_name -> protos.Result
	106, // 3: protos.ReqGetSPList.my_address:type_name -> protos.PPBaseInfo
	108, // 4: protos.RspGetSPList.sp_list:type_name -> protos.SPBaseInfo
	107, // 5: protos.RspGetSPList.result:type_name -> protos.Result
	106, // 6: protos.ReqRegister.address:type_name -> protos.PPBaseInfo
	106, // 7: protos.ReqRegister.my_address:type_name -> protos.PPBaseInfo
	107, // 8: protos.RspRegister.result:type_name -> protos.Result
	106, // 9: protos.ReqMining.address:type_name -> protos.PPBaseInfo
	107, // 10: protos.RspMining.result:type_name -> protos.Result
	106, // 11: protos.ReqStartMaintenance.address:type_name -> protos.PPBaseInfo
	107, // 12: protos.RspStartMaintenance.result:type_name -> protos.Result
	106, // 13: protos.ReqStopMaintenance.address:type_name -> protos.PPBaseInfo
	107, // 14: protos.RspStopMaintenance.result:type_name -> protos.Result
	109, // 15: protos.ReqUploadFile.file_info:type_name -> protos.FileInfo
	110, // 16: protos.ReqUploadFile.slices:type_name -> protos.SliceHashAddr
	106, // 17: protos.ReqUploadFile.my_address:type_name -> protos.PPBaseInfo
	110, // 18: protos.RspUploadFile.slices:type_name -> protos.SliceHashAddr
	107, // 19: protos.RspUploadFile.result:type_name -> protos.Result
	13,  // 20: protos.ReqUploadFileSlice.rsp_upload_file:type_name -> protos.RspUploadFile
	111, // 21: protos.ReqUploadFileSlice.piece_offset:type_name -> protos.SliceOffset
	107, // 22: protos.RspUploadFileSlice.result:type_name -> protos.Result
	110, // 23: protos.RspUploadFileSlice.slice:type_name -> protos.SliceHashAddr
	112, // 24: protos.ReqUploadSlicesWrong.upload_type:type_name -> protos.UploadType
	106, // 25: protos.ReqUploadSlicesWrong.my_address:type_name -> protos.PPBaseInfo
	106, // 26: protos.ReqUploadSlicesWrong.excluded_destinations:type_name -> protos.PPBaseInfo
	110, // 27: protos.ReqUploadSlicesWrong.slices:type_name -> protos.SliceHashAddr
	107, // 28: protos.RspUploadSlicesWrong.result:type_name -> protos.Result
	112, // 29: protos.RspUploadSlicesWrong.upload_type:type_name -> protos.UploadType
	110, // 30: protos.RspUploadSlicesWrong.slices:type_name -> protos.SliceHashAddr
	59,  // 31: protos.ReqBackupFileSlice.rsp_backup_file:type_name -> protos.RspBackupStatus
	111, // 32: protos.ReqBackupFileSlice.piece_offset:type_name -> protos.SliceOffset
	107, // 33: protos.RspBackupFileSlice.result:type_name -> protos.Result
	110, // 34: protos.RspBackupFileSlice.slice:type_name -> protos.SliceHashAddr
	110, // 35: protos.ReportUploadSliceResult.slice:type_name -> protos.SliceHashAddr
	107, // 36: protos.RspReportUploadSliceResult.result:type_name -> protos.Result
	110, // 37: protos.RspReportUploadSliceResult.slice:type_name -> protos.SliceHashAddr
	113, // 38: protos.ReqFindMyFileList.file_type:type_name -> protos.FileSortType
	109, // 39: protos.RspFindMyFileList.file_info:type_name -> protos.FileInfo
	107, // 40: protos.RspFindMyFileList.result:type_name -> protos.Result
	114, // 41: protos.ReqFileStorageInfo.file_indexes:type_name -> protos.FileIndexes
	92,  // 42: protos.ReqFileStorageInfo.share_request:type_name -> protos.ReqGetShareFile
	115, // 43: protos.RspFileStorageInfo.slice_info:type_name -> protos.DownloadSliceInfo
	107, // 44: protos.RspFileStorageInfo.result:type_name -> protos.Result
	107, // 45: protos.RspFileReplicaInfo.result:type_name -> protos.Result
	114, // 46: protos.ReqDownloadFileWrong.file_indexes:type_name -> protos.FileIndexes
	106, // 47: protos.ReqDownloadFileWrong.failed_pp_nodes:type_name -> protos.PPBaseInfo
	26,  // 48: protos.ReqDownloadSlice.rsp_file_storage_info:type_name -> protos.RspFileStorageInfo
	116, // 49: protos.RspDownloadSlice.slice_info:type_name -> protos.SliceOffsetInfo
	107, // 50: protos.RspDownloadSlice.result:type_name -> protos.Result
	107, // 51: protos.RspDownloadSlicePause.result:type_name -> protos.Result
	115, // 52: protos.ReqReportDownloadResult.slice_info:type_name -> protos.DownloadSliceInfo
	107, // 53: protos.RspReportDownloadResult.result:type_name -> protos.Result
	115, // 54: protos.RspReportDownloadResult.slice_info:type_name -> protos.DownloadSliceInfo
	106, // 55: protos.ReqReportTaskBP.reporter:type_name -> protos.PPBaseInfo
	107, // 56: protos.RspRegisterNewPP.result:type_name -> protos.Result
	106, // 57: protos.ReqActivatePP.pp_info:type_name -> protos.PPBaseInfo
	107, // 58: protos.RspActivatePP.result:type_name -> protos.Result
	107, // 59: protos.RspUpdateDepositPP.result:type_name -> protos.Result
	107, // 60: protos.NoticeUpdatedDepositPP.result:type_name -> protos.Result
	107, // 61: protos.RspStateChangePP.result:type_name -> protos.Result
	107, // 62: protos.RspDeactivatePP.result:type_name -> protos.Result
	107, // 63: protos.NoticeUnbondingPP.result:type_name -> protos.Result
	107, // 64: protos.NoticeDeactivatedPP.result:type_name -> protos.Result
	107, // 65: protos.RspUnbondingSP.result:type_name -> protos.Result
	107, // 66: protos.RspPrepay.result:type_name -> protos.Result
	107, // 67: protos.RspDeleteFile.result:type_name -> protos.Result
	117, // 68: protos.NoticeFileSliceBackup.slice_storage_info:type_name -> protos.SliceStorageInfo
	106, // 69: protos.NoticeFileSliceBackup.pp_info:type_name -> protos.PPBaseInfo
	106, // 70: protos.ReqReportBackupSliceResult.pp_info:type_name -> protos.PPBaseInfo
	107, // 71: protos.RspReportBackupSliceResult.result:type_name -> protos.Result
	106, // 72: protos.ReqBackupStatus.address:type_name -> protos.PPBaseInfo
	107, // 73: protos.RspBackupStatus.result:type_name -> protos.Result
	110, // 74: protos.RspBackupStatus.slices:type_name -> protos.SliceHashAddr
	55,  // 75: protos.ReqTransferDownload.notice_file_slice_backup:type_name -> protos.NoticeFileSliceBackup
	106, // 76: protos.ReqTransferDownload.new_pp:type_name -> protos.PPBaseInfo
	107, // 77: protos.RspTransferDownload.result:type_name -> protos.Result
	107, // 78: protos.RspTransferDownloadResult.result:type_name -> protos.Result
	106, // 79: protos.ReqTransferDownloadWrong.new_pp:type_name -> protos.PPBaseInfo
	106, // 80: protos.ReqTransferDownloadWrong.original_pp:type_name -> protos.PPBaseInfo
	117, // 81: protos.ReqTransferDownloadWrong.slice_storage_info:type_name -> protos.SliceStorageInfo
	4,   // 82: protos.RspBPBLSPublicKey.bp_info:type_name -> protos.ReqRegister
	82,  // 83: protos.RspBlockCheck.block_list:type_name -> protos.BlockCheckInfo
	107, // 84: protos.RspDownloadTaskInfo.result:type_name -> protos.Result
	118, // 85: protos.RspShareLink.share_info:type_name -> protos.ShareLinkInfo
	107, // 86: protos.RspShareLink.result:type_name -> protos.Result
	107, // 87: protos.RspShareFile.result:type_name -> protos.Result
	107, // 88: protos.RspDeleteShare.result:type_name -> protos.Result
	92,  // 89: protos.RspGetShareFile.share_request:type_name -> protos.ReqGetShareFile
	107, // 90: protos.RspGetShareFile.result:type_name -> protos.Result
	109, // 91: protos.RspGetShareFile.file_info:type_name -> protos.FileInfo
	107, // 92: protos.RspTransferBLSSignature.result:type_name -> protos.Result
	119, // 93: protos.ReqReportNodeStatus.cpu:type_name -> protos.CpuStat
	120, // 94: protos.ReqReportNodeStatus.memory:type_name -> protos.MemoryStat
	121, // 95: protos.ReqReportNodeStatus.disk:type_name -> protos.DiskStat
	122, // 96: protos.ReqReportNodeStatus.bandwidth:type_name -> protos.BandwidthStat
	107, // 97: protos.RspReportNodeStatus.result:type_name -> protos.Result
	106, // 98: protos.ReqGetPPDowngradeInfo.my_address:type_name -> protos.PPBaseInfo
	107, // 99: protos.RspGetPPDowngradeInfo.result:type_name -> protos.Result
	106, // 100: protos.ReqGetPPStatus.my_address:type_name -> protos.PPBaseInfo
	107, // 101: protos.RspGetPPStatus.result:type_name -> protos.Result
	12,  // 102: protos.ReqGetWalletOz.upload_request:type_name -> protos.ReqUploadFile
	25,  // 103: protos.ReqGetWalletOz.download_request:type_name -> protos.ReqFileStorageInfo
	107, // 104: protos.RspGetWalletOz.result:type_name -> protos.Result
	105, // [105:105] is the sub-list for method output_type
	105, // [105:105] is the sub-list for method input_type
	105, // [105:105] is the sub-list for extension type_name
	105, // [105:105] is the sub-list for extension extendee
	0,   // [0:105] is the sub-list for field type_name
}

func init() { file_sds_proto_init() }
func file_sds_proto_init() {
	if File_sds_proto != nil {
		return
	}
	file_sds_comm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sds_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetPPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetPPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetSPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetSPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStartMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspStartMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStopMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspStopMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUploadFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUploadFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUploadFileSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUploadFileSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUploadSlicesWrong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUploadSlicesWrong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBackupFileSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBackupFileSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSpeedOfProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUploadSliceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReportUploadSliceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindMyFileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFindMyFileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFileStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFileStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFileReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFileReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadFileWrong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDownloadSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadSlicePause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDownloadSlicePause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReportDownloadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReportDownloadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReportTaskBP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRegisterNewPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspRegisterNewPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqActivatePP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspActivatePP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateDepositPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUpdateDepositPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeUpdatedDepositPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStateChangePP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspStateChangePP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeactivatePP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeactivatePP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeUnbondingPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeDeactivatedPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUnbondingSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPrepay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPrepay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeFileSliceBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReportBackupSliceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReportBackupSliceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBackupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBackupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTransferDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransferDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransferDownloadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTransferDownloadWrong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetHDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetHDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSpLatencyCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSpLatencyCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPpLatencyCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPpLatencyCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSpStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSpStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBLSPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBPBLSPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBlockCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBlockCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDownloadTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDownloadTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqClearDownloadTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShareLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShareLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTransferBLSSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTransferBLSSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReportNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReportNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetPPDowngradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetPPDowngradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetPPStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetPPStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetWalletOz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetWalletOz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBadVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sds_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeSpUnderMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sds_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   106,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sds_proto_goTypes,
		DependencyIndexes: file_sds_proto_depIdxs,
		MessageInfos:      file_sds_proto_msgTypes,
	}.Build()
	File_sds_proto = out.File
	file_sds_proto_rawDesc = nil
	file_sds_proto_goTypes = nil
	file_sds_proto_depIdxs = nil
}
