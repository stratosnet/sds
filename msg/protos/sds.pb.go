// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sds.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReqGetPPList struct {
	MyAddress *PPBaseInfo `protobuf:"bytes,1,opt,name=my_address,json=myAddress" json:"my_address,omitempty"`
}

func (m *ReqGetPPList) Reset()                    { *m = ReqGetPPList{} }
func (m *ReqGetPPList) String() string            { return proto.CompactTextString(m) }
func (*ReqGetPPList) ProtoMessage()               {}
func (*ReqGetPPList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ReqGetPPList) GetMyAddress() *PPBaseInfo {
	if m != nil {
		return m.MyAddress
	}
	return nil
}

type RspGetPPList struct {
	PpList []*PPBaseInfo `protobuf:"bytes,1,rep,name=pp_list,json=ppList" json:"pp_list,omitempty"`
	Result *Result       `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *RspGetPPList) Reset()                    { *m = RspGetPPList{} }
func (m *RspGetPPList) String() string            { return proto.CompactTextString(m) }
func (*RspGetPPList) ProtoMessage()               {}
func (*RspGetPPList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RspGetPPList) GetPpList() []*PPBaseInfo {
	if m != nil {
		return m.PpList
	}
	return nil
}

func (m *RspGetPPList) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqRegister struct {
	Address   *PPBaseInfo `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PublicKey []byte      `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	MyAddress *PPBaseInfo `protobuf:"bytes,3,opt,name=my_address,json=myAddress" json:"my_address,omitempty"`
}

func (m *ReqRegister) Reset()                    { *m = ReqRegister{} }
func (m *ReqRegister) String() string            { return proto.CompactTextString(m) }
func (*ReqRegister) ProtoMessage()               {}
func (*ReqRegister) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ReqRegister) GetAddress() *PPBaseInfo {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ReqRegister) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ReqRegister) GetMyAddress() *PPBaseInfo {
	if m != nil {
		return m.MyAddress
	}
	return nil
}

type RspRegister struct {
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	IsPP          bool    `protobuf:"varint,3,opt,name=isPP" json:"isPP,omitempty"`
}

func (m *RspRegister) Reset()                    { *m = RspRegister{} }
func (m *RspRegister) String() string            { return proto.CompactTextString(m) }
func (*RspRegister) ProtoMessage()               {}
func (*RspRegister) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RspRegister) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspRegister) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspRegister) GetIsPP() bool {
	if m != nil {
		return m.IsPP
	}
	return false
}

type ReqMining struct {
	Address   *PPBaseInfo `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PublicKey []byte      `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Sign      []byte      `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *ReqMining) Reset()                    { *m = ReqMining{} }
func (m *ReqMining) String() string            { return proto.CompactTextString(m) }
func (*ReqMining) ProtoMessage()               {}
func (*ReqMining) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ReqMining) GetAddress() *PPBaseInfo {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ReqMining) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ReqMining) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type RspMining struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RspMining) Reset()                    { *m = RspMining{} }
func (m *RspMining) String() string            { return proto.CompactTextString(m) }
func (*RspMining) ProtoMessage()               {}
func (*RspMining) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RspMining) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqUploadFile struct {
	FileInfo  *FileInfo   `protobuf:"bytes,1,opt,name=file_info,json=fileInfo" json:"file_info,omitempty"`
	MyAddress *PPBaseInfo `protobuf:"bytes,2,opt,name=my_address,json=myAddress" json:"my_address,omitempty"`
	Sign      []byte      `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	ReqId     string      `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	IsCover   bool        `protobuf:"varint,5,opt,name=is_cover,json=isCover" json:"is_cover,omitempty"`
}

func (m *ReqUploadFile) Reset()                    { *m = ReqUploadFile{} }
func (m *ReqUploadFile) String() string            { return proto.CompactTextString(m) }
func (*ReqUploadFile) ProtoMessage()               {}
func (*ReqUploadFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ReqUploadFile) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *ReqUploadFile) GetMyAddress() *PPBaseInfo {
	if m != nil {
		return m.MyAddress
	}
	return nil
}

func (m *ReqUploadFile) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *ReqUploadFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqUploadFile) GetIsCover() bool {
	if m != nil {
		return m.IsCover
	}
	return false
}

type RspUploadFile struct {
	StorageCer         string          `protobuf:"bytes,1,opt,name=storage_cer,json=storageCer" json:"storage_cer,omitempty"`
	PpList             []*SliceNumAddr `protobuf:"bytes,2,rep,name=pp_list,json=ppList" json:"pp_list,omitempty"`
	FileHash           string          `protobuf:"bytes,3,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	TaskId             string          `protobuf:"bytes,4,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	TotalSlice         int64           `protobuf:"varint,5,opt,name=total_slice,json=totalSlice" json:"total_slice,omitempty"`
	Result             *Result         `protobuf:"bytes,6,opt,name=result" json:"result,omitempty"`
	ReqId              string          `protobuf:"bytes,7,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	OwnerWalletAddress string          `protobuf:"bytes,8,opt,name=owner_wallet_address,json=ownerWalletAddress" json:"owner_wallet_address,omitempty"`
}

func (m *RspUploadFile) Reset()                    { *m = RspUploadFile{} }
func (m *RspUploadFile) String() string            { return proto.CompactTextString(m) }
func (*RspUploadFile) ProtoMessage()               {}
func (*RspUploadFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RspUploadFile) GetStorageCer() string {
	if m != nil {
		return m.StorageCer
	}
	return ""
}

func (m *RspUploadFile) GetPpList() []*SliceNumAddr {
	if m != nil {
		return m.PpList
	}
	return nil
}

func (m *RspUploadFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RspUploadFile) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RspUploadFile) GetTotalSlice() int64 {
	if m != nil {
		return m.TotalSlice
	}
	return 0
}

func (m *RspUploadFile) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspUploadFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspUploadFile) GetOwnerWalletAddress() string {
	if m != nil {
		return m.OwnerWalletAddress
	}
	return ""
}

type ReqUploadFileSlice struct {
	SliceNumAddr  *SliceNumAddr    `protobuf:"bytes,1,opt,name=slice_num_addr,json=sliceNumAddr" json:"slice_num_addr,omitempty"`
	FileCrc       uint32           `protobuf:"varint,2,opt,name=file_crc,json=fileCrc" json:"file_crc,omitempty"`
	SliceInfo     *SliceOffsetInfo `protobuf:"bytes,3,opt,name=slice_info,json=sliceInfo" json:"slice_info,omitempty"`
	Data          []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	FileHash      string           `protobuf:"bytes,5,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	WalletAddress string           `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	TaskId        string           `protobuf:"bytes,7,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	SliceSize     uint64           `protobuf:"varint,8,opt,name=slice_size,json=sliceSize" json:"slice_size,omitempty"`
}

func (m *ReqUploadFileSlice) Reset()                    { *m = ReqUploadFileSlice{} }
func (m *ReqUploadFileSlice) String() string            { return proto.CompactTextString(m) }
func (*ReqUploadFileSlice) ProtoMessage()               {}
func (*ReqUploadFileSlice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ReqUploadFileSlice) GetSliceNumAddr() *SliceNumAddr {
	if m != nil {
		return m.SliceNumAddr
	}
	return nil
}

func (m *ReqUploadFileSlice) GetFileCrc() uint32 {
	if m != nil {
		return m.FileCrc
	}
	return 0
}

func (m *ReqUploadFileSlice) GetSliceInfo() *SliceOffsetInfo {
	if m != nil {
		return m.SliceInfo
	}
	return nil
}

func (m *ReqUploadFileSlice) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqUploadFileSlice) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqUploadFileSlice) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqUploadFileSlice) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReqUploadFileSlice) GetSliceSize() uint64 {
	if m != nil {
		return m.SliceSize
	}
	return 0
}

type RspUploadFileSlice struct {
	Result        *Result       `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	SliceNumAddr  *SliceNumAddr `protobuf:"bytes,2,opt,name=slice_num_addr,json=sliceNumAddr" json:"slice_num_addr,omitempty"`
	FileHash      string        `protobuf:"bytes,3,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	SliceHash     string        `protobuf:"bytes,4,opt,name=slice_hash,json=sliceHash" json:"slice_hash,omitempty"`
	WalletAddress string        `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	SliceSize     uint64        `protobuf:"varint,6,opt,name=slice_size,json=sliceSize" json:"slice_size,omitempty"`
	TaskId        string        `protobuf:"bytes,7,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *RspUploadFileSlice) Reset()                    { *m = RspUploadFileSlice{} }
func (m *RspUploadFileSlice) String() string            { return proto.CompactTextString(m) }
func (*RspUploadFileSlice) ProtoMessage()               {}
func (*RspUploadFileSlice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *RspUploadFileSlice) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspUploadFileSlice) GetSliceNumAddr() *SliceNumAddr {
	if m != nil {
		return m.SliceNumAddr
	}
	return nil
}

func (m *RspUploadFileSlice) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RspUploadFileSlice) GetSliceHash() string {
	if m != nil {
		return m.SliceHash
	}
	return ""
}

func (m *RspUploadFileSlice) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspUploadFileSlice) GetSliceSize() uint64 {
	if m != nil {
		return m.SliceSize
	}
	return 0
}

func (m *RspUploadFileSlice) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type UploadSpeedOfProgress struct {
	FileHash  string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	SliceSize uint64 `protobuf:"varint,2,opt,name=slice_size,json=sliceSize" json:"slice_size,omitempty"`
}

func (m *UploadSpeedOfProgress) Reset()                    { *m = UploadSpeedOfProgress{} }
func (m *UploadSpeedOfProgress) String() string            { return proto.CompactTextString(m) }
func (*UploadSpeedOfProgress) ProtoMessage()               {}
func (*UploadSpeedOfProgress) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *UploadSpeedOfProgress) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *UploadSpeedOfProgress) GetSliceSize() uint64 {
	if m != nil {
		return m.SliceSize
	}
	return 0
}

type ReportUploadSliceResult struct {
	SliceNumAddr  *SliceNumAddr `protobuf:"bytes,1,opt,name=slice_num_addr,json=sliceNumAddr" json:"slice_num_addr,omitempty"`
	SliceHash     string        `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash" json:"slice_hash,omitempty"`
	FileHash      string        `protobuf:"bytes,3,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	UploadSuccess bool          `protobuf:"varint,4,opt,name=upload_success,json=uploadSuccess" json:"upload_success,omitempty"`
	IsPP          bool          `protobuf:"varint,5,opt,name=isPP" json:"isPP,omitempty"`
	SliceSize     uint64        `protobuf:"varint,6,opt,name=slice_size,json=sliceSize" json:"slice_size,omitempty"`
	Sign          []byte        `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId        string        `protobuf:"bytes,8,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	WalletAddress string        `protobuf:"bytes,9,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
}

func (m *ReportUploadSliceResult) Reset()                    { *m = ReportUploadSliceResult{} }
func (m *ReportUploadSliceResult) String() string            { return proto.CompactTextString(m) }
func (*ReportUploadSliceResult) ProtoMessage()               {}
func (*ReportUploadSliceResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *ReportUploadSliceResult) GetSliceNumAddr() *SliceNumAddr {
	if m != nil {
		return m.SliceNumAddr
	}
	return nil
}

func (m *ReportUploadSliceResult) GetSliceHash() string {
	if m != nil {
		return m.SliceHash
	}
	return ""
}

func (m *ReportUploadSliceResult) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReportUploadSliceResult) GetUploadSuccess() bool {
	if m != nil {
		return m.UploadSuccess
	}
	return false
}

func (m *ReportUploadSliceResult) GetIsPP() bool {
	if m != nil {
		return m.IsPP
	}
	return false
}

func (m *ReportUploadSliceResult) GetSliceSize() uint64 {
	if m != nil {
		return m.SliceSize
	}
	return 0
}

func (m *ReportUploadSliceResult) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *ReportUploadSliceResult) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReportUploadSliceResult) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

type RspReportUploadSliceResult struct {
	Result       *Result       `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	SliceNumAddr *SliceNumAddr `protobuf:"bytes,2,opt,name=slice_num_addr,json=sliceNumAddr" json:"slice_num_addr,omitempty"`
}

func (m *RspReportUploadSliceResult) Reset()                    { *m = RspReportUploadSliceResult{} }
func (m *RspReportUploadSliceResult) String() string            { return proto.CompactTextString(m) }
func (*RspReportUploadSliceResult) ProtoMessage()               {}
func (*RspReportUploadSliceResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *RspReportUploadSliceResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspReportUploadSliceResult) GetSliceNumAddr() *SliceNumAddr {
	if m != nil {
		return m.SliceNumAddr
	}
	return nil
}

type ReqFindMyFileList struct {
	WalletAddress string       `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	FileName      string       `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	Directory     string       `protobuf:"bytes,3,opt,name=directory" json:"directory,omitempty"`
	ReqId         string       `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	FileType      FileSortType `protobuf:"varint,5,opt,name=file_type,json=fileType,enum=protos.FileSortType" json:"file_type,omitempty"`
	IsUp          bool         `protobuf:"varint,6,opt,name=is_up,json=isUp" json:"is_up,omitempty"`
	Keyword       string       `protobuf:"bytes,7,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *ReqFindMyFileList) Reset()                    { *m = ReqFindMyFileList{} }
func (m *ReqFindMyFileList) String() string            { return proto.CompactTextString(m) }
func (*ReqFindMyFileList) ProtoMessage()               {}
func (*ReqFindMyFileList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *ReqFindMyFileList) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqFindMyFileList) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ReqFindMyFileList) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ReqFindMyFileList) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqFindMyFileList) GetFileType() FileSortType {
	if m != nil {
		return m.FileType
	}
	return FileSortType_DEF
}

func (m *ReqFindMyFileList) GetIsUp() bool {
	if m != nil {
		return m.IsUp
	}
	return false
}

func (m *ReqFindMyFileList) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

type RspFindMyFileList struct {
	FileInfo      []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
	WalletAddress string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string      `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result     `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspFindMyFileList) Reset()                    { *m = RspFindMyFileList{} }
func (m *RspFindMyFileList) String() string            { return proto.CompactTextString(m) }
func (*RspFindMyFileList) ProtoMessage()               {}
func (*RspFindMyFileList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *RspFindMyFileList) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *RspFindMyFileList) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspFindMyFileList) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspFindMyFileList) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqFindDirectoryTree struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	PathHash      string `protobuf:"bytes,2,opt,name=path_hash,json=pathHash" json:"path_hash,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqFindDirectoryTree) Reset()                    { *m = ReqFindDirectoryTree{} }
func (m *ReqFindDirectoryTree) String() string            { return proto.CompactTextString(m) }
func (*ReqFindDirectoryTree) ProtoMessage()               {}
func (*ReqFindDirectoryTree) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ReqFindDirectoryTree) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqFindDirectoryTree) GetPathHash() string {
	if m != nil {
		return m.PathHash
	}
	return ""
}

func (m *ReqFindDirectoryTree) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspFindDirectoryTree struct {
	WalletAddress string      `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Directory     string      `protobuf:"bytes,2,opt,name=directory" json:"directory,omitempty"`
	FileInfo      []*FileInfo `protobuf:"bytes,3,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
	ReqId         string      `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result     `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
}

func (m *RspFindDirectoryTree) Reset()                    { *m = RspFindDirectoryTree{} }
func (m *RspFindDirectoryTree) String() string            { return proto.CompactTextString(m) }
func (*RspFindDirectoryTree) ProtoMessage()               {}
func (*RspFindDirectoryTree) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *RspFindDirectoryTree) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspFindDirectoryTree) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *RspFindDirectoryTree) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *RspFindDirectoryTree) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspFindDirectoryTree) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqFileStorageInfo struct {
	FileIndexes *FileIndexes `protobuf:"bytes,1,opt,name=file_indexes,json=fileIndexes" json:"file_indexes,omitempty"`
	Sign        []byte       `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	ReqId       string       `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqFileStorageInfo) Reset()                    { *m = ReqFileStorageInfo{} }
func (m *ReqFileStorageInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqFileStorageInfo) ProtoMessage()               {}
func (*ReqFileStorageInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *ReqFileStorageInfo) GetFileIndexes() *FileIndexes {
	if m != nil {
		return m.FileIndexes
	}
	return nil
}

func (m *ReqFileStorageInfo) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *ReqFileStorageInfo) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspFileStorageInfo struct {
	VisitCer      string               `protobuf:"bytes,1,opt,name=visit_cer,json=visitCer" json:"visit_cer,omitempty"`
	WalletAddress string               `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	SliceInfo     []*DownloadSliceInfo `protobuf:"bytes,3,rep,name=slice_info,json=sliceInfo" json:"slice_info,omitempty"`
	FileHash      string               `protobuf:"bytes,4,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	FileName      string               `protobuf:"bytes,5,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	Result        *Result              `protobuf:"bytes,6,opt,name=result" json:"result,omitempty"`
	ReqId         string               `protobuf:"bytes,7,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	SavePath      string               `protobuf:"bytes,8,opt,name=save_path,json=savePath" json:"save_path,omitempty"`
	FileSize      uint64               `protobuf:"varint,9,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

func (m *RspFileStorageInfo) Reset()                    { *m = RspFileStorageInfo{} }
func (m *RspFileStorageInfo) String() string            { return proto.CompactTextString(m) }
func (*RspFileStorageInfo) ProtoMessage()               {}
func (*RspFileStorageInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *RspFileStorageInfo) GetVisitCer() string {
	if m != nil {
		return m.VisitCer
	}
	return ""
}

func (m *RspFileStorageInfo) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspFileStorageInfo) GetSliceInfo() []*DownloadSliceInfo {
	if m != nil {
		return m.SliceInfo
	}
	return nil
}

func (m *RspFileStorageInfo) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RspFileStorageInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *RspFileStorageInfo) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspFileStorageInfo) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspFileStorageInfo) GetSavePath() string {
	if m != nil {
		return m.SavePath
	}
	return ""
}

func (m *RspFileStorageInfo) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type ReqDownloadSlice struct {
	SliceInfo     *SliceOffsetInfo `protobuf:"bytes,1,opt,name=slice_info,json=sliceInfo" json:"slice_info,omitempty"`
	WalletAddress string           `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	FileHash      string           `protobuf:"bytes,3,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	TaskId        string           `protobuf:"bytes,4,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	SavePath      string           `protobuf:"bytes,5,opt,name=save_path,json=savePath" json:"save_path,omitempty"`
}

func (m *ReqDownloadSlice) Reset()                    { *m = ReqDownloadSlice{} }
func (m *ReqDownloadSlice) String() string            { return proto.CompactTextString(m) }
func (*ReqDownloadSlice) ProtoMessage()               {}
func (*ReqDownloadSlice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *ReqDownloadSlice) GetSliceInfo() *SliceOffsetInfo {
	if m != nil {
		return m.SliceInfo
	}
	return nil
}

func (m *ReqDownloadSlice) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqDownloadSlice) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqDownloadSlice) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReqDownloadSlice) GetSavePath() string {
	if m != nil {
		return m.SavePath
	}
	return ""
}

type RspDownloadSlice struct {
	SliceInfo     *SliceOffsetInfo `protobuf:"bytes,1,opt,name=slice_info,json=sliceInfo" json:"slice_info,omitempty"`
	FileCrc       uint32           `protobuf:"varint,2,opt,name=file_crc,json=fileCrc" json:"file_crc,omitempty"`
	FileHash      string           `protobuf:"bytes,3,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	Data          []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WalletAddress string           `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	TaskId        string           `protobuf:"bytes,6,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	SliceSize     uint64           `protobuf:"varint,7,opt,name=slice_size,json=sliceSize" json:"slice_size,omitempty"`
	NeedReport    bool             `protobuf:"varint,8,opt,name=needReport" json:"needReport,omitempty"`
	SavePath      string           `protobuf:"bytes,9,opt,name=save_path,json=savePath" json:"save_path,omitempty"`
	Result        *Result          `protobuf:"bytes,10,opt,name=result" json:"result,omitempty"`
}

func (m *RspDownloadSlice) Reset()                    { *m = RspDownloadSlice{} }
func (m *RspDownloadSlice) String() string            { return proto.CompactTextString(m) }
func (*RspDownloadSlice) ProtoMessage()               {}
func (*RspDownloadSlice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *RspDownloadSlice) GetSliceInfo() *SliceOffsetInfo {
	if m != nil {
		return m.SliceInfo
	}
	return nil
}

func (m *RspDownloadSlice) GetFileCrc() uint32 {
	if m != nil {
		return m.FileCrc
	}
	return 0
}

func (m *RspDownloadSlice) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RspDownloadSlice) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RspDownloadSlice) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspDownloadSlice) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RspDownloadSlice) GetSliceSize() uint64 {
	if m != nil {
		return m.SliceSize
	}
	return 0
}

func (m *RspDownloadSlice) GetNeedReport() bool {
	if m != nil {
		return m.NeedReport
	}
	return false
}

func (m *RspDownloadSlice) GetSavePath() string {
	if m != nil {
		return m.SavePath
	}
	return ""
}

func (m *RspDownloadSlice) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqDownloadSloceWrong struct {
	WalletAddress string            `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	TaskId        string            `protobuf:"bytes,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	SliceHash     string            `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash" json:"slice_hash,omitempty"`
	Type          DownloadWrongType `protobuf:"varint,4,opt,name=type,enum=protos.DownloadWrongType" json:"type,omitempty"`
	SavePath      string            `protobuf:"bytes,5,opt,name=save_path,json=savePath" json:"save_path,omitempty"`
}

func (m *ReqDownloadSloceWrong) Reset()                    { *m = ReqDownloadSloceWrong{} }
func (m *ReqDownloadSloceWrong) String() string            { return proto.CompactTextString(m) }
func (*ReqDownloadSloceWrong) ProtoMessage()               {}
func (*ReqDownloadSloceWrong) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *ReqDownloadSloceWrong) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqDownloadSloceWrong) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReqDownloadSloceWrong) GetSliceHash() string {
	if m != nil {
		return m.SliceHash
	}
	return ""
}

func (m *ReqDownloadSloceWrong) GetType() DownloadWrongType {
	if m != nil {
		return m.Type
	}
	return DownloadWrongType_LOSESLICE
}

func (m *ReqDownloadSloceWrong) GetSavePath() string {
	if m != nil {
		return m.SavePath
	}
	return ""
}

type RspDownloadSloceWrong struct {
	WalletAddress string             `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	FileHash      string             `protobuf:"bytes,2,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	TaskId        string             `protobuf:"bytes,3,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	NewSliceInfo  *DownloadSliceInfo `protobuf:"bytes,4,opt,name=new_slice_info,json=newSliceInfo" json:"new_slice_info,omitempty"`
	SavePath      string             `protobuf:"bytes,5,opt,name=save_path,json=savePath" json:"save_path,omitempty"`
	Result        *Result            `protobuf:"bytes,6,opt,name=result" json:"result,omitempty"`
}

func (m *RspDownloadSloceWrong) Reset()                    { *m = RspDownloadSloceWrong{} }
func (m *RspDownloadSloceWrong) String() string            { return proto.CompactTextString(m) }
func (*RspDownloadSloceWrong) ProtoMessage()               {}
func (*RspDownloadSloceWrong) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *RspDownloadSloceWrong) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspDownloadSloceWrong) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RspDownloadSloceWrong) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RspDownloadSloceWrong) GetNewSliceInfo() *DownloadSliceInfo {
	if m != nil {
		return m.NewSliceInfo
	}
	return nil
}

func (m *RspDownloadSloceWrong) GetSavePath() string {
	if m != nil {
		return m.SavePath
	}
	return ""
}

func (m *RspDownloadSloceWrong) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqDownloadSlocePause struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	FileHash      string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqDownloadSlocePause) Reset()                    { *m = ReqDownloadSlocePause{} }
func (m *ReqDownloadSlocePause) String() string            { return proto.CompactTextString(m) }
func (*ReqDownloadSlocePause) ProtoMessage()               {}
func (*ReqDownloadSlocePause) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *ReqDownloadSlocePause) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqDownloadSlocePause) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqDownloadSlocePause) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspDownloadSlocePause struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	FileHash      string  `protobuf:"bytes,2,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspDownloadSlocePause) Reset()                    { *m = RspDownloadSlocePause{} }
func (m *RspDownloadSlocePause) String() string            { return proto.CompactTextString(m) }
func (*RspDownloadSlocePause) ProtoMessage()               {}
func (*RspDownloadSlocePause) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *RspDownloadSlocePause) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspDownloadSlocePause) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RspDownloadSlocePause) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspDownloadSlocePause) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqReportDownloadResult struct {
	IsPP            bool               `protobuf:"varint,1,opt,name=isPP" json:"isPP,omitempty"`
	SliceInfo       *DownloadSliceInfo `protobuf:"bytes,2,opt,name=slice_info,json=sliceInfo" json:"slice_info,omitempty"`
	FileHash        string             `protobuf:"bytes,3,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	WalletAddress   string             `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Sign            []byte             `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId          string             `protobuf:"bytes,6,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	MyWalletAddress string             `protobuf:"bytes,7,opt,name=my_wallet_address,json=myWalletAddress" json:"my_wallet_address,omitempty"`
}

func (m *ReqReportDownloadResult) Reset()                    { *m = ReqReportDownloadResult{} }
func (m *ReqReportDownloadResult) String() string            { return proto.CompactTextString(m) }
func (*ReqReportDownloadResult) ProtoMessage()               {}
func (*ReqReportDownloadResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *ReqReportDownloadResult) GetIsPP() bool {
	if m != nil {
		return m.IsPP
	}
	return false
}

func (m *ReqReportDownloadResult) GetSliceInfo() *DownloadSliceInfo {
	if m != nil {
		return m.SliceInfo
	}
	return nil
}

func (m *ReqReportDownloadResult) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqReportDownloadResult) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqReportDownloadResult) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *ReqReportDownloadResult) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReqReportDownloadResult) GetMyWalletAddress() string {
	if m != nil {
		return m.MyWalletAddress
	}
	return ""
}

type RspReportDownloadResult struct {
	Result    *Result            `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	SliceInfo *DownloadSliceInfo `protobuf:"bytes,2,opt,name=slice_info,json=sliceInfo" json:"slice_info,omitempty"`
}

func (m *RspReportDownloadResult) Reset()                    { *m = RspReportDownloadResult{} }
func (m *RspReportDownloadResult) String() string            { return proto.CompactTextString(m) }
func (*RspReportDownloadResult) ProtoMessage()               {}
func (*RspReportDownloadResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *RspReportDownloadResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspReportDownloadResult) GetSliceInfo() *DownloadSliceInfo {
	if m != nil {
		return m.SliceInfo
	}
	return nil
}

type ReqReportTaskBP struct {
	TaskId   string      `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Reporter *PPBaseInfo `protobuf:"bytes,2,opt,name=reporter" json:"reporter,omitempty"`
	Traffic  uint64      `protobuf:"varint,3,opt,name=traffic" json:"traffic,omitempty"`
}

func (m *ReqReportTaskBP) Reset()                    { *m = ReqReportTaskBP{} }
func (m *ReqReportTaskBP) String() string            { return proto.CompactTextString(m) }
func (*ReqReportTaskBP) ProtoMessage()               {}
func (*ReqReportTaskBP) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *ReqReportTaskBP) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReqReportTaskBP) GetReporter() *PPBaseInfo {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *ReqReportTaskBP) GetTraffic() uint64 {
	if m != nil {
		return m.Traffic
	}
	return 0
}

type ReqRegisterNewPP struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	DiskSize      uint64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize" json:"disk_size,omitempty"`
	MemorySize    uint64 `protobuf:"varint,3,opt,name=memory_size,json=memorySize" json:"memory_size,omitempty"`
	OsAndVer      string `protobuf:"bytes,4,opt,name=os_and_ver,json=osAndVer" json:"os_and_ver,omitempty"`
	CpuInfo       string `protobuf:"bytes,5,opt,name=cpu_info,json=cpuInfo" json:"cpu_info,omitempty"`
	MacAddress    string `protobuf:"bytes,6,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	Version       uint32 `protobuf:"varint,7,opt,name=version" json:"version,omitempty"`
	PubKey        []byte `protobuf:"bytes,8,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Sign          []byte `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *ReqRegisterNewPP) Reset()                    { *m = ReqRegisterNewPP{} }
func (m *ReqRegisterNewPP) String() string            { return proto.CompactTextString(m) }
func (*ReqRegisterNewPP) ProtoMessage()               {}
func (*ReqRegisterNewPP) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *ReqRegisterNewPP) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqRegisterNewPP) GetDiskSize() uint64 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *ReqRegisterNewPP) GetMemorySize() uint64 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *ReqRegisterNewPP) GetOsAndVer() string {
	if m != nil {
		return m.OsAndVer
	}
	return ""
}

func (m *ReqRegisterNewPP) GetCpuInfo() string {
	if m != nil {
		return m.CpuInfo
	}
	return ""
}

func (m *ReqRegisterNewPP) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *ReqRegisterNewPP) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReqRegisterNewPP) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *ReqRegisterNewPP) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type RspRegisterNewPP struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RspRegisterNewPP) Reset()                    { *m = RspRegisterNewPP{} }
func (m *RspRegisterNewPP) String() string            { return proto.CompactTextString(m) }
func (*RspRegisterNewPP) ProtoMessage()               {}
func (*RspRegisterNewPP) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *RspRegisterNewPP) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqDeleteFile struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	FileHash      string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	Sign          []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqDeleteFile) Reset()                    { *m = ReqDeleteFile{} }
func (m *ReqDeleteFile) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteFile) ProtoMessage()               {}
func (*ReqDeleteFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *ReqDeleteFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqDeleteFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqDeleteFile) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *ReqDeleteFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspDeleteFile struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	FileHash      string  `protobuf:"bytes,2,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	ReqId         string  `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *RspDeleteFile) Reset()                    { *m = RspDeleteFile{} }
func (m *RspDeleteFile) String() string            { return proto.CompactTextString(m) }
func (*RspDeleteFile) ProtoMessage()               {}
func (*RspDeleteFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *RspDeleteFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspDeleteFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *RspDeleteFile) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspDeleteFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

// file transfer
// SP notify new PP to get file from storing PP，slice info are included
// new pp transfer to old pp, slice infor are not included,
type ReqTransferNotice struct {
	SliceStorageInfo *SliceStorageInfo `protobuf:"bytes,1,opt,name=slice_storage_info,json=sliceStorageInfo" json:"slice_storage_info,omitempty"`
	TransferCer      string            `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
	FromSp           bool              `protobuf:"varint,3,opt,name=from_sp,json=fromSp" json:"from_sp,omitempty"`
	StoragePpInfo    *PPBaseInfo       `protobuf:"bytes,4,opt,name=storage_pp_info,json=storagePpInfo" json:"storage_pp_info,omitempty"`
}

func (m *ReqTransferNotice) Reset()                    { *m = ReqTransferNotice{} }
func (m *ReqTransferNotice) String() string            { return proto.CompactTextString(m) }
func (*ReqTransferNotice) ProtoMessage()               {}
func (*ReqTransferNotice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *ReqTransferNotice) GetSliceStorageInfo() *SliceStorageInfo {
	if m != nil {
		return m.SliceStorageInfo
	}
	return nil
}

func (m *ReqTransferNotice) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

func (m *ReqTransferNotice) GetFromSp() bool {
	if m != nil {
		return m.FromSp
	}
	return false
}

func (m *ReqTransferNotice) GetStoragePpInfo() *PPBaseInfo {
	if m != nil {
		return m.StoragePpInfo
	}
	return nil
}

type RspTransferNotice struct {
	Result        *Result     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	TransferCer   string      `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
	StoragePpInfo *PPBaseInfo `protobuf:"bytes,3,opt,name=storage_pp_info,json=storagePpInfo" json:"storage_pp_info,omitempty"`
}

func (m *RspTransferNotice) Reset()                    { *m = RspTransferNotice{} }
func (m *RspTransferNotice) String() string            { return proto.CompactTextString(m) }
func (*RspTransferNotice) ProtoMessage()               {}
func (*RspTransferNotice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *RspTransferNotice) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspTransferNotice) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

func (m *RspTransferNotice) GetStoragePpInfo() *PPBaseInfo {
	if m != nil {
		return m.StoragePpInfo
	}
	return nil
}

//  storagePP-SP
type ReqValidateTransferCer struct {
	TransferCer string      `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
	NewPp       *PPBaseInfo `protobuf:"bytes,2,opt,name=new_pp,json=newPp" json:"new_pp,omitempty"`
	OriginalPp  *PPBaseInfo `protobuf:"bytes,3,opt,name=original_pp,json=originalPp" json:"original_pp,omitempty"`
}

func (m *ReqValidateTransferCer) Reset()                    { *m = ReqValidateTransferCer{} }
func (m *ReqValidateTransferCer) String() string            { return proto.CompactTextString(m) }
func (*ReqValidateTransferCer) ProtoMessage()               {}
func (*ReqValidateTransferCer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *ReqValidateTransferCer) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

func (m *ReqValidateTransferCer) GetNewPp() *PPBaseInfo {
	if m != nil {
		return m.NewPp
	}
	return nil
}

func (m *ReqValidateTransferCer) GetOriginalPp() *PPBaseInfo {
	if m != nil {
		return m.OriginalPp
	}
	return nil
}

//  SP-PP PP-PP
type RspValidateTransferCer struct {
	Result      *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	TransferCer string  `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
}

func (m *RspValidateTransferCer) Reset()                    { *m = RspValidateTransferCer{} }
func (m *RspValidateTransferCer) String() string            { return proto.CompactTextString(m) }
func (*RspValidateTransferCer) ProtoMessage()               {}
func (*RspValidateTransferCer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *RspValidateTransferCer) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspValidateTransferCer) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

type ReqTransferDownload struct {
	TransferCer string `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
}

func (m *ReqTransferDownload) Reset()                    { *m = ReqTransferDownload{} }
func (m *ReqTransferDownload) String() string            { return proto.CompactTextString(m) }
func (*ReqTransferDownload) ProtoMessage()               {}
func (*ReqTransferDownload) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *ReqTransferDownload) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

type RspTransferDownload struct {
	TransferCer string  `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
	Data        []byte  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Offset      uint64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	SliceSize   uint64  `protobuf:"varint,4,opt,name=slice_size,json=sliceSize" json:"slice_size,omitempty"`
	Result      *Result `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
}

func (m *RspTransferDownload) Reset()                    { *m = RspTransferDownload{} }
func (m *RspTransferDownload) String() string            { return proto.CompactTextString(m) }
func (*RspTransferDownload) ProtoMessage()               {}
func (*RspTransferDownload) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *RspTransferDownload) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

func (m *RspTransferDownload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RspTransferDownload) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RspTransferDownload) GetSliceSize() uint64 {
	if m != nil {
		return m.SliceSize
	}
	return 0
}

func (m *RspTransferDownload) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type RspTransferDownloadResult struct {
	TransferCer string  `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
	Result      *Result `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *RspTransferDownloadResult) Reset()                    { *m = RspTransferDownloadResult{} }
func (m *RspTransferDownloadResult) String() string            { return proto.CompactTextString(m) }
func (*RspTransferDownloadResult) ProtoMessage()               {}
func (*RspTransferDownloadResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *RspTransferDownloadResult) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

func (m *RspTransferDownloadResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqReportTransferResult struct {
	TransferCer string      `protobuf:"bytes,1,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
	NewPp       *PPBaseInfo `protobuf:"bytes,2,opt,name=new_pp,json=newPp" json:"new_pp,omitempty"`
	Result      *Result     `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	IsNew       bool        `protobuf:"varint,4,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
}

func (m *ReqReportTransferResult) Reset()                    { *m = ReqReportTransferResult{} }
func (m *ReqReportTransferResult) String() string            { return proto.CompactTextString(m) }
func (*ReqReportTransferResult) ProtoMessage()               {}
func (*ReqReportTransferResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *ReqReportTransferResult) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

func (m *ReqReportTransferResult) GetNewPp() *PPBaseInfo {
	if m != nil {
		return m.NewPp
	}
	return nil
}

func (m *ReqReportTransferResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReqReportTransferResult) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

type RspReportTransferResult struct {
	Result      *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	TransferCer string  `protobuf:"bytes,2,opt,name=transfer_cer,json=transferCer" json:"transfer_cer,omitempty"`
}

func (m *RspReportTransferResult) Reset()                    { *m = RspReportTransferResult{} }
func (m *RspReportTransferResult) String() string            { return proto.CompactTextString(m) }
func (*RspReportTransferResult) ProtoMessage()               {}
func (*RspReportTransferResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

func (m *RspReportTransferResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspReportTransferResult) GetTransferCer() string {
	if m != nil {
		return m.TransferCer
	}
	return ""
}

// sp - pp get storage info
type ReqGetHDInfo struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
}

func (m *ReqGetHDInfo) Reset()                    { *m = ReqGetHDInfo{} }
func (m *ReqGetHDInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqGetHDInfo) ProtoMessage()               {}
func (*ReqGetHDInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *ReqGetHDInfo) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

type RspGetHDInfo struct {
	DiskSize      uint64 `protobuf:"varint,1,opt,name=disk_size,json=diskSize" json:"disk_size,omitempty"`
	DiskFree      uint64 `protobuf:"varint,2,opt,name=disk_free,json=diskFree" json:"disk_free,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
}

func (m *RspGetHDInfo) Reset()                    { *m = RspGetHDInfo{} }
func (m *RspGetHDInfo) String() string            { return proto.CompactTextString(m) }
func (*RspGetHDInfo) ProtoMessage()               {}
func (*RspGetHDInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *RspGetHDInfo) GetDiskSize() uint64 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *RspGetHDInfo) GetDiskFree() uint64 {
	if m != nil {
		return m.DiskFree
	}
	return 0
}

func (m *RspGetHDInfo) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

//
type ReqSendChatMessages struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Message       string  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Type          MsgType `protobuf:"varint,3,opt,name=type,enum=protos.MsgType" json:"type,omitempty"`
}

func (m *ReqSendChatMessages) Reset()                    { *m = ReqSendChatMessages{} }
func (m *ReqSendChatMessages) String() string            { return proto.CompactTextString(m) }
func (*ReqSendChatMessages) ProtoMessage()               {}
func (*ReqSendChatMessages) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *ReqSendChatMessages) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqSendChatMessages) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqSendChatMessages) GetType() MsgType {
	if m != nil {
		return m.Type
	}
	return MsgType_DEFAULT
}

type RspSendChatMessages struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RspSendChatMessages) Reset()                    { *m = RspSendChatMessages{} }
func (m *RspSendChatMessages) String() string            { return proto.CompactTextString(m) }
func (*RspSendChatMessages) ProtoMessage()               {}
func (*RspSendChatMessages) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

func (m *RspSendChatMessages) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

// sp
type ReqDeleteSlice struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	SliceHash     string `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash" json:"slice_hash,omitempty"`
}

func (m *ReqDeleteSlice) Reset()                    { *m = ReqDeleteSlice{} }
func (m *ReqDeleteSlice) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteSlice) ProtoMessage()               {}
func (*ReqDeleteSlice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

func (m *ReqDeleteSlice) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqDeleteSlice) GetSliceHash() string {
	if m != nil {
		return m.SliceHash
	}
	return ""
}

type RspDeleteSlice struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	SliceHash     string  `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash" json:"slice_hash,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *RspDeleteSlice) Reset()                    { *m = RspDeleteSlice{} }
func (m *RspDeleteSlice) String() string            { return proto.CompactTextString(m) }
func (*RspDeleteSlice) ProtoMessage()               {}
func (*RspDeleteSlice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *RspDeleteSlice) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspDeleteSlice) GetSliceHash() string {
	if m != nil {
		return m.SliceHash
	}
	return ""
}

func (m *RspDeleteSlice) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

//
type ReqMakeDirectory struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Directory     string `protobuf:"bytes,2,opt,name=directory" json:"directory,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqMakeDirectory) Reset()                    { *m = ReqMakeDirectory{} }
func (m *ReqMakeDirectory) String() string            { return proto.CompactTextString(m) }
func (*ReqMakeDirectory) ProtoMessage()               {}
func (*ReqMakeDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

func (m *ReqMakeDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqMakeDirectory) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ReqMakeDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspMakeDirectory struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *RspMakeDirectory) Reset()                    { *m = RspMakeDirectory{} }
func (m *RspMakeDirectory) String() string            { return proto.CompactTextString(m) }
func (*RspMakeDirectory) ProtoMessage()               {}
func (*RspMakeDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *RspMakeDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspMakeDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspMakeDirectory) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqRemoveDirectory struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Directory     string `protobuf:"bytes,2,opt,name=directory" json:"directory,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqRemoveDirectory) Reset()                    { *m = ReqRemoveDirectory{} }
func (m *ReqRemoveDirectory) String() string            { return proto.CompactTextString(m) }
func (*ReqRemoveDirectory) ProtoMessage()               {}
func (*ReqRemoveDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *ReqRemoveDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqRemoveDirectory) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ReqRemoveDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspRemoveDirectory struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *RspRemoveDirectory) Reset()                    { *m = RspRemoveDirectory{} }
func (m *RspRemoveDirectory) String() string            { return proto.CompactTextString(m) }
func (*RspRemoveDirectory) ProtoMessage()               {}
func (*RspRemoveDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *RspRemoveDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspRemoveDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspRemoveDirectory) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqMoveFileDirectory struct {
	WalletAddress     string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId             string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	DirectoryTarget   string `protobuf:"bytes,3,opt,name=directory_target,json=directoryTarget" json:"directory_target,omitempty"`
	DirectoryOriginal string `protobuf:"bytes,4,opt,name=directory_original,json=directoryOriginal" json:"directory_original,omitempty"`
	FileHash          string `protobuf:"bytes,5,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
}

func (m *ReqMoveFileDirectory) Reset()                    { *m = ReqMoveFileDirectory{} }
func (m *ReqMoveFileDirectory) String() string            { return proto.CompactTextString(m) }
func (*ReqMoveFileDirectory) ProtoMessage()               {}
func (*ReqMoveFileDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

func (m *ReqMoveFileDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqMoveFileDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqMoveFileDirectory) GetDirectoryTarget() string {
	if m != nil {
		return m.DirectoryTarget
	}
	return ""
}

func (m *ReqMoveFileDirectory) GetDirectoryOriginal() string {
	if m != nil {
		return m.DirectoryOriginal
	}
	return ""
}

func (m *ReqMoveFileDirectory) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

type RspMoveFileDirectory struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	FilePath      string  `protobuf:"bytes,3,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspMoveFileDirectory) Reset()                    { *m = RspMoveFileDirectory{} }
func (m *RspMoveFileDirectory) String() string            { return proto.CompactTextString(m) }
func (*RspMoveFileDirectory) ProtoMessage()               {}
func (*RspMoveFileDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *RspMoveFileDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspMoveFileDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspMoveFileDirectory) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *RspMoveFileDirectory) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqBLSPublicKey struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReqBLSPublicKey) Reset()                    { *m = ReqBLSPublicKey{} }
func (m *ReqBLSPublicKey) String() string            { return proto.CompactTextString(m) }
func (*ReqBLSPublicKey) ProtoMessage()               {}
func (*ReqBLSPublicKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *ReqBLSPublicKey) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ReqBLSPublicKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// get bp BLS public key
type RspBPBLSPublicKey struct {
	BpInfo *ReqRegister `protobuf:"bytes,1,opt,name=bp_info,json=bpInfo" json:"bp_info,omitempty"`
	Code   int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Id     string       `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *RspBPBLSPublicKey) Reset()                    { *m = RspBPBLSPublicKey{} }
func (m *RspBPBLSPublicKey) String() string            { return proto.CompactTextString(m) }
func (*RspBPBLSPublicKey) ProtoMessage()               {}
func (*RspBPBLSPublicKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

func (m *RspBPBLSPublicKey) GetBpInfo() *ReqRegister {
	if m != nil {
		return m.BpInfo
	}
	return nil
}

func (m *RspBPBLSPublicKey) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RspBPBLSPublicKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReqBalance struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Id            string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReqBalance) Reset()                    { *m = ReqBalance{} }
func (m *ReqBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqBalance) ProtoMessage()               {}
func (*ReqBalance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

func (m *ReqBalance) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqBalance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RspBalance struct {
	Balance float32 `protobuf:"fixed32,1,opt,name=balance" json:"balance,omitempty"`
	Code    int64   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Id      string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *RspBalance) Reset()                    { *m = RspBalance{} }
func (m *RspBalance) String() string            { return proto.CompactTextString(m) }
func (*RspBalance) ProtoMessage()               {}
func (*RspBalance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{56} }

func (m *RspBalance) GetBalance() float32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *RspBalance) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RspBalance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReqTransaction struct {
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash" json:"transaction_hash,omitempty"`
	Code            int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Id              string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *ReqTransaction) Reset()                    { *m = ReqTransaction{} }
func (m *ReqTransaction) String() string            { return proto.CompactTextString(m) }
func (*ReqTransaction) ProtoMessage()               {}
func (*ReqTransaction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{57} }

func (m *ReqTransaction) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *ReqTransaction) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReqTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RspTransaction struct {
	Rest string `protobuf:"bytes,1,opt,name=rest" json:"rest,omitempty"`
	Code int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *RspTransaction) Reset()                    { *m = RspTransaction{} }
func (m *RspTransaction) String() string            { return proto.CompactTextString(m) }
func (*RspTransaction) ProtoMessage()               {}
func (*RspTransaction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{58} }

func (m *RspTransaction) GetRest() string {
	if m != nil {
		return m.Rest
	}
	return ""
}

func (m *RspTransaction) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RspTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReqBlockInfo struct {
	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *ReqBlockInfo) Reset()                    { *m = ReqBlockInfo{} }
func (m *ReqBlockInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqBlockInfo) ProtoMessage()               {}
func (*ReqBlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{59} }

func (m *ReqBlockInfo) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *ReqBlockInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RspBlockInfo struct {
	BlockInfo []byte `protobuf:"bytes,1,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	Code      int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *RspBlockInfo) Reset()                    { *m = RspBlockInfo{} }
func (m *RspBlockInfo) String() string            { return proto.CompactTextString(m) }
func (*RspBlockInfo) ProtoMessage()               {}
func (*RspBlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{60} }

func (m *RspBlockInfo) GetBlockInfo() []byte {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

func (m *RspBlockInfo) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RspBlockInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReqBlockCheck struct {
	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *ReqBlockCheck) Reset()                    { *m = ReqBlockCheck{} }
func (m *ReqBlockCheck) String() string            { return proto.CompactTextString(m) }
func (*ReqBlockCheck) ProtoMessage()               {}
func (*ReqBlockCheck) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{61} }

func (m *ReqBlockCheck) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ReqBlockCheck) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RspBlockCheck struct {
	BlockList []*BlockCheckInfo `protobuf:"bytes,1,rep,name=block_list,json=blockList" json:"block_list,omitempty"`
	Code      int64             `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Id        string            `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *RspBlockCheck) Reset()                    { *m = RspBlockCheck{} }
func (m *RspBlockCheck) String() string            { return proto.CompactTextString(m) }
func (*RspBlockCheck) ProtoMessage()               {}
func (*RspBlockCheck) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{62} }

func (m *RspBlockCheck) GetBlockList() []*BlockCheckInfo {
	if m != nil {
		return m.BlockList
	}
	return nil
}

func (m *RspBlockCheck) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RspBlockCheck) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BlockCheckInfo struct {
	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	BlockHash   string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *BlockCheckInfo) Reset()                    { *m = BlockCheckInfo{} }
func (m *BlockCheckInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockCheckInfo) ProtoMessage()               {}
func (*BlockCheckInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{63} }

func (m *BlockCheckInfo) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlockCheckInfo) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *BlockCheckInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//
type ReqDownloadTaskInfo struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReqDownloadTaskInfo) Reset()                    { *m = ReqDownloadTaskInfo{} }
func (m *ReqDownloadTaskInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqDownloadTaskInfo) ProtoMessage()               {}
func (*ReqDownloadTaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{64} }

func (m *ReqDownloadTaskInfo) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReqDownloadTaskInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RspDownloadTaskInfo struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	SliceSize            uint64   `protobuf:"varint,2,opt,name=slice_size,json=sliceSize" json:"slice_size,omitempty"`
	SliceHash            string   `protobuf:"bytes,3,opt,name=slice_hash,json=sliceHash" json:"slice_hash,omitempty"`
	SliceNumber          uint64   `protobuf:"varint,4,opt,name=slice_number,json=sliceNumber" json:"slice_number,omitempty"`
	StorageWalletAddress string   `protobuf:"bytes,5,opt,name=storage_wallet_address,json=storageWalletAddress" json:"storage_wallet_address,omitempty"`
	WalletAddressList    []string `protobuf:"bytes,6,rep,name=wallet_address_list,json=walletAddressList" json:"wallet_address_list,omitempty"`
	Time                 uint64   `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
	Result               *Result  `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	Id                   string   `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
}

func (m *RspDownloadTaskInfo) Reset()                    { *m = RspDownloadTaskInfo{} }
func (m *RspDownloadTaskInfo) String() string            { return proto.CompactTextString(m) }
func (*RspDownloadTaskInfo) ProtoMessage()               {}
func (*RspDownloadTaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{65} }

func (m *RspDownloadTaskInfo) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RspDownloadTaskInfo) GetSliceSize() uint64 {
	if m != nil {
		return m.SliceSize
	}
	return 0
}

func (m *RspDownloadTaskInfo) GetSliceHash() string {
	if m != nil {
		return m.SliceHash
	}
	return ""
}

func (m *RspDownloadTaskInfo) GetSliceNumber() uint64 {
	if m != nil {
		return m.SliceNumber
	}
	return 0
}

func (m *RspDownloadTaskInfo) GetStorageWalletAddress() string {
	if m != nil {
		return m.StorageWalletAddress
	}
	return ""
}

func (m *RspDownloadTaskInfo) GetWalletAddressList() []string {
	if m != nil {
		return m.WalletAddressList
	}
	return nil
}

func (m *RspDownloadTaskInfo) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RspDownloadTaskInfo) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspDownloadTaskInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReqShareLink struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqShareLink) Reset()                    { *m = ReqShareLink{} }
func (m *ReqShareLink) String() string            { return proto.CompactTextString(m) }
func (*ReqShareLink) ProtoMessage()               {}
func (*ReqShareLink) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{66} }

func (m *ReqShareLink) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqShareLink) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspShareLink struct {
	ShareInfo     []*ShareLinkInfo `protobuf:"bytes,1,rep,name=share_info,json=shareInfo" json:"share_info,omitempty"`
	ReqId         string           `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	WalletAddress string           `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Result        *Result          `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspShareLink) Reset()                    { *m = RspShareLink{} }
func (m *RspShareLink) String() string            { return proto.CompactTextString(m) }
func (*RspShareLink) ProtoMessage()               {}
func (*RspShareLink) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{67} }

func (m *RspShareLink) GetShareInfo() []*ShareLinkInfo {
	if m != nil {
		return m.ShareInfo
	}
	return nil
}

func (m *RspShareLink) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspShareLink) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspShareLink) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqShareFile struct {
	FileHash      string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	IsPrivate     bool   `protobuf:"varint,2,opt,name=is_private,json=isPrivate" json:"is_private,omitempty"`
	ShareTime     int64  `protobuf:"varint,3,opt,name=share_time,json=shareTime" json:"share_time,omitempty"`
	ReqId         string `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	WalletAddress string `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	PathHash      string `protobuf:"bytes,6,opt,name=path_hash,json=pathHash" json:"path_hash,omitempty"`
}

func (m *ReqShareFile) Reset()                    { *m = ReqShareFile{} }
func (m *ReqShareFile) String() string            { return proto.CompactTextString(m) }
func (*ReqShareFile) ProtoMessage()               {}
func (*ReqShareFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{68} }

func (m *ReqShareFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqShareFile) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *ReqShareFile) GetShareTime() int64 {
	if m != nil {
		return m.ShareTime
	}
	return 0
}

func (m *ReqShareFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqShareFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqShareFile) GetPathHash() string {
	if m != nil {
		return m.PathHash
	}
	return ""
}

type RspShareFile struct {
	ShareLink     string  `protobuf:"bytes,1,opt,name=share_link,json=shareLink" json:"share_link,omitempty"`
	SharePassword string  `protobuf:"bytes,2,opt,name=share_password,json=sharePassword" json:"share_password,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ShareId       string  `protobuf:"bytes,4,opt,name=share_id,json=shareId" json:"share_id,omitempty"`
	ReqId         string  `protobuf:"bytes,5,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,6,opt,name=result" json:"result,omitempty"`
}

func (m *RspShareFile) Reset()                    { *m = RspShareFile{} }
func (m *RspShareFile) String() string            { return proto.CompactTextString(m) }
func (*RspShareFile) ProtoMessage()               {}
func (*RspShareFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{69} }

func (m *RspShareFile) GetShareLink() string {
	if m != nil {
		return m.ShareLink
	}
	return ""
}

func (m *RspShareFile) GetSharePassword() string {
	if m != nil {
		return m.SharePassword
	}
	return ""
}

func (m *RspShareFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspShareFile) GetShareId() string {
	if m != nil {
		return m.ShareId
	}
	return ""
}

func (m *RspShareFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspShareFile) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqDeleteShare struct {
	ShareId       string `protobuf:"bytes,1,opt,name=share_id,json=shareId" json:"share_id,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqDeleteShare) Reset()                    { *m = ReqDeleteShare{} }
func (m *ReqDeleteShare) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteShare) ProtoMessage()               {}
func (*ReqDeleteShare) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{70} }

func (m *ReqDeleteShare) GetShareId() string {
	if m != nil {
		return m.ShareId
	}
	return ""
}

func (m *ReqDeleteShare) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqDeleteShare) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspDeleteShare struct {
	ShareId       string  `protobuf:"bytes,1,opt,name=share_id,json=shareId" json:"share_id,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspDeleteShare) Reset()                    { *m = RspDeleteShare{} }
func (m *RspDeleteShare) String() string            { return proto.CompactTextString(m) }
func (*RspDeleteShare) ProtoMessage()               {}
func (*RspDeleteShare) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{71} }

func (m *RspDeleteShare) GetShareId() string {
	if m != nil {
		return m.ShareId
	}
	return ""
}

func (m *RspDeleteShare) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspDeleteShare) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspDeleteShare) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqGetShareFile struct {
	Keyword       string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	SharePassword string `protobuf:"bytes,4,opt,name=share_password,json=sharePassword" json:"share_password,omitempty"`
}

func (m *ReqGetShareFile) Reset()                    { *m = ReqGetShareFile{} }
func (m *ReqGetShareFile) String() string            { return proto.CompactTextString(m) }
func (*ReqGetShareFile) ProtoMessage()               {}
func (*ReqGetShareFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{72} }

func (m *ReqGetShareFile) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ReqGetShareFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqGetShareFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqGetShareFile) GetSharePassword() string {
	if m != nil {
		return m.SharePassword
	}
	return ""
}

type RspGetShareFile struct {
	WalletAddress string      `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string      `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result     `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	IsPrivate     bool        `protobuf:"varint,4,opt,name=is_private,json=isPrivate" json:"is_private,omitempty"`
	FileInfo      []*FileInfo `protobuf:"bytes,5,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
}

func (m *RspGetShareFile) Reset()                    { *m = RspGetShareFile{} }
func (m *RspGetShareFile) String() string            { return proto.CompactTextString(m) }
func (*RspGetShareFile) ProtoMessage()               {}
func (*RspGetShareFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{73} }

func (m *RspGetShareFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspGetShareFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspGetShareFile) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspGetShareFile) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *RspGetShareFile) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

//
type ReqSaveFile struct {
	FileHash               string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	FileOwnerWalletAddress string `protobuf:"bytes,2,opt,name=file_owner_wallet_address,json=fileOwnerWalletAddress" json:"file_owner_wallet_address,omitempty"`
	WalletAddress          string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId                  string `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqSaveFile) Reset()                    { *m = ReqSaveFile{} }
func (m *ReqSaveFile) String() string            { return proto.CompactTextString(m) }
func (*ReqSaveFile) ProtoMessage()               {}
func (*ReqSaveFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{74} }

func (m *ReqSaveFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ReqSaveFile) GetFileOwnerWalletAddress() string {
	if m != nil {
		return m.FileOwnerWalletAddress
	}
	return ""
}

func (m *ReqSaveFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqSaveFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspSaveFile struct {
	FilePath      string  `protobuf:"bytes,1,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	FileHash      string  `protobuf:"bytes,5,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
}

func (m *RspSaveFile) Reset()                    { *m = RspSaveFile{} }
func (m *RspSaveFile) String() string            { return proto.CompactTextString(m) }
func (*RspSaveFile) ProtoMessage()               {}
func (*RspSaveFile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{75} }

func (m *RspSaveFile) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *RspSaveFile) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspSaveFile) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspSaveFile) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspSaveFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

//
type ReqSaveFolder struct {
	FolderHash               string `protobuf:"bytes,1,opt,name=folder_hash,json=folderHash" json:"folder_hash,omitempty"`
	FolderOwnerWalletAddress string `protobuf:"bytes,2,opt,name=folder_owner_wallet_address,json=folderOwnerWalletAddress" json:"folder_owner_wallet_address,omitempty"`
	WalletAddress            string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId                    string `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqSaveFolder) Reset()                    { *m = ReqSaveFolder{} }
func (m *ReqSaveFolder) String() string            { return proto.CompactTextString(m) }
func (*ReqSaveFolder) ProtoMessage()               {}
func (*ReqSaveFolder) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{76} }

func (m *ReqSaveFolder) GetFolderHash() string {
	if m != nil {
		return m.FolderHash
	}
	return ""
}

func (m *ReqSaveFolder) GetFolderOwnerWalletAddress() string {
	if m != nil {
		return m.FolderOwnerWalletAddress
	}
	return ""
}

func (m *ReqSaveFolder) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqSaveFolder) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspSaveFolder struct {
	FolderPath    string  `protobuf:"bytes,1,opt,name=folder_path,json=folderPath" json:"folder_path,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	FolderHash    string  `protobuf:"bytes,5,opt,name=folder_hash,json=folderHash" json:"folder_hash,omitempty"`
}

func (m *RspSaveFolder) Reset()                    { *m = RspSaveFolder{} }
func (m *RspSaveFolder) String() string            { return proto.CompactTextString(m) }
func (*RspSaveFolder) ProtoMessage()               {}
func (*RspSaveFolder) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{77} }

func (m *RspSaveFolder) GetFolderPath() string {
	if m != nil {
		return m.FolderPath
	}
	return ""
}

func (m *RspSaveFolder) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspSaveFolder) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspSaveFolder) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspSaveFolder) GetFolderHash() string {
	if m != nil {
		return m.FolderHash
	}
	return ""
}

//
type ReqCreateAlbum struct {
	WalletAddress  string      `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId          string      `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	FileInfo       []*FileInfo `protobuf:"bytes,3,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
	AlbumName      string      `protobuf:"bytes,4,opt,name=album_name,json=albumName" json:"album_name,omitempty"`
	AlbumBlurb     string      `protobuf:"bytes,5,opt,name=album_blurb,json=albumBlurb" json:"album_blurb,omitempty"`
	AlbumCoverHash string      `protobuf:"bytes,6,opt,name=album_cover_hash,json=albumCoverHash" json:"album_cover_hash,omitempty"`
	AlbumType      AlbumType   `protobuf:"varint,7,opt,name=album_type,json=albumType,enum=protos.AlbumType" json:"album_type,omitempty"`
	IsPrivate      bool        `protobuf:"varint,8,opt,name=is_private,json=isPrivate" json:"is_private,omitempty"`
}

func (m *ReqCreateAlbum) Reset()                    { *m = ReqCreateAlbum{} }
func (m *ReqCreateAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqCreateAlbum) ProtoMessage()               {}
func (*ReqCreateAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{78} }

func (m *ReqCreateAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqCreateAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqCreateAlbum) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *ReqCreateAlbum) GetAlbumName() string {
	if m != nil {
		return m.AlbumName
	}
	return ""
}

func (m *ReqCreateAlbum) GetAlbumBlurb() string {
	if m != nil {
		return m.AlbumBlurb
	}
	return ""
}

func (m *ReqCreateAlbum) GetAlbumCoverHash() string {
	if m != nil {
		return m.AlbumCoverHash
	}
	return ""
}

func (m *ReqCreateAlbum) GetAlbumType() AlbumType {
	if m != nil {
		return m.AlbumType
	}
	return AlbumType_ALL
}

func (m *ReqCreateAlbum) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

type RspCreateAlbum struct {
	AlbumId       string  `protobuf:"bytes,1,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspCreateAlbum) Reset()                    { *m = RspCreateAlbum{} }
func (m *RspCreateAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspCreateAlbum) ProtoMessage()               {}
func (*RspCreateAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{79} }

func (m *RspCreateAlbum) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *RspCreateAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspCreateAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspCreateAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqEditAlbum struct {
	WalletAddress  string      `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId          string      `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumId        string      `protobuf:"bytes,3,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	IsPrivate      bool        `protobuf:"varint,4,opt,name=is_private,json=isPrivate" json:"is_private,omitempty"`
	ChangeFiles    []*FileInfo `protobuf:"bytes,5,rep,name=change_files,json=changeFiles" json:"change_files,omitempty"`
	AlbumCoverHash string      `protobuf:"bytes,7,opt,name=album_cover_hash,json=albumCoverHash" json:"album_cover_hash,omitempty"`
	AlbumName      string      `protobuf:"bytes,8,opt,name=album_name,json=albumName" json:"album_name,omitempty"`
	AlbumBlurb     string      `protobuf:"bytes,9,opt,name=album_blurb,json=albumBlurb" json:"album_blurb,omitempty"`
}

func (m *ReqEditAlbum) Reset()                    { *m = ReqEditAlbum{} }
func (m *ReqEditAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqEditAlbum) ProtoMessage()               {}
func (*ReqEditAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{80} }

func (m *ReqEditAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqEditAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqEditAlbum) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *ReqEditAlbum) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *ReqEditAlbum) GetChangeFiles() []*FileInfo {
	if m != nil {
		return m.ChangeFiles
	}
	return nil
}

func (m *ReqEditAlbum) GetAlbumCoverHash() string {
	if m != nil {
		return m.AlbumCoverHash
	}
	return ""
}

func (m *ReqEditAlbum) GetAlbumName() string {
	if m != nil {
		return m.AlbumName
	}
	return ""
}

func (m *ReqEditAlbum) GetAlbumBlurb() string {
	if m != nil {
		return m.AlbumBlurb
	}
	return ""
}

type RspEditAlbum struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumId       string  `protobuf:"bytes,3,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspEditAlbum) Reset()                    { *m = RspEditAlbum{} }
func (m *RspEditAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspEditAlbum) ProtoMessage()               {}
func (*RspEditAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{81} }

func (m *RspEditAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspEditAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspEditAlbum) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *RspEditAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqAlbumContent struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumId       string `protobuf:"bytes,3,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
}

func (m *ReqAlbumContent) Reset()                    { *m = ReqAlbumContent{} }
func (m *ReqAlbumContent) String() string            { return proto.CompactTextString(m) }
func (*ReqAlbumContent) ProtoMessage()               {}
func (*ReqAlbumContent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{82} }

func (m *ReqAlbumContent) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqAlbumContent) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqAlbumContent) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

type RspAlbumContent struct {
	WalletAddress      string      `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	OwnerWalletAddress string      `protobuf:"bytes,2,opt,name=owner_wallet_address,json=ownerWalletAddress" json:"owner_wallet_address,omitempty"`
	ReqId              string      `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumId            string      `protobuf:"bytes,4,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	AlbumInfo          *AlbumInfo  `protobuf:"bytes,5,opt,name=album_info,json=albumInfo" json:"album_info,omitempty"`
	FileInfo           []*FileInfo `protobuf:"bytes,6,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
	IsCollection       bool        `protobuf:"varint,7,opt,name=is_collection,json=isCollection" json:"is_collection,omitempty"`
	Result             *Result     `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
}

func (m *RspAlbumContent) Reset()                    { *m = RspAlbumContent{} }
func (m *RspAlbumContent) String() string            { return proto.CompactTextString(m) }
func (*RspAlbumContent) ProtoMessage()               {}
func (*RspAlbumContent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{83} }

func (m *RspAlbumContent) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspAlbumContent) GetOwnerWalletAddress() string {
	if m != nil {
		return m.OwnerWalletAddress
	}
	return ""
}

func (m *RspAlbumContent) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspAlbumContent) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *RspAlbumContent) GetAlbumInfo() *AlbumInfo {
	if m != nil {
		return m.AlbumInfo
	}
	return nil
}

func (m *RspAlbumContent) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *RspAlbumContent) GetIsCollection() bool {
	if m != nil {
		return m.IsCollection
	}
	return false
}

func (m *RspAlbumContent) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqSearchAlbum struct {
	AlbumType     AlbumType     `protobuf:"varint,1,opt,name=album_type,json=albumType,enum=protos.AlbumType" json:"album_type,omitempty"`
	Keyword       string        `protobuf:"bytes,2,opt,name=keyword" json:"keyword,omitempty"`
	AlbumSortType AlbumSortType `protobuf:"varint,3,opt,name=AlbumSortType,enum=protos.AlbumSortType" json:"AlbumSortType,omitempty"`
	WalletAddress string        `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string        `protobuf:"bytes,5,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Page          uint64        `protobuf:"varint,6,opt,name=page" json:"page,omitempty"`
	Number        uint64        `protobuf:"varint,7,opt,name=number" json:"number,omitempty"`
}

func (m *ReqSearchAlbum) Reset()                    { *m = ReqSearchAlbum{} }
func (m *ReqSearchAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqSearchAlbum) ProtoMessage()               {}
func (*ReqSearchAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{84} }

func (m *ReqSearchAlbum) GetAlbumType() AlbumType {
	if m != nil {
		return m.AlbumType
	}
	return AlbumType_ALL
}

func (m *ReqSearchAlbum) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ReqSearchAlbum) GetAlbumSortType() AlbumSortType {
	if m != nil {
		return m.AlbumSortType
	}
	return AlbumSortType_LATEST
}

func (m *ReqSearchAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqSearchAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqSearchAlbum) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ReqSearchAlbum) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type RspSearchAlbum struct {
	WalletAddress string       `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string       `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumInfo     []*AlbumInfo `protobuf:"bytes,3,rep,name=album_info,json=albumInfo" json:"album_info,omitempty"`
	Result        *Result      `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	Page          uint64       `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`
	Total         uint64       `protobuf:"varint,6,opt,name=total" json:"total,omitempty"`
}

func (m *RspSearchAlbum) Reset()                    { *m = RspSearchAlbum{} }
func (m *RspSearchAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspSearchAlbum) ProtoMessage()               {}
func (*RspSearchAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{85} }

func (m *RspSearchAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspSearchAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspSearchAlbum) GetAlbumInfo() []*AlbumInfo {
	if m != nil {
		return m.AlbumInfo
	}
	return nil
}

func (m *RspSearchAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspSearchAlbum) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RspSearchAlbum) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ReqFindMyAlbum struct {
	WalletAddress string    `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string    `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumType     AlbumType `protobuf:"varint,3,opt,name=album_type,json=albumType,enum=protos.AlbumType" json:"album_type,omitempty"`
	Page          uint64    `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
	Number        uint64    `protobuf:"varint,5,opt,name=number" json:"number,omitempty"`
	Keyword       string    `protobuf:"bytes,6,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *ReqFindMyAlbum) Reset()                    { *m = ReqFindMyAlbum{} }
func (m *ReqFindMyAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqFindMyAlbum) ProtoMessage()               {}
func (*ReqFindMyAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{86} }

func (m *ReqFindMyAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqFindMyAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqFindMyAlbum) GetAlbumType() AlbumType {
	if m != nil {
		return m.AlbumType
	}
	return AlbumType_ALL
}

func (m *ReqFindMyAlbum) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ReqFindMyAlbum) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ReqFindMyAlbum) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

type RspFindMyAlbum struct {
	WalletAddress string       `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string       `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumInfo     []*AlbumInfo `protobuf:"bytes,3,rep,name=album_info,json=albumInfo" json:"album_info,omitempty"`
	Result        *Result      `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	Total         uint64       `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
}

func (m *RspFindMyAlbum) Reset()                    { *m = RspFindMyAlbum{} }
func (m *RspFindMyAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspFindMyAlbum) ProtoMessage()               {}
func (*RspFindMyAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{87} }

func (m *RspFindMyAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspFindMyAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspFindMyAlbum) GetAlbumInfo() []*AlbumInfo {
	if m != nil {
		return m.AlbumInfo
	}
	return nil
}

func (m *RspFindMyAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspFindMyAlbum) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ReqCollectionAlbum struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumId       string `protobuf:"bytes,3,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	IsCollection  bool   `protobuf:"varint,4,opt,name=is_collection,json=isCollection" json:"is_collection,omitempty"`
}

func (m *ReqCollectionAlbum) Reset()                    { *m = ReqCollectionAlbum{} }
func (m *ReqCollectionAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqCollectionAlbum) ProtoMessage()               {}
func (*ReqCollectionAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{88} }

func (m *ReqCollectionAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqCollectionAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqCollectionAlbum) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *ReqCollectionAlbum) GetIsCollection() bool {
	if m != nil {
		return m.IsCollection
	}
	return false
}

type RspCollectionAlbum struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumId       string  `protobuf:"bytes,3,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	IsCollection  bool    `protobuf:"varint,5,opt,name=is_collection,json=isCollection" json:"is_collection,omitempty"`
}

func (m *RspCollectionAlbum) Reset()                    { *m = RspCollectionAlbum{} }
func (m *RspCollectionAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspCollectionAlbum) ProtoMessage()               {}
func (*RspCollectionAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{89} }

func (m *RspCollectionAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspCollectionAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspCollectionAlbum) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *RspCollectionAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspCollectionAlbum) GetIsCollection() bool {
	if m != nil {
		return m.IsCollection
	}
	return false
}

type ReqAbstractAlbum struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqAbstractAlbum) Reset()                    { *m = ReqAbstractAlbum{} }
func (m *ReqAbstractAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqAbstractAlbum) ProtoMessage()               {}
func (*ReqAbstractAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{90} }

func (m *ReqAbstractAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqAbstractAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspAbstractAlbum struct {
	WalletAddress   string       `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId           string       `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	MyAlbum         *AlbumNumber `protobuf:"bytes,3,opt,name=my_album,json=myAlbum" json:"my_album,omitempty"`
	CollectionAlbum *AlbumNumber `protobuf:"bytes,4,opt,name=collection_album,json=collectionAlbum" json:"collection_album,omitempty"`
	Result          *Result      `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
}

func (m *RspAbstractAlbum) Reset()                    { *m = RspAbstractAlbum{} }
func (m *RspAbstractAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspAbstractAlbum) ProtoMessage()               {}
func (*RspAbstractAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{91} }

func (m *RspAbstractAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspAbstractAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspAbstractAlbum) GetMyAlbum() *AlbumNumber {
	if m != nil {
		return m.MyAlbum
	}
	return nil
}

func (m *RspAbstractAlbum) GetCollectionAlbum() *AlbumNumber {
	if m != nil {
		return m.CollectionAlbum
	}
	return nil
}

func (m *RspAbstractAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqMyCollectionAlbum struct {
	AlbumType     AlbumType `protobuf:"varint,1,opt,name=album_type,json=albumType,enum=protos.AlbumType" json:"album_type,omitempty"`
	WalletAddress string    `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string    `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Page          uint64    `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
	Number        uint64    `protobuf:"varint,5,opt,name=number" json:"number,omitempty"`
	Keyword       string    `protobuf:"bytes,6,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *ReqMyCollectionAlbum) Reset()                    { *m = ReqMyCollectionAlbum{} }
func (m *ReqMyCollectionAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqMyCollectionAlbum) ProtoMessage()               {}
func (*ReqMyCollectionAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{92} }

func (m *ReqMyCollectionAlbum) GetAlbumType() AlbumType {
	if m != nil {
		return m.AlbumType
	}
	return AlbumType_ALL
}

func (m *ReqMyCollectionAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqMyCollectionAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqMyCollectionAlbum) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ReqMyCollectionAlbum) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ReqMyCollectionAlbum) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

type RspMyCollectionAlbum struct {
	WalletAddress string       `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string       `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	AlbumInfo     []*AlbumInfo `protobuf:"bytes,3,rep,name=album_info,json=albumInfo" json:"album_info,omitempty"`
	Result        *Result      `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	Page          uint64       `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`
}

func (m *RspMyCollectionAlbum) Reset()                    { *m = RspMyCollectionAlbum{} }
func (m *RspMyCollectionAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspMyCollectionAlbum) ProtoMessage()               {}
func (*RspMyCollectionAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{93} }

func (m *RspMyCollectionAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspMyCollectionAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspMyCollectionAlbum) GetAlbumInfo() []*AlbumInfo {
	if m != nil {
		return m.AlbumInfo
	}
	return nil
}

func (m *RspMyCollectionAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspMyCollectionAlbum) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ReqDeleteAlbum struct {
	AlbumId       string `protobuf:"bytes,1,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqDeleteAlbum) Reset()                    { *m = ReqDeleteAlbum{} }
func (m *ReqDeleteAlbum) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteAlbum) ProtoMessage()               {}
func (*ReqDeleteAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{94} }

func (m *ReqDeleteAlbum) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *ReqDeleteAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqDeleteAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspDeleteAlbum struct {
	AlbumId       string  `protobuf:"bytes,1,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspDeleteAlbum) Reset()                    { *m = RspDeleteAlbum{} }
func (m *RspDeleteAlbum) String() string            { return proto.CompactTextString(m) }
func (*RspDeleteAlbum) ProtoMessage()               {}
func (*RspDeleteAlbum) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{95} }

func (m *RspDeleteAlbum) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *RspDeleteAlbum) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspDeleteAlbum) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspDeleteAlbum) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqConfig struct {
	WalletAddress  string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId          string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	NetworkAddress string `protobuf:"bytes,3,opt,name=network_address,json=networkAddress" json:"network_address,omitempty"`
}

func (m *ReqConfig) Reset()                    { *m = ReqConfig{} }
func (m *ReqConfig) String() string            { return proto.CompactTextString(m) }
func (*ReqConfig) ProtoMessage()               {}
func (*ReqConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{96} }

func (m *ReqConfig) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqConfig) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqConfig) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

type RspConfig struct {
	InvitationCode string  `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
	ReqId          string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Invite         uint64  `protobuf:"varint,3,opt,name=invite" json:"invite,omitempty"`
	IsUpgrade      bool    `protobuf:"varint,4,opt,name=is_upgrade,json=isUpgrade" json:"is_upgrade,omitempty"`
	FreeCapacity   uint64  `protobuf:"varint,5,opt,name=free_capacity,json=freeCapacity" json:"free_capacity,omitempty"`
	Result         *Result `protobuf:"bytes,6,opt,name=result" json:"result,omitempty"`
	WalletAddress  string  `protobuf:"bytes,7,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Capacity       uint64  `protobuf:"varint,8,opt,name=capacity" json:"capacity,omitempty"`
}

func (m *RspConfig) Reset()                    { *m = RspConfig{} }
func (m *RspConfig) String() string            { return proto.CompactTextString(m) }
func (*RspConfig) ProtoMessage()               {}
func (*RspConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{97} }

func (m *RspConfig) GetInvitationCode() string {
	if m != nil {
		return m.InvitationCode
	}
	return ""
}

func (m *RspConfig) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspConfig) GetInvite() uint64 {
	if m != nil {
		return m.Invite
	}
	return 0
}

func (m *RspConfig) GetIsUpgrade() bool {
	if m != nil {
		return m.IsUpgrade
	}
	return false
}

func (m *RspConfig) GetFreeCapacity() uint64 {
	if m != nil {
		return m.FreeCapacity
	}
	return 0
}

func (m *RspConfig) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspConfig) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspConfig) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

type ReqInvite struct {
	WalletAddress  string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	InvitationCode string `protobuf:"bytes,2,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
	ReqId          string `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqInvite) Reset()                    { *m = ReqInvite{} }
func (m *ReqInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqInvite) ProtoMessage()               {}
func (*ReqInvite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{98} }

func (m *ReqInvite) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqInvite) GetInvitationCode() string {
	if m != nil {
		return m.InvitationCode
	}
	return ""
}

func (m *ReqInvite) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspInvite struct {
	Result          *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	CapacityDelta   uint64  `protobuf:"varint,2,opt,name=capacity_delta,json=capacityDelta" json:"capacity_delta,omitempty"`
	CurrentCapacity uint64  `protobuf:"varint,3,opt,name=current_capacity,json=currentCapacity" json:"current_capacity,omitempty"`
	ReqId           string  `protobuf:"bytes,4,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	WalletAddress   string  `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
}

func (m *RspInvite) Reset()                    { *m = RspInvite{} }
func (m *RspInvite) String() string            { return proto.CompactTextString(m) }
func (*RspInvite) ProtoMessage()               {}
func (*RspInvite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{99} }

func (m *RspInvite) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspInvite) GetCapacityDelta() uint64 {
	if m != nil {
		return m.CapacityDelta
	}
	return 0
}

func (m *RspInvite) GetCurrentCapacity() uint64 {
	if m != nil {
		return m.CurrentCapacity
	}
	return 0
}

func (m *RspInvite) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspInvite) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

type ReqGetReward struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqGetReward) Reset()                    { *m = ReqGetReward{} }
func (m *ReqGetReward) String() string            { return proto.CompactTextString(m) }
func (*ReqGetReward) ProtoMessage()               {}
func (*ReqGetReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{100} }

func (m *ReqGetReward) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqGetReward) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspGetReward struct {
	Result          *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	ReqId           string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	WalletAddress   string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	CurrentCapacity uint64  `protobuf:"varint,4,opt,name=current_capacity,json=currentCapacity" json:"current_capacity,omitempty"`
}

func (m *RspGetReward) Reset()                    { *m = RspGetReward{} }
func (m *RspGetReward) String() string            { return proto.CompactTextString(m) }
func (*RspGetReward) ProtoMessage()               {}
func (*RspGetReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{101} }

func (m *RspGetReward) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspGetReward) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspGetReward) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspGetReward) GetCurrentCapacity() uint64 {
	if m != nil {
		return m.CurrentCapacity
	}
	return 0
}

type ReqGetCapacity struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqGetCapacity) Reset()                    { *m = ReqGetCapacity{} }
func (m *ReqGetCapacity) String() string            { return proto.CompactTextString(m) }
func (*ReqGetCapacity) ProtoMessage()               {}
func (*ReqGetCapacity) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{102} }

func (m *ReqGetCapacity) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqGetCapacity) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspGetCapacity struct {
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	WalletAddress string  `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Capacity      uint64  `protobuf:"varint,4,opt,name=capacity" json:"capacity,omitempty"`
	FreeCapacity  uint64  `protobuf:"varint,5,opt,name=free_capacity,json=freeCapacity" json:"free_capacity,omitempty"`
}

func (m *RspGetCapacity) Reset()                    { *m = RspGetCapacity{} }
func (m *RspGetCapacity) String() string            { return proto.CompactTextString(m) }
func (*RspGetCapacity) ProtoMessage()               {}
func (*RspGetCapacity) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{103} }

func (m *RspGetCapacity) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspGetCapacity) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspGetCapacity) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspGetCapacity) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *RspGetCapacity) GetFreeCapacity() uint64 {
	if m != nil {
		return m.FreeCapacity
	}
	return 0
}

type ReqFileSort struct {
	Files         []*FileInfo `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	ReqId         string      `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	WalletAddress string      `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	AlbumId       string      `protobuf:"bytes,4,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
}

func (m *ReqFileSort) Reset()                    { *m = ReqFileSort{} }
func (m *ReqFileSort) String() string            { return proto.CompactTextString(m) }
func (*ReqFileSort) ProtoMessage()               {}
func (*ReqFileSort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{104} }

func (m *ReqFileSort) GetFiles() []*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *ReqFileSort) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqFileSort) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqFileSort) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

type RspFileSort struct {
	ReqId         string  `protobuf:"bytes,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	WalletAddress string  `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *RspFileSort) Reset()                    { *m = RspFileSort{} }
func (m *RspFileSort) String() string            { return proto.CompactTextString(m) }
func (*RspFileSort) ProtoMessage()               {}
func (*RspFileSort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{105} }

func (m *RspFileSort) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspFileSort) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspFileSort) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqFindDirectory struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
}

func (m *ReqFindDirectory) Reset()                    { *m = ReqFindDirectory{} }
func (m *ReqFindDirectory) String() string            { return proto.CompactTextString(m) }
func (*ReqFindDirectory) ProtoMessage()               {}
func (*ReqFindDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{106} }

func (m *ReqFindDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqFindDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type RspFindDirectory struct {
	FileInfo      []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
	WalletAddress string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string      `protobuf:"bytes,3,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result     `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *RspFindDirectory) Reset()                    { *m = RspFindDirectory{} }
func (m *RspFindDirectory) String() string            { return proto.CompactTextString(m) }
func (*RspFindDirectory) ProtoMessage()               {}
func (*RspFindDirectory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{107} }

func (m *RspFindDirectory) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *RspFindDirectory) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspFindDirectory) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspFindDirectory) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqCustomerAddVolume struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Volume        uint64 `protobuf:"varint,3,opt,name=volume" json:"volume,omitempty"`
	PublicKey     []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *ReqCustomerAddVolume) Reset()                    { *m = ReqCustomerAddVolume{} }
func (m *ReqCustomerAddVolume) String() string            { return proto.CompactTextString(m) }
func (*ReqCustomerAddVolume) ProtoMessage()               {}
func (*ReqCustomerAddVolume) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{108} }

func (m *ReqCustomerAddVolume) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqCustomerAddVolume) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqCustomerAddVolume) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *ReqCustomerAddVolume) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type RspCustomerAddVolume struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *RspCustomerAddVolume) Reset()                    { *m = RspCustomerAddVolume{} }
func (m *RspCustomerAddVolume) String() string            { return proto.CompactTextString(m) }
func (*RspCustomerAddVolume) ProtoMessage()               {}
func (*RspCustomerAddVolume) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{109} }

func (m *RspCustomerAddVolume) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspCustomerAddVolume) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspCustomerAddVolume) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReqCustomerUseVolume struct {
	WalletAddress  string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId          string `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	RequiredVolume uint64 `protobuf:"varint,3,opt,name=required_volume,json=requiredVolume" json:"required_volume,omitempty"`
	PublicKey      []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *ReqCustomerUseVolume) Reset()                    { *m = ReqCustomerUseVolume{} }
func (m *ReqCustomerUseVolume) String() string            { return proto.CompactTextString(m) }
func (*ReqCustomerUseVolume) ProtoMessage()               {}
func (*ReqCustomerUseVolume) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{110} }

func (m *ReqCustomerUseVolume) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ReqCustomerUseVolume) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ReqCustomerUseVolume) GetRequiredVolume() uint64 {
	if m != nil {
		return m.RequiredVolume
	}
	return 0
}

func (m *ReqCustomerUseVolume) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type RspCustomerUseVolume struct {
	WalletAddress string  `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress" json:"wallet_address,omitempty"`
	ReqId         string  `protobuf:"bytes,2,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Result        *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *RspCustomerUseVolume) Reset()                    { *m = RspCustomerUseVolume{} }
func (m *RspCustomerUseVolume) String() string            { return proto.CompactTextString(m) }
func (*RspCustomerUseVolume) ProtoMessage()               {}
func (*RspCustomerUseVolume) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{111} }

func (m *RspCustomerUseVolume) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RspCustomerUseVolume) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RspCustomerUseVolume) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqGetPPList)(nil), "protos.ReqGetPPList")
	proto.RegisterType((*RspGetPPList)(nil), "protos.RspGetPPList")
	proto.RegisterType((*ReqRegister)(nil), "protos.ReqRegister")
	proto.RegisterType((*RspRegister)(nil), "protos.RspRegister")
	proto.RegisterType((*ReqMining)(nil), "protos.ReqMining")
	proto.RegisterType((*RspMining)(nil), "protos.RspMining")
	proto.RegisterType((*ReqUploadFile)(nil), "protos.ReqUploadFile")
	proto.RegisterType((*RspUploadFile)(nil), "protos.RspUploadFile")
	proto.RegisterType((*ReqUploadFileSlice)(nil), "protos.ReqUploadFileSlice")
	proto.RegisterType((*RspUploadFileSlice)(nil), "protos.RspUploadFileSlice")
	proto.RegisterType((*UploadSpeedOfProgress)(nil), "protos.UploadSpeedOfProgress")
	proto.RegisterType((*ReportUploadSliceResult)(nil), "protos.ReportUploadSliceResult")
	proto.RegisterType((*RspReportUploadSliceResult)(nil), "protos.RspReportUploadSliceResult")
	proto.RegisterType((*ReqFindMyFileList)(nil), "protos.ReqFindMyFileList")
	proto.RegisterType((*RspFindMyFileList)(nil), "protos.RspFindMyFileList")
	proto.RegisterType((*ReqFindDirectoryTree)(nil), "protos.ReqFindDirectoryTree")
	proto.RegisterType((*RspFindDirectoryTree)(nil), "protos.RspFindDirectoryTree")
	proto.RegisterType((*ReqFileStorageInfo)(nil), "protos.ReqFileStorageInfo")
	proto.RegisterType((*RspFileStorageInfo)(nil), "protos.RspFileStorageInfo")
	proto.RegisterType((*ReqDownloadSlice)(nil), "protos.ReqDownloadSlice")
	proto.RegisterType((*RspDownloadSlice)(nil), "protos.RspDownloadSlice")
	proto.RegisterType((*ReqDownloadSloceWrong)(nil), "protos.ReqDownloadSloceWrong")
	proto.RegisterType((*RspDownloadSloceWrong)(nil), "protos.RspDownloadSloceWrong")
	proto.RegisterType((*ReqDownloadSlocePause)(nil), "protos.ReqDownloadSlocePause")
	proto.RegisterType((*RspDownloadSlocePause)(nil), "protos.RspDownloadSlocePause")
	proto.RegisterType((*ReqReportDownloadResult)(nil), "protos.ReqReportDownloadResult")
	proto.RegisterType((*RspReportDownloadResult)(nil), "protos.RspReportDownloadResult")
	proto.RegisterType((*ReqReportTaskBP)(nil), "protos.ReqReportTaskBP")
	proto.RegisterType((*ReqRegisterNewPP)(nil), "protos.ReqRegisterNewPP")
	proto.RegisterType((*RspRegisterNewPP)(nil), "protos.RspRegisterNewPP")
	proto.RegisterType((*ReqDeleteFile)(nil), "protos.ReqDeleteFile")
	proto.RegisterType((*RspDeleteFile)(nil), "protos.RspDeleteFile")
	proto.RegisterType((*ReqTransferNotice)(nil), "protos.ReqTransferNotice")
	proto.RegisterType((*RspTransferNotice)(nil), "protos.RspTransferNotice")
	proto.RegisterType((*ReqValidateTransferCer)(nil), "protos.ReqValidateTransferCer")
	proto.RegisterType((*RspValidateTransferCer)(nil), "protos.RspValidateTransferCer")
	proto.RegisterType((*ReqTransferDownload)(nil), "protos.ReqTransferDownload")
	proto.RegisterType((*RspTransferDownload)(nil), "protos.RspTransferDownload")
	proto.RegisterType((*RspTransferDownloadResult)(nil), "protos.RspTransferDownloadResult")
	proto.RegisterType((*ReqReportTransferResult)(nil), "protos.ReqReportTransferResult")
	proto.RegisterType((*RspReportTransferResult)(nil), "protos.RspReportTransferResult")
	proto.RegisterType((*ReqGetHDInfo)(nil), "protos.ReqGetHDInfo")
	proto.RegisterType((*RspGetHDInfo)(nil), "protos.RspGetHDInfo")
	proto.RegisterType((*ReqSendChatMessages)(nil), "protos.ReqSendChatMessages")
	proto.RegisterType((*RspSendChatMessages)(nil), "protos.RspSendChatMessages")
	proto.RegisterType((*ReqDeleteSlice)(nil), "protos.ReqDeleteSlice")
	proto.RegisterType((*RspDeleteSlice)(nil), "protos.RspDeleteSlice")
	proto.RegisterType((*ReqMakeDirectory)(nil), "protos.ReqMakeDirectory")
	proto.RegisterType((*RspMakeDirectory)(nil), "protos.RspMakeDirectory")
	proto.RegisterType((*ReqRemoveDirectory)(nil), "protos.ReqRemoveDirectory")
	proto.RegisterType((*RspRemoveDirectory)(nil), "protos.RspRemoveDirectory")
	proto.RegisterType((*ReqMoveFileDirectory)(nil), "protos.ReqMoveFileDirectory")
	proto.RegisterType((*RspMoveFileDirectory)(nil), "protos.RspMoveFileDirectory")
	proto.RegisterType((*ReqBLSPublicKey)(nil), "protos.ReqBLSPublicKey")
	proto.RegisterType((*RspBPBLSPublicKey)(nil), "protos.RspBPBLSPublicKey")
	proto.RegisterType((*ReqBalance)(nil), "protos.ReqBalance")
	proto.RegisterType((*RspBalance)(nil), "protos.RspBalance")
	proto.RegisterType((*ReqTransaction)(nil), "protos.ReqTransaction")
	proto.RegisterType((*RspTransaction)(nil), "protos.RspTransaction")
	proto.RegisterType((*ReqBlockInfo)(nil), "protos.ReqBlockInfo")
	proto.RegisterType((*RspBlockInfo)(nil), "protos.RspBlockInfo")
	proto.RegisterType((*ReqBlockCheck)(nil), "protos.ReqBlockCheck")
	proto.RegisterType((*RspBlockCheck)(nil), "protos.RspBlockCheck")
	proto.RegisterType((*BlockCheckInfo)(nil), "protos.BlockCheckInfo")
	proto.RegisterType((*ReqDownloadTaskInfo)(nil), "protos.ReqDownloadTaskInfo")
	proto.RegisterType((*RspDownloadTaskInfo)(nil), "protos.RspDownloadTaskInfo")
	proto.RegisterType((*ReqShareLink)(nil), "protos.ReqShareLink")
	proto.RegisterType((*RspShareLink)(nil), "protos.RspShareLink")
	proto.RegisterType((*ReqShareFile)(nil), "protos.ReqShareFile")
	proto.RegisterType((*RspShareFile)(nil), "protos.RspShareFile")
	proto.RegisterType((*ReqDeleteShare)(nil), "protos.ReqDeleteShare")
	proto.RegisterType((*RspDeleteShare)(nil), "protos.RspDeleteShare")
	proto.RegisterType((*ReqGetShareFile)(nil), "protos.ReqGetShareFile")
	proto.RegisterType((*RspGetShareFile)(nil), "protos.RspGetShareFile")
	proto.RegisterType((*ReqSaveFile)(nil), "protos.ReqSaveFile")
	proto.RegisterType((*RspSaveFile)(nil), "protos.RspSaveFile")
	proto.RegisterType((*ReqSaveFolder)(nil), "protos.ReqSaveFolder")
	proto.RegisterType((*RspSaveFolder)(nil), "protos.RspSaveFolder")
	proto.RegisterType((*ReqCreateAlbum)(nil), "protos.ReqCreateAlbum")
	proto.RegisterType((*RspCreateAlbum)(nil), "protos.RspCreateAlbum")
	proto.RegisterType((*ReqEditAlbum)(nil), "protos.ReqEditAlbum")
	proto.RegisterType((*RspEditAlbum)(nil), "protos.RspEditAlbum")
	proto.RegisterType((*ReqAlbumContent)(nil), "protos.ReqAlbumContent")
	proto.RegisterType((*RspAlbumContent)(nil), "protos.RspAlbumContent")
	proto.RegisterType((*ReqSearchAlbum)(nil), "protos.ReqSearchAlbum")
	proto.RegisterType((*RspSearchAlbum)(nil), "protos.RspSearchAlbum")
	proto.RegisterType((*ReqFindMyAlbum)(nil), "protos.ReqFindMyAlbum")
	proto.RegisterType((*RspFindMyAlbum)(nil), "protos.RspFindMyAlbum")
	proto.RegisterType((*ReqCollectionAlbum)(nil), "protos.ReqCollectionAlbum")
	proto.RegisterType((*RspCollectionAlbum)(nil), "protos.RspCollectionAlbum")
	proto.RegisterType((*ReqAbstractAlbum)(nil), "protos.ReqAbstractAlbum")
	proto.RegisterType((*RspAbstractAlbum)(nil), "protos.RspAbstractAlbum")
	proto.RegisterType((*ReqMyCollectionAlbum)(nil), "protos.ReqMyCollectionAlbum")
	proto.RegisterType((*RspMyCollectionAlbum)(nil), "protos.RspMyCollectionAlbum")
	proto.RegisterType((*ReqDeleteAlbum)(nil), "protos.ReqDeleteAlbum")
	proto.RegisterType((*RspDeleteAlbum)(nil), "protos.RspDeleteAlbum")
	proto.RegisterType((*ReqConfig)(nil), "protos.ReqConfig")
	proto.RegisterType((*RspConfig)(nil), "protos.RspConfig")
	proto.RegisterType((*ReqInvite)(nil), "protos.ReqInvite")
	proto.RegisterType((*RspInvite)(nil), "protos.RspInvite")
	proto.RegisterType((*ReqGetReward)(nil), "protos.ReqGetReward")
	proto.RegisterType((*RspGetReward)(nil), "protos.RspGetReward")
	proto.RegisterType((*ReqGetCapacity)(nil), "protos.ReqGetCapacity")
	proto.RegisterType((*RspGetCapacity)(nil), "protos.RspGetCapacity")
	proto.RegisterType((*ReqFileSort)(nil), "protos.ReqFileSort")
	proto.RegisterType((*RspFileSort)(nil), "protos.RspFileSort")
	proto.RegisterType((*ReqFindDirectory)(nil), "protos.ReqFindDirectory")
	proto.RegisterType((*RspFindDirectory)(nil), "protos.RspFindDirectory")
	proto.RegisterType((*ReqCustomerAddVolume)(nil), "protos.ReqCustomerAddVolume")
	proto.RegisterType((*RspCustomerAddVolume)(nil), "protos.RspCustomerAddVolume")
	proto.RegisterType((*ReqCustomerUseVolume)(nil), "protos.ReqCustomerUseVolume")
	proto.RegisterType((*RspCustomerUseVolume)(nil), "protos.RspCustomerUseVolume")
}

func init() { proto.RegisterFile("sds.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 3603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5c, 0xcd, 0x8f, 0xdc, 0xc6,
	0x95, 0x07, 0xd9, 0xdf, 0x6f, 0x3e, 0x45, 0x49, 0xa3, 0x91, 0x65, 0xad, 0x6c, 0x1a, 0xfe, 0xd0,
	0xae, 0x25, 0xd8, 0x2b, 0xdb, 0xf0, 0x7a, 0x61, 0x2f, 0xa4, 0xd1, 0x4a, 0xd6, 0xae, 0x3e, 0x7a,
	0x39, 0x23, 0xf9, 0xd8, 0x60, 0x37, 0xab, 0x7b, 0xe8, 0xe9, 0x26, 0x39, 0x2c, 0xf6, 0x8c, 0xdb,
	0x5e, 0x18, 0x0b, 0x6c, 0x6e, 0x41, 0xbe, 0x9c, 0x4b, 0xe2, 0x04, 0xc8, 0x21, 0x48, 0x1c, 0x24,
	0xf0, 0x29, 0x07, 0x07, 0x39, 0x24, 0x88, 0x63, 0x07, 0xc8, 0xc7, 0x29, 0x41, 0x2e, 0xf9, 0x0b,
	0x72, 0xca, 0x1f, 0x90, 0x53, 0xc0, 0x57, 0x55, 0x64, 0x15, 0x9b, 0xdd, 0xcd, 0x51, 0xb7, 0x06,
	0x3e, 0x0d, 0xab, 0x58, 0xac, 0xf7, 0xde, 0xef, 0xbd, 0x7a, 0xef, 0xd5, 0xab, 0xea, 0x81, 0x06,
	0x75, 0xe8, 0xe5, 0x20, 0xf4, 0x23, 0xdf, 0xa8, 0xe2, 0x1f, 0xfa, 0xd8, 0x2a, 0x75, 0x68, 0xab,
	0xe3, 0x0f, 0x06, 0xac, 0xdf, 0xbc, 0x0a, 0xcb, 0x16, 0xd9, 0xbf, 0x49, 0xa2, 0x66, 0xf3, 0xb6,
	0x4b, 0x23, 0xe3, 0x45, 0x80, 0xc1, 0xa8, 0x65, 0x3b, 0x4e, 0x48, 0x28, 0xdd, 0xd4, 0x9e, 0xd0,
	0x9e, 0x5b, 0xfa, 0x57, 0x83, 0x8d, 0xa5, 0x97, 0x9b, 0xcd, 0x6b, 0x36, 0x25, 0xb7, 0xbc, 0xae,
	0x6f, 0x35, 0x06, 0xa3, 0xab, 0x6c, 0x90, 0xd9, 0x81, 0x65, 0x8b, 0x06, 0xe9, 0x14, 0xff, 0x02,
	0xb5, 0x20, 0x68, 0xf5, 0x5d, 0x1a, 0x6d, 0x6a, 0x4f, 0x94, 0x26, 0x7c, 0x5f, 0x0d, 0x02, 0x1c,
	0xfc, 0x0c, 0x54, 0x43, 0x42, 0x87, 0xfd, 0x68, 0x53, 0x47, 0x5a, 0xab, 0x62, 0xac, 0x85, 0xbd,
	0x16, 0x7f, 0x6b, 0x7e, 0x45, 0x83, 0x25, 0x8b, 0xec, 0x5b, 0xa4, 0xe7, 0xd2, 0x88, 0x84, 0xc6,
	0xf3, 0x50, 0x9b, 0xcd, 0xa4, 0x18, 0x62, 0x9c, 0x07, 0x08, 0x86, 0xed, 0xbe, 0xdb, 0x69, 0xed,
	0x91, 0x11, 0x52, 0x5a, 0xb6, 0x1a, 0xac, 0xe7, 0xbf, 0xc9, 0x28, 0x23, 0x74, 0xa9, 0x88, 0xd0,
	0x01, 0x2c, 0x59, 0x34, 0x48, 0xd8, 0x49, 0xc5, 0xd0, 0xa6, 0x89, 0x61, 0x3c, 0x0d, 0xab, 0x87,
	0x76, 0xbf, 0x4f, 0xa2, 0x84, 0x5a, 0xcc, 0x4c, 0xc3, 0x5a, 0x61, 0xbd, 0x7c, 0x76, 0xc3, 0x80,
	0xb2, 0x4b, 0x9b, 0x4d, 0x64, 0xa5, 0x6e, 0xe1, 0xb3, 0xd9, 0x87, 0x86, 0x45, 0xf6, 0xef, 0xb8,
	0x9e, 0xeb, 0xf5, 0x16, 0x2b, 0xbe, 0x01, 0x65, 0xea, 0xf6, 0x3c, 0xa4, 0xb6, 0x6c, 0xe1, 0xb3,
	0x79, 0x05, 0x1a, 0x16, 0x0d, 0x38, 0xb5, 0x82, 0xd2, 0x99, 0x9f, 0x68, 0xb0, 0x62, 0x91, 0xfd,
	0xfb, 0x41, 0xdf, 0xb7, 0x9d, 0x1b, 0x6e, 0x9f, 0x18, 0x97, 0xa0, 0xd1, 0x75, 0xfb, 0xa4, 0xe5,
	0x7a, 0x5d, 0x9f, 0x7f, 0xbc, 0x2e, 0x3e, 0x8e, 0x07, 0x20, 0x9f, 0xf5, 0x2e, 0x7f, 0xca, 0x28,
	0x42, 0x2f, 0xa0, 0x88, 0x3c, 0xe6, 0x8d, 0xd3, 0x31, 0xbf, 0xfb, 0x2d, 0xd7, 0xd9, 0x2c, 0x23,
	0xba, 0x95, 0x90, 0xec, 0xdf, 0x72, 0x8c, 0xb3, 0x50, 0x77, 0x63, 0xe3, 0x3f, 0x20, 0xe1, 0x66,
	0x05, 0x91, 0xad, 0xb9, 0x74, 0x2b, 0x6e, 0x9a, 0x1f, 0xe9, 0xb0, 0x62, 0xd1, 0x40, 0xe2, 0xfc,
	0x02, 0x2c, 0xd1, 0xc8, 0x0f, 0xed, 0x1e, 0x69, 0x75, 0x48, 0x88, 0xbc, 0x37, 0x2c, 0xe0, 0x5d,
	0x5b, 0x24, 0x34, 0x2e, 0xa5, 0x66, 0xae, 0xa3, 0x99, 0x9f, 0x12, 0x8c, 0x6e, 0xf7, 0xdd, 0x0e,
	0xb9, 0x3b, 0x1c, 0xc4, 0x2c, 0x26, 0x86, 0x7e, 0x8e, 0x23, 0xb1, 0x6b, 0xd3, 0x5d, 0x64, 0xb6,
	0xc1, 0xe4, 0x7e, 0xd3, 0xa6, 0xbb, 0xc6, 0x19, 0xa8, 0x45, 0x36, 0xdd, 0x4b, 0x39, 0xae, 0xc6,
	0xcd, 0x5b, 0x4e, 0xcc, 0x45, 0xe4, 0x47, 0x76, 0xbf, 0x45, 0xe3, 0x39, 0x91, 0xeb, 0x92, 0x05,
	0xd8, 0x85, 0x54, 0x24, 0xd5, 0x54, 0xa7, 0x1a, 0x5e, 0x0a, 0x49, 0x4d, 0x86, 0xe4, 0x05, 0x38,
	0xe5, 0x1f, 0x7a, 0x24, 0x6c, 0x65, 0xac, 0xb2, 0x8e, 0x83, 0x0c, 0x7c, 0xf7, 0x96, 0x6c, 0x9a,
	0xe6, 0x4f, 0x75, 0x30, 0x14, 0x1d, 0x33, 0x3e, 0x5e, 0x83, 0x55, 0x64, 0xb1, 0xe5, 0x0d, 0x07,
	0x38, 0x0b, 0xd7, 0x76, 0x3e, 0x28, 0xcb, 0x54, 0x6a, 0xc5, 0x7a, 0x41, 0x68, 0x3a, 0x61, 0x07,
	0x75, 0xbe, 0x62, 0xd5, 0xe2, 0xf6, 0x56, 0xd8, 0x31, 0x5e, 0x01, 0x60, 0xd3, 0xa2, 0x01, 0xb1,
	0x95, 0x79, 0x46, 0x99, 0xf2, 0x5e, 0xb7, 0x4b, 0x49, 0xc4, 0xac, 0x02, 0x87, 0xa2, 0x21, 0x19,
	0x50, 0x76, 0xec, 0xc8, 0x46, 0x34, 0x97, 0x2d, 0x7c, 0x56, 0x35, 0x50, 0xc9, 0x68, 0x60, 0x7c,
	0x61, 0x56, 0xf3, 0x16, 0xa6, 0xa4, 0xa8, 0x9a, 0xa2, 0xa8, 0xf3, 0x82, 0x51, 0xea, 0xbe, 0x4b,
	0x10, 0xbe, 0x32, 0xe7, 0x67, 0xdb, 0x7d, 0x97, 0x98, 0xdf, 0x8c, 0x51, 0x93, 0xed, 0x2b, 0xab,
	0xbd, 0xe9, 0x6e, 0x63, 0x1c, 0x5d, 0xbd, 0x30, 0xba, 0x53, 0x0d, 0x2f, 0x61, 0x1b, 0xdf, 0x32,
	0xdb, 0x63, 0x6c, 0x4f, 0x40, 0xa5, 0x92, 0x87, 0x8a, 0x2a, 0x7c, 0x35, 0x23, 0xfc, 0x44, 0xd0,
	0xcc, 0x6d, 0x38, 0xcd, 0x10, 0xd9, 0x0e, 0x08, 0x71, 0xee, 0x75, 0x9b, 0xa1, 0xdf, 0xc3, 0x09,
	0x15, 0x9e, 0xb5, 0x49, 0x3c, 0x23, 0x35, 0x3d, 0x0b, 0xf5, 0x2f, 0x75, 0x38, 0x63, 0x91, 0xc0,
	0x0f, 0x23, 0x3e, 0x77, 0xfc, 0xc6, 0x9a, 0x84, 0x63, 0x71, 0x2b, 0x55, 0xa1, 0xd2, 0xb3, 0x50,
	0x4d, 0x85, 0xf9, 0x69, 0x58, 0x1d, 0x22, 0x33, 0x2d, 0x3a, 0xec, 0x74, 0x62, 0x1c, 0xcb, 0xe8,
	0x7f, 0x56, 0x58, 0xef, 0x36, 0xeb, 0x4c, 0xdc, 0x7e, 0x25, 0x75, 0xfb, 0xb3, 0xb0, 0x15, 0xee,
	0xaf, 0x26, 0xb9, 0x3f, 0x09, 0xef, 0xba, 0x62, 0xa4, 0xe3, 0xea, 0x6c, 0xe4, 0xa8, 0xd3, 0xfc,
	0x3f, 0x0d, 0x1e, 0xc3, 0xe0, 0x96, 0x0f, 0xe2, 0x31, 0x18, 0xad, 0xf9, 0x37, 0x0d, 0x4e, 0x58,
	0x64, 0xff, 0x86, 0xeb, 0x39, 0x77, 0x46, 0xf1, 0x7a, 0x41, 0x1f, 0x3a, 0xce, 0xbf, 0x96, 0x67,
	0x8e, 0x42, 0x15, 0x9e, 0x3d, 0x20, 0x5c, 0x51, 0xa8, 0x8a, 0xbb, 0xf6, 0x80, 0x18, 0x8f, 0x43,
	0xc3, 0x71, 0x43, 0xd2, 0x89, 0xfc, 0x70, 0xc4, 0xf5, 0x94, 0x76, 0x4c, 0x8a, 0x1c, 0x2f, 0xf2,
	0x19, 0xa3, 0x51, 0xc0, 0x9c, 0xf0, 0x6a, 0x2a, 0x05, 0xae, 0x66, 0x3f, 0x8c, 0x76, 0x46, 0x01,
	0x61, 0x74, 0xe2, 0x27, 0xe3, 0x24, 0x54, 0x5c, 0xda, 0x1a, 0x06, 0xa8, 0x32, 0x54, 0xe6, 0xfd,
	0xc0, 0xd8, 0x84, 0xda, 0x1e, 0x19, 0x1d, 0xfa, 0xa1, 0x58, 0x09, 0xa2, 0x69, 0xfe, 0x28, 0x16,
	0x98, 0x06, 0x19, 0x81, 0x33, 0xe1, 0xb3, 0x34, 0x23, 0x7c, 0x16, 0xcc, 0x2e, 0x52, 0x21, 0x4b,
	0xb2, 0x90, 0xa9, 0x5e, 0xcb, 0x53, 0xa3, 0xfc, 0x3e, 0x9c, 0xe2, 0xaa, 0xb9, 0x2e, 0x70, 0xdb,
	0x09, 0x09, 0x39, 0x82, 0x76, 0x02, 0x3b, 0xda, 0x95, 0x97, 0x51, 0x3d, 0xee, 0xc0, 0x85, 0x92,
	0xcf, 0x9a, 0xf9, 0x5b, 0x0d, 0x4e, 0x71, 0x74, 0x1e, 0x8a, 0xa6, 0xa2, 0x74, 0x3d, 0xab, 0x74,
	0x05, 0xe5, 0xd2, 0x4c, 0x94, 0x27, 0xd8, 0x48, 0x0a, 0x5f, 0x65, 0x2a, 0x7c, 0x87, 0x18, 0x3f,
	0xd1, 0x6a, 0x58, 0x32, 0x81, 0x93, 0xbe, 0x02, 0xcb, 0x9c, 0x07, 0x87, 0xbc, 0x43, 0x44, 0x56,
	0x77, 0x52, 0x65, 0x03, 0x5f, 0x59, 0x4b, 0xdd, 0xb4, 0x91, 0xac, 0x7f, 0x3d, 0x37, 0xfd, 0x51,
	0x40, 0xfc, 0x9c, 0xc5, 0xa0, 0x2c, 0xe5, 0x73, 0xd0, 0x38, 0x70, 0xa9, 0x1b, 0x49, 0x69, 0x4e,
	0x1d, 0x3b, 0xe2, 0x24, 0xa7, 0xa0, 0x45, 0xbd, 0x9a, 0x09, 0xd3, 0x31, 0x84, 0x67, 0x05, 0xef,
	0xd7, 0xfd, 0x43, 0x2f, 0xf1, 0x21, 0xd9, 0x40, 0xad, 0xb8, 0xcd, 0x72, 0xc6, 0x6d, 0x2a, 0x0b,
	0xb9, 0x92, 0x59, 0xc8, 0x73, 0x66, 0x3e, 0xe7, 0xa0, 0x41, 0xed, 0x03, 0xd2, 0x8a, 0x4d, 0x8f,
	0xbb, 0xc9, 0x7a, 0xdc, 0xd1, 0xb4, 0xa3, 0x94, 0x30, 0xfa, 0xdc, 0x06, 0xfa, 0x5c, 0x24, 0x8c,
	0x01, 0xe6, 0x33, 0x0d, 0xd6, 0x2d, 0xb2, 0xaf, 0x88, 0x95, 0x49, 0x54, 0xb4, 0xc2, 0x89, 0x4a,
	0x41, 0x80, 0x1f, 0x2e, 0x7b, 0x54, 0x64, 0xac, 0xa8, 0x32, 0x9a, 0x7f, 0xd1, 0x61, 0xdd, 0xa2,
	0xc1, 0x62, 0xc4, 0x98, 0x92, 0xc2, 0x4d, 0x65, 0x3d, 0x2f, 0x4f, 0x2b, 0x98, 0x74, 0x48, 0x52,
	0x57, 0xa7, 0xa4, 0x62, 0xb5, 0x6c, 0xc4, 0xfc, 0x27, 0x00, 0x8f, 0x10, 0x87, 0x45, 0x37, 0xd4,
	0x7c, 0xdd, 0x92, 0x7a, 0x54, 0xd0, 0x1a, 0x19, 0xc3, 0x48, 0x8d, 0x0e, 0xa6, 0x2e, 0xf2, 0x4f,
	0x35, 0x38, 0xad, 0xd8, 0x88, 0xdf, 0x21, 0x6f, 0x85, 0xbe, 0xd7, 0x2b, 0xea, 0xb1, 0x24, 0xe9,
	0xf4, 0x7c, 0xe9, 0x24, 0x3c, 0xa5, 0x34, 0xe4, 0x12, 0x94, 0x31, 0x48, 0x95, 0x31, 0x48, 0x8d,
	0xad, 0x41, 0xe4, 0x01, 0x23, 0x15, 0x0e, 0x9b, 0x6e, 0x21, 0x7f, 0x8f, 0x85, 0x90, 0x2d, 0xe4,
	0xa8, 0x42, 0x28, 0xaa, 0xd7, 0x27, 0x5b, 0x6d, 0x49, 0x91, 0xf0, 0x3f, 0x60, 0xd5, 0x23, 0x87,
	0x2d, 0xc9, 0x0e, 0x59, 0x3c, 0x9a, 0xe2, 0x50, 0x96, 0x3d, 0x72, 0xb8, 0x2d, 0xfb, 0x94, 0x89,
	0x42, 0x15, 0x75, 0x1b, 0x66, 0x38, 0xae, 0xc0, 0xa6, 0x3d, 0xa4, 0x64, 0x21, 0xb2, 0x4f, 0xf0,
	0xd0, 0x1f, 0xe6, 0x00, 0xfe, 0xa8, 0x89, 0x16, 0x0e, 0xfb, 0x5f, 0xc2, 0xbc, 0x7a, 0x9f, 0xad,
	0x12, 0xc1, 0x22, 0x4f, 0x09, 0x45, 0xe2, 0xaa, 0x49, 0x89, 0xab, 0x1a, 0x13, 0xf4, 0x59, 0x2a,
	0x9c, 0x14, 0x13, 0x4a, 0x33, 0x37, 0x6a, 0xe5, 0x09, 0x15, 0x14, 0x8c, 0x8b, 0x95, 0xfc, 0xbc,
	0x58, 0xf5, 0x18, 0xff, 0x0c, 0x27, 0x06, 0xa3, 0xec, 0x16, 0x98, 0x45, 0x8b, 0xb5, 0xc1, 0x48,
	0xdd, 0xff, 0xbe, 0x07, 0x67, 0x92, 0xdc, 0x38, 0x83, 0x42, 0xd1, 0xc4, 0xf8, 0xa1, 0x91, 0x31,
	0x23, 0x58, 0x4b, 0x54, 0xb0, 0x63, 0xd3, 0xbd, 0x6b, 0x4d, 0x59, 0x28, 0x4d, 0x11, 0xea, 0x32,
	0xd4, 0x43, 0x1c, 0x48, 0xc2, 0x29, 0x95, 0x94, 0x64, 0x4c, 0x9c, 0x9b, 0x46, 0xa1, 0xdd, 0xed,
	0xba, 0x1d, 0xc4, 0xbc, 0x6c, 0x89, 0xa6, 0xf9, 0x2d, 0x1d, 0x03, 0x9e, 0x28, 0x76, 0xdd, 0x25,
	0x87, 0xcd, 0xe6, 0x11, 0x2c, 0xd2, 0x71, 0xe9, 0x9e, 0xbc, 0x57, 0xab, 0xc7, 0x1d, 0xe8, 0x8a,
	0x2f, 0xc0, 0xd2, 0x80, 0x0c, 0xfc, 0x70, 0xc4, 0x5e, 0x33, 0xb2, 0xc0, 0xba, 0x70, 0xc0, 0xe3,
	0x00, 0x3e, 0x6d, 0xd9, 0x9e, 0xd3, 0x3a, 0x20, 0xa1, 0x48, 0x0f, 0x7c, 0x7a, 0xd5, 0x73, 0x1e,
	0x10, 0xac, 0x1b, 0x74, 0x82, 0x21, 0x43, 0x91, 0x2d, 0xf3, 0x5a, 0x27, 0x18, 0xa2, 0x09, 0xc5,
	0x33, 0xdb, 0x9d, 0xcc, 0x5e, 0x1e, 0x06, 0x76, 0x47, 0xf0, 0xb5, 0x09, 0xb5, 0x03, 0x12, 0x52,
	0xd7, 0x67, 0x5b, 0xa7, 0x15, 0x4b, 0x34, 0x63, 0x40, 0x83, 0x61, 0x1b, 0x2b, 0x65, 0x75, 0x34,
	0x9e, 0x6a, 0x30, 0x6c, 0xcb, 0x65, 0xb2, 0x86, 0x54, 0x26, 0x7b, 0x0d, 0x63, 0xa8, 0x8a, 0x4c,
	0xd1, 0x6a, 0xd9, 0xfb, 0x58, 0x2c, 0xbb, 0x4e, 0xfa, 0x24, 0x22, 0x58, 0x72, 0x5a, 0xc4, 0x22,
	0x2f, 0x5e, 0x0e, 0x33, 0x3f, 0xd0, 0xb0, 0xe6, 0xb5, 0x60, 0x06, 0x52, 0xe9, 0x4b, 0x05, 0xd3,
	0x32, 0x85, 0xa9, 0x3f, 0xb1, 0x8d, 0xdf, 0x4e, 0x68, 0x7b, 0xb4, 0x4b, 0xc2, 0xbb, 0x7e, 0x14,
	0xa7, 0x25, 0x37, 0xc0, 0xe0, 0x21, 0x9d, 0x97, 0xe4, 0xa4, 0xf4, 0x64, 0x53, 0x49, 0x4f, 0xa4,
	0xcc, 0xd6, 0x5a, 0xa7, 0x99, 0x1e, 0xe3, 0x49, 0x58, 0x8e, 0xf8, 0xcc, 0x98, 0xee, 0x32, 0xe6,
	0x97, 0x44, 0x5f, 0x9c, 0xf1, 0x9e, 0x81, 0x5a, 0x37, 0xf4, 0x07, 0x2d, 0x1a, 0xf0, 0xea, 0x6b,
	0x35, 0x6e, 0x6e, 0x07, 0xc6, 0x6b, 0xb0, 0x26, 0xa8, 0x07, 0x81, 0x1c, 0x97, 0xf2, 0x96, 0xd5,
	0x0a, 0x1f, 0xda, 0x0c, 0x70, 0xdd, 0x7e, 0xc8, 0x76, 0x77, 0x19, 0xa9, 0x8a, 0xfa, 0x8b, 0x02,
	0x5c, 0xe7, 0x30, 0x57, 0x2a, 0xca, 0xdc, 0x77, 0x34, 0xd8, 0xb0, 0xc8, 0xfe, 0x03, 0xbb, 0xef,
	0x3a, 0x76, 0x44, 0x76, 0xa4, 0x69, 0xb3, 0x94, 0xb5, 0x71, 0xca, 0x17, 0xa1, 0x1a, 0x47, 0xeb,
	0x20, 0x98, 0xe2, 0x64, 0x2a, 0x1e, 0x39, 0x6c, 0x06, 0xc6, 0x15, 0x58, 0xf2, 0x43, 0xb7, 0xe7,
	0x7a, 0x76, 0x3f, 0x1e, 0x3f, 0x99, 0x41, 0x10, 0xc3, 0x9a, 0x81, 0xd9, 0x81, 0x0d, 0x8b, 0x06,
	0x79, 0xcc, 0x2d, 0x0e, 0x3e, 0xf3, 0x55, 0x38, 0x29, 0x19, 0x9d, 0x70, 0xc1, 0x05, 0xc4, 0x37,
	0x7f, 0xa2, 0xc1, 0x49, 0x49, 0xb3, 0x47, 0xf8, 0x34, 0xc9, 0x7d, 0x75, 0x29, 0xf7, 0xdd, 0x80,
	0xaa, 0x8f, 0x09, 0x36, 0x77, 0x86, 0xbc, 0x95, 0xc9, 0x69, 0xcb, 0xd9, 0x9c, 0xb6, 0xe8, 0xde,
	0xb3, 0x0b, 0x67, 0x73, 0x98, 0xb5, 0xf2, 0x71, 0xca, 0x61, 0xb9, 0xe8, 0x69, 0xcd, 0x0f, 0x35,
	0x29, 0x57, 0x10, 0xe4, 0x8a, 0x93, 0x39, 0x82, 0x4d, 0x1d, 0xc1, 0xdd, 0xb8, 0xb4, 0xe5, 0x91,
	0x43, 0x5e, 0x79, 0xab, 0xb8, 0xf4, 0x2e, 0x39, 0x34, 0x1d, 0x29, 0x9a, 0x67, 0xf8, 0x5c, 0xa0,
	0x79, 0xbd, 0x2c, 0x0e, 0xd9, 0xde, 0xbc, 0x3e, 0x61, 0xd3, 0x97, 0xe7, 0x67, 0x4d, 0x5f, 0x1c,
	0xac, 0xf1, 0xcf, 0x94, 0x58, 0xaa, 0x65, 0x62, 0xa9, 0x78, 0xd9, 0x0d, 0x89, 0x12, 0x68, 0x6f,
	0xe4, 0x97, 0x49, 0x4a, 0x79, 0x04, 0xdf, 0xc3, 0x65, 0xb0, 0x4d, 0x3c, 0x67, 0x6b, 0xd7, 0x8e,
	0xee, 0x10, 0x4a, 0xed, 0x1e, 0xa1, 0x45, 0xc3, 0xc2, 0x26, 0xd4, 0x06, 0xec, 0x13, 0x8e, 0x81,
	0x68, 0x1a, 0x4f, 0xf1, 0x4d, 0x49, 0x09, 0x37, 0x25, 0x6b, 0x02, 0xc8, 0x3b, 0x54, 0xda, 0x8a,
	0x98, 0xaf, 0xe3, 0x42, 0x1a, 0x23, 0x5e, 0x34, 0x9a, 0x3e, 0x80, 0xd5, 0x24, 0x9a, 0xb2, 0xbd,
	0x6c, 0x41, 0xb6, 0xa7, 0xd7, 0x75, 0xcd, 0xf7, 0x61, 0x35, 0x09, 0x92, 0x0b, 0x9c, 0xb7, 0xa8,
	0xe1, 0x9a, 0x1e, 0xe6, 0x5e, 0x77, 0xec, 0x3d, 0x92, 0x54, 0xbe, 0x16, 0x53, 0xf5, 0x9a, 0xb0,
	0x07, 0x79, 0x07, 0x33, 0x9a, 0x87, 0xa2, 0x97, 0xce, 0xa8, 0xe7, 0x6f, 0x30, 0xa6, 0x4b, 0x1a,
	0x60, 0x61, 0xcc, 0x22, 0x03, 0xff, 0xe0, 0x98, 0x64, 0x7d, 0x17, 0x0b, 0x62, 0x0f, 0x49, 0x71,
	0x4e, 0x69, 0x7f, 0xaf, 0x61, 0x19, 0xf5, 0x8e, 0x7f, 0x80, 0xb9, 0xd7, 0xa2, 0xc8, 0x5f, 0x84,
	0xf5, 0x44, 0xec, 0x56, 0x64, 0x87, 0x3d, 0x1e, 0x4a, 0x1a, 0xd6, 0x5a, 0xd2, 0xbf, 0x83, 0xdd,
	0xc6, 0x25, 0x30, 0xd2, 0xa1, 0x22, 0xe2, 0xf2, 0x6c, 0xec, 0x44, 0xf2, 0xe6, 0x1e, 0x7f, 0x31,
	0xf5, 0xf8, 0xcc, 0xfc, 0x36, 0x2b, 0xd0, 0x2e, 0x5a, 0x1a, 0x41, 0x13, 0x77, 0xf2, 0xd2, 0x4e,
	0x30, 0xb3, 0x93, 0x9f, 0xbe, 0x71, 0xbd, 0x82, 0x9b, 0xa6, 0x6b, 0xb7, 0xb7, 0x9b, 0xc9, 0x89,
	0xf7, 0x3a, 0x94, 0x06, 0xb4, 0xc7, 0x59, 0x89, 0x1f, 0x8d, 0x55, 0xd0, 0x13, 0xe2, 0xba, 0xeb,
	0x98, 0x04, 0x13, 0xb6, 0x6b, 0x4d, 0xe5, 0xb3, 0xe7, 0xa1, 0xd6, 0x0e, 0xe4, 0xdc, 0xf3, 0x64,
	0x4a, 0x32, 0xd9, 0x1e, 0x59, 0xd5, 0x76, 0x20, 0xce, 0x20, 0x3b, 0xbe, 0xc3, 0x9c, 0x61, 0xc9,
	0xc2, 0x67, 0x4e, 0xa6, 0x94, 0x90, 0xd9, 0x02, 0x88, 0x79, 0xb3, 0xfb, 0xb6, 0x57, 0xdc, 0xb3,
	0x64, 0x79, 0xfd, 0x2f, 0x80, 0x98, 0x57, 0x3e, 0xc9, 0x26, 0xd4, 0xda, 0xec, 0x11, 0xbf, 0xd6,
	0x2d, 0xd1, 0x2c, 0xc4, 0x50, 0x0b, 0xdd, 0x28, 0x86, 0x42, 0xbb, 0x13, 0xc5, 0xfb, 0xa1, 0x8b,
	0xb0, 0x1e, 0xa5, 0x4d, 0xf9, 0x48, 0x6e, 0x4d, 0xea, 0x17, 0x9b, 0x8f, 0x99, 0x04, 0xde, 0x44,
	0x7f, 0x2a, 0x13, 0x30, 0xa0, 0x1c, 0x12, 0x1a, 0xf1, 0x49, 0xf1, 0xb9, 0xd0, 0x4c, 0xaf, 0x63,
	0x54, 0xbd, 0xd6, 0xf7, 0x3b, 0x7b, 0x88, 0xf7, 0x79, 0x80, 0x76, 0xdc, 0x90, 0x59, 0x6c, 0x60,
	0x0f, 0x32, 0x97, 0xfd, 0xfc, 0x7f, 0x30, 0xba, 0xe6, 0x7c, 0x9e, 0xe8, 0x77, 0x99, 0x7f, 0x5e,
	0x58, 0x9b, 0xd7, 0x70, 0x47, 0x87, 0x53, 0x6e, 0xed, 0x92, 0xce, 0x5e, 0x9c, 0x1b, 0x70, 0x96,
	0x88, 0xdb, 0xdb, 0x65, 0x22, 0x96, 0xac, 0x25, 0xc6, 0x14, 0x76, 0x8d, 0xcd, 0xf1, 0x36, 0x6e,
	0xca, 0xa4, 0x39, 0x5e, 0x16, 0x7c, 0x49, 0x37, 0x6a, 0x36, 0x84, 0xdd, 0xa5, 0xe3, 0x58, 0xa9,
	0x00, 0x47, 0xe2, 0xd1, 0x51, 0x11, 0x7e, 0xdb, 0xb0, 0xaa, 0x4e, 0x50, 0x84, 0x61, 0x15, 0x66,
	0x7d, 0x16, 0xcc, 0x6f, 0x60, 0x4e, 0x21, 0x52, 0xcd, 0x1d, 0x9b, 0x32, 0x42, 0x13, 0xcb, 0x16,
	0x59, 0xe3, 0xfe, 0x95, 0x8e, 0x79, 0x41, 0xf1, 0x09, 0xa6, 0x1f, 0x0f, 0xcf, 0xaa, 0x9f, 0x3e,
	0x09, 0xcb, 0xc9, 0xa1, 0x65, 0x9b, 0xd7, 0x1c, 0xca, 0xd6, 0x92, 0x38, 0x9c, 0x6c, 0x93, 0xd0,
	0x78, 0x09, 0x36, 0xc4, 0x5e, 0x2b, 0xb7, 0x4e, 0x7d, 0x8a, 0xbf, 0x55, 0xea, 0x46, 0xc6, 0x65,
	0x38, 0xa9, 0x8e, 0x66, 0xfa, 0xac, 0x3e, 0x51, 0x8a, 0xdd, 0xad, 0xb2, 0xc0, 0x85, 0xfe, 0x22,
	0x77, 0x20, 0xea, 0xd7, 0xf8, 0x2c, 0x79, 0xbc, 0xfa, 0xd4, 0x94, 0x94, 0x61, 0xd8, 0x48, 0x30,
	0xbc, 0x8d, 0x2b, 0x65, 0x7b, 0xd7, 0x0e, 0xc9, 0x6d, 0xd7, 0xdb, 0x9b, 0xcf, 0x29, 0x9b, 0x3f,
	0xd6, 0x70, 0xe5, 0xa4, 0xd3, 0xbd, 0x04, 0x40, 0xe3, 0x86, 0x7c, 0x4c, 0x79, 0x3a, 0xd9, 0x95,
	0x8b, 0x61, 0xbc, 0x96, 0x15, 0x37, 0x33, 0xc7, 0x68, 0x8a, 0xcb, 0x2f, 0x96, 0xaa, 0x16, 0x76,
	0xfe, 0x9f, 0x69, 0xa9, 0xec, 0x58, 0xe3, 0x98, 0x75, 0xb5, 0xc0, 0xa5, 0xad, 0x20, 0x74, 0x0f,
	0xec, 0x88, 0xd9, 0x4e, 0xdd, 0x6a, 0xb8, 0xb4, 0xc9, 0x3a, 0xd0, 0x76, 0x50, 0x50, 0xd4, 0x4c,
	0x09, 0xd7, 0x06, 0x93, 0x68, 0x27, 0x56, 0xcf, 0x84, 0x83, 0xc1, 0x82, 0xe7, 0x19, 0xca, 0xb9,
	0x68, 0x55, 0x3d, 0x17, 0x35, 0xff, 0x2c, 0x61, 0x8e, 0x62, 0x24, 0xac, 0xf4, 0x5d, 0x6f, 0x4f,
	0x38, 0x3b, 0x2a, 0x6b, 0x98, 0xbd, 0x0e, 0x6c, 0x4a, 0xf1, 0xbc, 0x99, 0x1f, 0x2b, 0x61, 0x6f,
	0x93, 0x77, 0x16, 0x05, 0xfb, 0x2c, 0xd4, 0xb9, 0x82, 0x85, 0x68, 0x35, 0xa6, 0x47, 0x47, 0x92,
	0xb9, 0x92, 0x9f, 0x05, 0x4d, 0xaf, 0xb2, 0xbb, 0x72, 0xd6, 0x1e, 0x4f, 0xa9, 0xd0, 0xd2, 0x54,
	0x5a, 0x73, 0x1d, 0x6f, 0x9b, 0xdf, 0xd0, 0xe4, 0x4c, 0xfe, 0x91, 0xd2, 0x2a, 0x6c, 0x9d, 0x5f,
	0xd7, 0x30, 0x37, 0xb9, 0x49, 0xa2, 0x54, 0xb3, 0xd2, 0x1d, 0x01, 0x4d, 0xb9, 0x23, 0x30, 0x27,
	0x4f, 0xe3, 0x26, 0x51, 0xce, 0x31, 0x09, 0xf3, 0xf3, 0x98, 0x25, 0xdc, 0x75, 0xa6, 0x2c, 0x1d,
	0x4b, 0x46, 0x9c, 0x59, 0x7c, 0xe5, 0xec, 0xe2, 0x53, 0x4e, 0xe9, 0x2b, 0xb3, 0x4e, 0xe9, 0xcd,
	0xef, 0xb3, 0x0b, 0xa3, 0xdb, 0xf6, 0x41, 0x81, 0x75, 0xff, 0x6f, 0x70, 0x16, 0x5f, 0xe6, 0xde,
	0x85, 0x63, 0xc2, 0x6c, 0xc4, 0x03, 0xee, 0x8d, 0xdd, 0x87, 0x2b, 0xba, 0x84, 0x26, 0x94, 0x3b,
	0x3f, 0xd6, 0xf0, 0x1e, 0xe9, 0x18, 0x97, 0x98, 0xf0, 0x6a, 0x99, 0x84, 0xf7, 0x58, 0x6c, 0x72,
	0x7a, 0x9e, 0xff, 0x31, 0xbb, 0xe1, 0x89, 0xfc, 0xfa, 0x7d, 0x87, 0x84, 0xc6, 0x05, 0x58, 0xea,
	0xe2, 0x93, 0x8c, 0x2c, 0xb0, 0x2e, 0xc4, 0xf6, 0x75, 0x38, 0xc7, 0x07, 0x4c, 0x41, 0x77, 0x93,
	0x0d, 0x59, 0x38, 0xbe, 0x9f, 0xb0, 0x1a, 0x77, 0x2e, 0xbf, 0x12, 0xc6, 0x9c, 0xdf, 0x63, 0x44,
	0x39, 0x03, 0x5b, 0x25, 0x0b, 0x9b, 0xf9, 0x33, 0x1d, 0x5d, 0xe3, 0x56, 0x48, 0xec, 0x88, 0x5c,
	0xed, 0xb7, 0x87, 0x83, 0x39, 0x97, 0xe1, 0x11, 0x6f, 0xb9, 0x9c, 0x07, 0xb0, 0x63, 0xaa, 0xec,
	0xf2, 0x05, 0xbf, 0x19, 0x88, 0x3d, 0x78, 0xfb, 0xe2, 0x02, 0x2c, 0xb1, 0xd7, 0xed, 0xfe, 0x30,
	0x6c, 0x0b, 0xfe, 0xb1, 0xeb, 0x5a, 0xdc, 0x63, 0x3c, 0x07, 0xeb, 0x6c, 0x00, 0xde, 0xb7, 0x95,
	0xa3, 0xda, 0x2a, 0xf6, 0xe3, 0xbd, 0x5b, 0x34, 0x90, 0x17, 0x04, 0x25, 0xac, 0x11, 0xd5, 0xb0,
	0x46, 0x74, 0x42, 0x70, 0x86, 0x92, 0x63, 0x95, 0x88, 0x11, 0xc7, 0xbb, 0x55, 0xaa, 0xa7, 0xa8,
	0x67, 0x3c, 0x85, 0xf0, 0xf4, 0x32, 0x74, 0x67, 0xa1, 0xce, 0x68, 0xa4, 0x9e, 0x1e, 0xdb, 0xc7,
	0xe6, 0xe9, 0x7f, 0xa0, 0x63, 0x1e, 0xf2, 0x9f, 0x8e, 0x1b, 0x2d, 0x42, 0x99, 0xb2, 0x3c, 0x25,
	0x55, 0x9e, 0x19, 0x6e, 0xf4, 0x0a, 0x2c, 0x77, 0x76, 0x6d, 0xaf, 0x47, 0x5a, 0xb1, 0xaa, 0xe9,
	0x44, 0x4f, 0xba, 0xc4, 0x46, 0xc5, 0x6d, 0x9a, 0xab, 0xcc, 0x5a, 0xae, 0x32, 0x55, 0xb3, 0xa9,
	0xcf, 0x30, 0x9b, 0x46, 0xd6, 0x6c, 0xcc, 0xaf, 0xb1, 0x44, 0xe7, 0x18, 0x70, 0x2a, 0xaa, 0xb9,
	0xb7, 0x31, 0x44, 0x5f, 0x65, 0x62, 0x7a, 0x11, 0xf1, 0xa2, 0x47, 0xc6, 0x93, 0xf9, 0x3b, 0x1d,
	0x83, 0xef, 0xc3, 0x10, 0x9b, 0x74, 0x93, 0x5b, 0x9f, 0x74, 0x93, 0x7b, 0x92, 0x45, 0xcb, 0xec,
	0x95, 0x55, 0xc8, 0x92, 0x95, 0x9a, 0x1c, 0xb9, 0x2e, 0x65, 0x56, 0x2a, 0x4b, 0xf2, 0x6d, 0xf1,
	0xa8, 0x3a, 0x9d, 0xea, 0x4c, 0xa7, 0xf3, 0x14, 0xac, 0xe0, 0x0d, 0xfd, 0x7e, 0x9f, 0x60, 0x6d,
	0x00, 0x8d, 0xac, 0x6e, 0x2d, 0xbb, 0x74, 0x2b, 0xe9, 0x2b, 0xba, 0x0b, 0x32, 0xff, 0x9f, 0x79,
	0xd0, 0x6d, 0x62, 0x87, 0x9d, 0x5d, 0x66, 0x4c, 0xaa, 0xab, 0xd1, 0x0a, 0xb8, 0x1a, 0x29, 0x1b,
	0xd3, 0xd5, 0x6c, 0xec, 0xdf, 0x61, 0x05, 0xbf, 0x10, 0x77, 0x3f, 0x79, 0x75, 0xfb, 0xb4, 0x32,
	0x5d, 0x72, 0x31, 0x54, 0x1d, 0x5b, 0xf4, 0x16, 0xc3, 0x84, 0xec, 0xda, 0x80, 0x72, 0x60, 0xf7,
	0xc4, 0x6d, 0x60, 0x7c, 0x36, 0x36, 0xa0, 0xca, 0xb7, 0xac, 0x6c, 0xc7, 0xc8, 0x5b, 0xe6, 0x1f,
	0x99, 0x33, 0x94, 0x51, 0x98, 0xcf, 0x7c, 0x55, 0x23, 0x60, 0x81, 0x64, 0xba, 0x11, 0x14, 0x8d,
	0x89, 0x42, 0xac, 0x8a, 0x24, 0xd6, 0x29, 0xa8, 0xe0, 0xaf, 0x1d, 0xb8, 0xac, 0xac, 0x61, 0xfe,
	0x46, 0x43, 0xd5, 0xb2, 0xdb, 0xb2, 0x0b, 0x15, 0x4a, 0x3a, 0xa7, 0x98, 0x6e, 0x18, 0x82, 0xd9,
	0x72, 0xae, 0x0e, 0x2a, 0xb2, 0x0e, 0x64, 0x23, 0xaa, 0xaa, 0xd7, 0x7e, 0x7f, 0xc1, 0xb4, 0xf3,
	0x08, 0x04, 0x59, 0xb8, 0x76, 0x12, 0x4d, 0x54, 0x64, 0x4d, 0x7c, 0xa0, 0x61, 0xd5, 0x3e, 0x5d,
	0x9e, 0x8f, 0xd8, 0x6b, 0x8f, 0x79, 0x88, 0xf2, 0xb8, 0x87, 0x30, 0x7f, 0xae, 0x61, 0x61, 0xff,
	0xd8, 0x98, 0x2a, 0x0a, 0xe1, 0x18, 0xf3, 0x95, 0x1c, 0xe6, 0x9b, 0x78, 0xe0, 0x73, 0xb5, 0x4d,
	0xa3, 0xd0, 0xee, 0x2c, 0x22, 0x08, 0x9a, 0x7f, 0xd5, 0xf0, 0x4c, 0x67, 0x81, 0x53, 0x1a, 0x97,
	0xa1, 0x3e, 0x18, 0xb5, 0x50, 0x7e, 0xbe, 0xab, 0x3b, 0xa9, 0x18, 0x19, 0x2b, 0x95, 0x59, 0xb5,
	0x01, 0x37, 0xea, 0x37, 0x60, 0x3d, 0x15, 0x9b, 0x7f, 0x57, 0x9e, 0xfc, 0xdd, 0x5a, 0x27, 0xa3,
	0xba, 0xa2, 0x07, 0xdc, 0x7f, 0xe0, 0xa7, 0x2a, 0xa3, 0xac, 0xee, 0x8f, 0xee, 0xf9, 0xe7, 0xcb,
	0x0b, 0x17, 0xe3, 0x1e, 0x3e, 0xe5, 0xc7, 0x2a, 0xa3, 0xc5, 0x9a, 0xf2, 0xb1, 0xba, 0x70, 0xa5,
	0xc6, 0xf3, 0x68, 0xb3, 0x71, 0xb5, 0xc6, 0xf3, 0x05, 0xc9, 0xfc, 0x43, 0xfc, 0xdd, 0xe6, 0x96,
	0xef, 0x75, 0xdd, 0xde, 0x9c, 0x7a, 0x7b, 0x16, 0xd6, 0x3c, 0x12, 0x1d, 0xfa, 0xe1, 0x5e, 0x66,
	0x33, 0xbc, 0xca, 0xbb, 0xc5, 0x41, 0xfe, 0x07, 0x3a, 0xfe, 0x7c, 0x93, 0x13, 0x7d, 0x16, 0xd6,
	0x5c, 0xef, 0xc0, 0x8d, 0x6c, 0x5c, 0x7c, 0x78, 0x2a, 0xc0, 0xa8, 0xae, 0xa6, 0xdd, 0x5b, 0xbe,
	0x43, 0x26, 0x91, 0xdd, 0x80, 0x2a, 0x0e, 0x14, 0x37, 0xf4, 0x78, 0x8b, 0xef, 0x34, 0x86, 0x41,
	0x2f, 0xb4, 0x1d, 0x69, 0xa7, 0x71, 0x9f, 0x75, 0xc4, 0xde, 0xae, 0x1b, 0x12, 0xd2, 0xea, 0xd8,
	0x81, 0xdd, 0x71, 0xa3, 0x11, 0x37, 0x8a, 0xe5, 0xb8, 0x73, 0x8b, 0xf7, 0x15, 0xbe, 0xc5, 0x3f,
	0x0e, 0x5c, 0x2d, 0x0f, 0xb8, 0xc7, 0xa0, 0x9e, 0x90, 0x63, 0x3f, 0xc2, 0x4b, 0xda, 0x5c, 0x11,
	0xb7, 0x18, 0xef, 0x05, 0x15, 0x91, 0x03, 0x9d, 0x3e, 0x03, 0x3a, 0xc5, 0x20, 0x7f, 0xad, 0xa1,
	0x22, 0x38, 0xd1, 0x23, 0xfc, 0x4a, 0x58, 0x70, 0xdd, 0x72, 0x48, 0x9f, 0xdf, 0x11, 0x2a, 0x5b,
	0x2b, 0xa2, 0xf7, 0x7a, 0xdc, 0x69, 0x5c, 0x84, 0xf5, 0xce, 0x30, 0x0c, 0x89, 0x17, 0xa5, 0x18,
	0x33, 0x0d, 0xad, 0xf1, 0xfe, 0x04, 0xe6, 0xb9, 0x4a, 0xd3, 0xfc, 0xfc, 0xe0, 0x26, 0x89, 0x2c,
	0x72, 0x68, 0xe7, 0x16, 0x22, 0x8f, 0x12, 0x8e, 0xbe, 0xa7, 0x89, 0x7b, 0x2d, 0x7c, 0xba, 0xa2,
	0xb0, 0xcc, 0x77, 0x62, 0x90, 0x87, 0x56, 0x39, 0x17, 0x2d, 0xf3, 0x2e, 0x7a, 0xac, 0x9b, 0x24,
	0xc5, 0x6f, 0x3e, 0x89, 0x3f, 0x61, 0x6e, 0x49, 0x9e, 0xf0, 0x78, 0x64, 0x96, 0x97, 0x43, 0x59,
	0x5d, 0x0e, 0x85, 0x96, 0xa7, 0xf9, 0x55, 0x56, 0x45, 0x15, 0xbf, 0x71, 0x33, 0x9e, 0x81, 0x0a,
	0x2b, 0x1b, 0x4c, 0xfa, 0x31, 0x1a, 0x7b, 0x3d, 0x27, 0xdb, 0x93, 0xb7, 0xa0, 0x26, 0xc5, 0x7a,
	0x69, 0xc2, 0x4f, 0x4a, 0x47, 0x9b, 0x4e, 0x47, 0x9f, 0x7e, 0x88, 0x34, 0xfd, 0xae, 0x06, 0x4b,
	0xc9, 0x94, 0x5f, 0x9f, 0xcd, 0x69, 0x11, 0x1f, 0xb1, 0x94, 0x4c, 0x9d, 0xf2, 0x0b, 0xf9, 0x6b,
	0xbf, 0x2f, 0xb3, 0x8c, 0x6a, 0x6b, 0x48, 0x23, 0x7f, 0x40, 0xc2, 0xab, 0x8e, 0xf3, 0xc0, 0xef,
	0x0f, 0x07, 0xf3, 0x1e, 0x0a, 0x6c, 0x40, 0xf5, 0x00, 0xe7, 0x11, 0x31, 0x85, 0xb5, 0x32, 0xff,
	0xaa, 0xa0, 0x9c, 0xf9, 0x57, 0x05, 0xe6, 0xff, 0x62, 0x3e, 0xb4, 0x68, 0x66, 0x8a, 0xda, 0xc1,
	0x77, 0x55, 0x2c, 0xee, 0x53, 0xb2, 0x10, 0xf2, 0xcf, 0xc2, 0x5a, 0x48, 0xf6, 0x87, 0x6e, 0x48,
	0x9c, 0x96, 0x02, 0xca, 0xaa, 0xe8, 0x7e, 0xf0, 0x10, 0xe0, 0x2c, 0x8a, 0xbb, 0x82, 0xe0, 0xb4,
	0xd9, 0x7f, 0x18, 0xb9, 0xf2, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0xc1, 0xf6, 0xc1, 0x75,
	0x44, 0x00, 0x00,
}
