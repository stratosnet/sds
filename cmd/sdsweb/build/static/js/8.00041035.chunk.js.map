{"version":3,"sources":["pages/HomePage/index.tsx"],"names":["observer","store","useContext","StoreContext","isSocketConnected","appStore","console","log","_useState","useState","_useState2","_slicedToArray","authSubid","setAuthSubid","useEffect","subid","_state","_store$appStore$socke","socketData","ourDataFromSocket","connectToSocketHandler","disconnectFromSocketHandler","sendMessageHandler","_useState3","_useState4","dataFromSocket","setDataFromSocket","_jsxs","className","children","_jsx","onClick","CreateFactory"],"mappings":"4NAiGeA,uBA3FY,WACzB,IAAMC,EAAQC,qBAAWC,KACnBC,EAAoBH,EAAMI,SAASD,kBACzCE,QAAQC,IACN,+DACAH,GAGF,IAAAI,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAE9BI,qBAAU,WACR,IAAMC,EAAQd,EAAMI,SAASU,MAC7BF,GAAa,SAACG,GAAM,OAAKD,CAAK,GAChC,GAAG,CAACd,EAAMI,SAASU,QAEnB,IAAAE,EAAAN,YAKIV,EAAMI,SAASa,WAAU,GAJ3BC,EAAiBF,EAAA,GACjBG,EAAsBH,EAAA,GACtBI,EAA2BJ,EAAA,GAC3BK,EAAkBL,EAAA,GAGpBM,EACEd,mBAA4C,CAAC,GAAEe,EAAAb,YAAAY,EAAA,GAD1CE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAexC,OAZAV,qBAAU,WAGR,OAFAR,QAAQC,IAAI,eAAgBY,GAC5BO,GAAkB,SAACV,GAAM,OAAKG,CAAiB,IACxC,WACLE,GACF,CACF,GAAG,CAACF,IAEJb,QAAQC,IACN,4DACAkB,GAGAE,eAAA,OAAKC,UAAU,YAAWC,SAAA,CACxBC,cAAA,UAAQF,UAAU,aAAYC,SAC5BC,cAAA,KAAGF,UAAU,QAAOC,SAAC,yCAEvBC,cAAA,OAAKF,UAAU,+BAA8BC,SAC3CF,eAAA,OAAKC,UAAU,yBAAwBC,SAAA,CACpCzB,EACC0B,cAAA,UAAQC,QAASV,EAA4BQ,SAAC,eAE9CC,cAAA,UAAQC,QAAS,kBAAMX,GAAwB,EAACS,SAAC,YAEnDC,cAAA,UACEC,QAAS,kBACPT,EACEU,IAA0CpB,GAC3C,EACFiB,SACF,yCAGDC,cAAA,UACEC,QAAS,kBACPT,EACEU,IAAwCpB,GACzC,EACFiB,SACF,uCAGDC,cAAA,UACEC,QAAS,kBACPT,EACEU,IAAuCpB,GACxC,EACFiB,SACF,kCAGDC,cAAA,UACEC,QAAS,kBACPT,EACEU,IAA0CpB,GAC3C,EACFiB,SACF,gDAOX,G","file":"static/js/8.00041035.chunk.js","sourcesContent":["import { observer } from \"mobx-react\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport StoreContext from \"_context/storeContext\";\nimport * as CreateFactory from \"_src/services/socket/createMessage\";\nimport \"./index.scss\";\n\nconst HomePage: React.FC = () => {\n  const store = useContext(StoreContext);\n  const isSocketConnected = store.appStore.isSocketConnected;\n  console.log(\n    \"ðŸš€ ~ file: index.tsx ~ line 24 ~ isSocketConnected\",\n    isSocketConnected\n  );\n\n  const [authSubid, setAuthSubid] = useState(\"\");\n\n  useEffect(() => {\n    const subid = store.appStore.subid;\n    setAuthSubid((_state) => subid);\n  }, [store.appStore.subid]);\n\n  const [\n    ourDataFromSocket,\n    connectToSocketHandler,\n    disconnectFromSocketHandler,\n    sendMessageHandler,\n  ] = store.appStore.socketData;\n\n  const [dataFromSocket, setDataFromSocket] =\n    useState<StratosNodeMonitor.AbstractObject>({});\n\n  useEffect(() => {\n    console.log(\"updata data,\", ourDataFromSocket);\n    setDataFromSocket((_state) => ourDataFromSocket);\n    return () => {\n      disconnectFromSocketHandler();\n    };\n  }, [ourDataFromSocket]);\n\n  console.log(\n    \"ðŸš€ ~ file: index.tsx ~ line 55 ~ dataFromSocket\",\n    dataFromSocket\n  );\n  return (\n    <div className=\"page-home\">\n      <header className=\"app-header\">\n        <p className=\"title\">Node Monitor Dashboard (Home page)</p>\n      </header>\n      <div className=\"page-container center-screen\">\n        <div className=\"video-player-container\">\n          {isSocketConnected ? (\n            <button onClick={disconnectFromSocketHandler}>Disconnect</button>\n          ) : (\n            <button onClick={() => connectToSocketHandler()}>Connect</button>\n          )}\n          <button\n            onClick={() =>\n              sendMessageHandler(\n                CreateFactory.createGetTrafficDataMessage(authSubid)\n              )\n            }\n          >\n            Send Message To Request Traffic Data\n          </button>\n          <button\n            onClick={() =>\n              sendMessageHandler(\n                CreateFactory.createGetDiskUsageMessage(authSubid)\n              )\n            }\n          >\n            Send Message To Request Disk Usage\n          </button>\n          <button\n            onClick={() =>\n              sendMessageHandler(\n                CreateFactory.createGetPeerListMessage(authSubid)\n              )\n            }\n          >\n            Send Message To Request Peers\n          </button>\n          <button\n            onClick={() =>\n              sendMessageHandler(\n                CreateFactory.createGetNodeDetailsMessage(authSubid)\n              )\n            }\n          >\n            Send Message To Request Node Details\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default observer(HomePage);\n"],"sourceRoot":""}