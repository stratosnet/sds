{"version":3,"sources":["pages/LoginPage/index.tsx","services/authenticationService.ts"],"names":["TextArea","Input","LoginPage","_ref","isHandshaked","ppNodeUrl","_useState","useState","_useState2","_slicedToArray","webToken","setWebToken","_useState3","_useState4","nodeAddress","setNodeAddress","_useState5","_useState6","isConnected","setIsConnected","_useState7","_useState8","isConnecting","setIsConnecting","store","useContext","StoreContext","appStore","_handlePasteClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ourLink","wrap","_context","prev","next","abrupt","navigator","clipboard","readText","sent","setSocketError","stop","apply","arguments","_handlePasteAddressClick","_callee2","_context2","useEffect","fetch","headers","Accept","then","response","json","myJson","wsUrl","monitorToken","_state","catch","err","console","log","_oldState","notification","success","message","description","concat","socketError","error","_store$appStore$socke","socketData","disconnectFromSocketHandler","isConnectingClasses","isDisconnected","_jsxs","className","children","_jsx","BigLogo","Tooltip","title","nodeAddressTooltip","placement","color","getRewardsTooltipColor","InfoCircleOutlined","style","fontSize","marginTop","RoundedButton","width","classNames","inactive","justifyContent","alignItems","containerClassName","handleClick","value","disabled","placeholder","onChange","e","aa","currentTarget","_prev","setSocketUrl","getRewardsTooltip","rows","size","token","sendAuthenticationMessage","Footer"],"mappings":"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","file":"static/js/9.dfcd3475.chunk.js","sourcesContent":["import { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { Input, notification, Tooltip } from \"antd\";\nimport classNames from \"classnames\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Footer from \"_components/common/Footer\";\nimport RoundedButton from \"_components/common/RoundedButton\";\nimport { BigLogo } from \"_components/common/WalletIcons\";\nimport {\n  getRewardsTooltip,\n  getRewardsTooltipColor,\n  nodeAddressTooltip,\n} from \"_constants/general\";\nimport StoreContext from \"_context/storeContext\";\nimport { sendAuthenticationRequest } from \"_src/services/authenticationService\";\nimport \"./index.scss\";\n\nconst { TextArea } = Input;\n\nexport interface LoginProps {\n  isHandshaked: boolean;\n  ppNodeUrl: string;\n}\n\nconst LoginPage: React.FC<LoginProps> = ({ isHandshaked, ppNodeUrl }) => {\n  const [webToken, setWebToken] = useState(\"\");\n  const [nodeAddress, setNodeAddress] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const store = useContext(StoreContext);\n\n  const { appStore } = store;\n\n  const getData = () => {\n    fetch(\"node_default_config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n        const { wsUrl, monitorToken } = myJson;\n\n        if (wsUrl) {\n          setNodeAddress((_state) => wsUrl);\n        }\n        if (monitorToken) {\n          setWebToken((_state) => monitorToken)\n        }\n      })\n      .catch((err) => {\n        console.log(\"could not fetch json file. error -\", err);\n      });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  async function handlePasteClick() {\n    if (!isConnected) {\n      return;\n    }\n    const ourLink = await navigator.clipboard.readText();\n    setWebToken(ourLink);\n    appStore.setSocketError(\"\");\n  }\n\n  async function handlePasteAddressClick() {\n    if (isConnected) {\n      return;\n    }\n    const ourLink = await navigator.clipboard.readText();\n    setNodeAddress(ourLink);\n    appStore.setSocketError(\"\");\n  }\n\n  useEffect(() => {\n    setIsConnected((_oldState) => isHandshaked);\n    if (isHandshaked) {\n      notification.success({\n        message: \"Success\",\n        description: `Connected to ${ppNodeUrl}`,\n      });\n    }\n\n    setIsConnecting(false);\n  }, [isHandshaked]);\n\n  useEffect(() => {\n    if (appStore.socketError) {\n      notification.error({\n        message: \"Could not authenticate\",\n        description: `${appStore.socketError}`,\n      });\n      setIsConnecting(false);\n    }\n  }, [appStore.socketError]);\n\n  const [\n    ourDataFromSocket,\n    connectToSocketHandler,\n    disconnectFromSocketHandler,\n    sendMessageHandler,\n  ] = store.appStore.socketData;\n\n  const handleTokenChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setWebToken((_prev) => e.currentTarget.value);\n    appStore.setSocketError(\"\");\n  };\n\n  const handleNodeAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const aa = e.currentTarget.value;\n    setNodeAddress((_prev) => aa);\n  };\n\n  const handleConfirmLink = () => {\n    if (!webToken) {\n      return;\n    }\n    sendAuthenticationRequest(webToken);\n  };\n\n  const handleConnectLink = () => {\n    if (!nodeAddress) {\n      return;\n    }\n    setIsConnecting(true);\n    console.log(\"setting socket url\", nodeAddress);\n    appStore.setSocketUrl(nodeAddress);\n  };\n\n  const handleDisconnectLink = () => {\n    disconnectFromSocketHandler();\n  };\n\n  const isConnectingClasses = isConnecting ? \"button is-loading\" : \" \";\n  console.log(\"ðŸš€ ~ file: index.tsx ~ line 125 ~ isConnecting\", isConnecting);\n  console.log(\n    \"ðŸš€ ~ file: index.tsx ~ line 124 ~ isConnectingClasses\",\n    isConnectingClasses\n  );\n\n  const isDisconnected = !isConnected;\n\n  return (\n    <div className=\"main-page-container columns\">\n      <section className=\"section page-login column\">\n        <div className=\"container\">\n          <div className=\"block block-container\">\n            <div className=\"login-logo-container\">\n              <figure className=\"image\">{BigLogo()}</figure>\n\n              <p className=\"logo-title is-size-4-desktop is-size-5-touch\">\n                Node Monitor\n              </p>\n            </div>\n            <div className=\"form-container\">\n              <div className=\"form-title is-flex  is-align-items-center\">\n                <div className=\"form-logo-title-container\">\n                  <p className=\"form-logo-title is-size-4-touch is-size-5-desktop\">\n                    Enter Your Node address\n                  </p>\n                  <Tooltip\n                    title={nodeAddressTooltip}\n                    placement=\"top\"\n                    color={getRewardsTooltipColor}\n                  >\n                    <InfoCircleOutlined\n                      style={{ fontSize: 18, marginTop: -5 }}\n                    />\n                  </Tooltip>\n                </div>\n                <div className=\"paste-button-container is-flex is-align-items-center \">\n                  <RoundedButton\n                    title={\"Paste from clipboard\"}\n                    width=\"250px\"\n                    className={classNames(\"1button button-submit \", {\n                      inactive: isConnected,\n                    })}\n                    style={{\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                      color: \"white\",\n                    }}\n                    containerClassName=\"is-pulled-right\"\n                    handleClick={handlePasteAddressClick}\n                  />\n                </div>\n              </div>\n              <div className=\"form-content \">\n                <div className=\"link-container input-container\">\n                  <div className=\"link-input-container\">\n                    <Input\n                      value={nodeAddress}\n                      disabled={isConnected}\n                      placeholder=\"Node address\"\n                      onChange={handleNodeAddressChange}\n                    />\n                  </div>\n                </div>\n                <div className=\"go-button-container double-button is-flex is-justify-content-space-between is-align-content-space-between \">\n                  <RoundedButton\n                    title={\"Connect\"}\n                    width=\"250px\"\n                    className={classNames(\n                      \"1button button-submit \",\n                      {\n                        inactive: isConnected,\n                      },\n                      isConnectingClasses\n                    )}\n                    disabled={isConnected}\n                    style={{\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                    containerClassName=\"is-pulled-right\"\n                    handleClick={handleConnectLink}\n                  />\n                  <RoundedButton\n                    title={\"Disconnect\"}\n                    width=\"250px\"\n                    className={classNames(\"1button button-submit \", {\n                      inactive: isDisconnected,\n                    })}\n                    disabled={isDisconnected}\n                    style={{\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                    containerClassName=\"is-pulled-right\"\n                    handleClick={handleDisconnectLink}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"form-container\">\n              <div className=\"form-title is-flex  is-align-items-center\">\n                <div className=\"form-logo-title-container\">\n                  <p className=\"form-logo-title is-size-4-touch is-size-5-desktop\">\n                    Enter Your Token to Access\n                  </p>\n                  <Tooltip\n                    title={getRewardsTooltip}\n                    placement=\"top\"\n                    color={getRewardsTooltipColor}\n                  >\n                    <InfoCircleOutlined\n                      style={{ fontSize: 18, marginTop: -5 }}\n                    />\n                  </Tooltip>\n                </div>\n                <div className=\"paste-button-container is-flex is-align-items-center \">\n                  <RoundedButton\n                    title={\"Paste from clipboard\"}\n                    width=\"250px\"\n                    className={classNames(\n                      \"1button button-submit \",\n                      {\n                        inactive: isDisconnected,\n                      }\n                      // activeClasses\n                    )}\n                    style={{\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                      color: \"white\",\n                    }}\n                    containerClassName=\"is-pulled-right\"\n                    handleClick={handlePasteClick}\n                  />\n                </div>\n              </div>\n              <div className=\"form-content \">\n                <div className=\"link-container\">\n                  <div className=\"link-input-container\">\n                    <TextArea\n                      value={webToken}\n                      rows={6}\n                      size=\"large\"\n                      onChange={handleTokenChange}\n                      disabled={isDisconnected}\n                      placeholder=\"Authentication Token\"\n                    />\n\n                    {isConnected && appStore.socketError && (\n                      <p className=\"error-message has-text-danger has-text-centered\">\n                        Error. You are not authorized\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"go-button-container is-flex is-justify-content-center is-align-items-center \">\n                  <RoundedButton\n                    title={\"Go\"}\n                    width=\"250px\"\n                    className={classNames(\n                      \"1button button-submit \",\n                      {\n                        inactive: isDisconnected,\n                      }\n                      // activeClasses\n                    )}\n                    disabled={isDisconnected}\n                    style={{\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                    containerClassName=\"is-pulled-right\"\n                    handleClick={handleConfirmLink}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import { sendAuthenticationMessage } from \"_src/services/socket/sendMessage\";\n\nexport const sendAuthenticationRequest = (token: string) => {\n  console.log(`token submitted ${token}`);\n\n  sendAuthenticationMessage(token);\n};\n"],"sourceRoot":""}