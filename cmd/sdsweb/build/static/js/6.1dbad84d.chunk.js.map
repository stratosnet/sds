{"version":3,"sources":["components/common/Header/index.tsx","components/DashBoard/ConnectedPeers/PeerHeaderItem/index.tsx","components/DashBoard/ConnectedPeers/PeerHeaderItemList/index.tsx","components/DashBoard/ConnectedPeers/PeerItem/index.tsx","components/DashBoard/ConnectedPeers/PeerItemList/index.tsx","components/DashBoard/ConnectedPeers/index.tsx","components/DashBoard/NodeDetails/AddressInfo/index.tsx","context/modalVisibiltyContext.tsx","providers/modalVisibility.tsx","components/DashBoard/NodeDetails/AdvancedMetricsModal/index.tsx","components/DashBoard/NodeDetails/NodeMetricItem/index.tsx","components/DashBoard/NodeDetails/NodeMetricsList/index.tsx","components/DashBoard/NodeDetails/index.tsx","components/DashBoard/TrafficInfo/TrafficChartLine/index.tsx","components/DashBoard/TrafficInfo/TrafficMetricCard/index.tsx","components/DashBoard/TrafficInfo/index.tsx","pages/DashboardPage/index.tsx"],"names":["Header","_jsx","className","children","_jsxs","StratosLogoIcon","PeerHeaderItem","_ref","headerTitle","_ref$currentSortName","currentSortName","SortName","Latency","sortByName","_ref$currentSortDirec","currentSortDirection","SortDirection","SortAscending","_ref$handleTitleClick","handleTitleClick","_newSortName","_ref$handleSortIconCl","handleSortIconClick","columnIsBeingSorted","onClick","IconComponent","SortDescendingOutlined","SortAscendingOutlined","getSortIconDirection","PeerHeaderItemList","columnHeaders","_useSortDirectionTogg","useSortDirectionToggle","SortDescending","_useSortDirectionTogg2","_slicedToArray","sortDirection","changeSortDirection","_useChangeSort","useChangeSort","_useChangeSort2","sortName","sortBy","map","columnHeader","PeerItem","connectedPeer","address","location","countryCode","latency","connection","_connectedPeer$openSt","openStreams","getUnicodeFlagIcon","join","PeerItemList","connectedPeers","id","Location","Address","observer","useContext","StoreContext","appStore","numberOfConnectedPeers","length","isLoaded","Spinner","spaceSize","spinSize","extraClasses","AddressInfo","nodeDetails","addressContent","ModalVisibilityContext","React","createContext","ModalVisibilityUpdateContext","console","log","useModalVisibilityUpdate","ModalVisibilityProvider","_useState","useState","_useState2","isVisible","setIsVisible","Provider","value","prevIsVisible","advancedMetrics","metricsEnhancementsList","toggleVisibility","classNames","concat","metricItem","metricsEnhancements","slug","metricInfo","title","NodeMetricItem","metricInfoClass","titleClass","handleClick","Icon","_ref$style","style","_objectSpread","_ref$metricsEnhanceme","metricsList","mainNodeMetrics","metricAction","infoClickHandler","Skeleton","active","store","nodeInfo","nodeMetrics","useCallback","_defineProperty","NodeMetricSlugs","Status","CheckCircleOutlinedIcon","PeersDiscovered","getMetrcisEnhancements","RoundedButton","width","disabled","justifyContent","alignItems","containerClassName","AdvancedMetricsModal","NodeMetricsList","props","enableSlices","margin","top","right","bottom","left","xScale","type","TrafficChartLine","data","maxInbound","maxOutbound","ResponsiveLine","curve","lineWidth","sliceTooltip","_ref2","slice","background","padding","border","borderRadius","points","point","multiplicator","serieId","Directions","Outbound","speed","parseInt","yFormatted","currentFormatted","formatTrafficValue","color","serieColor","enableArea","enableGridY","enableGridX","xFormat","enablePoints","colors","yScale","min","max","defs","offset","fill","match","d","Inbound","axisLeft","format","tickSize","tickPadding","tickRotation","axisBottom","TrafficMetricCard","cardClassName","direction","current","_current$split","split","_current$split2","currentSpeedValue","speedPrefix","_max$split","_max$split2","maxSpeedValue","maxSpeedPrefix","paragraph","rows","_store$appStore","inboundTrafficMetric","outboundTrafficMetric","maxInboundSpeed","maxOutboundSpeed","trafficDataLines","graphContainerContent","DashBoardPage","NodeDetails","TrafficInfo","ConnectedPeers","Footer"],"mappings":"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","file":"static/js/6.1dbad84d.chunk.js","sourcesContent":["import React from \"react\";\nimport { StratosLogoIcon } from \"_components/common/WalletIcons\";\nimport \"./index.scss\";\n\nconst Header: React.FC = () => {\n  return (\n    <section className=\"hero app-header column\">\n      <div className=\"hero-body\">\n        <div className=\"app-logo-container\">\n          <StratosLogoIcon />\n          <p className=\"logo-title is-size-6\">Node Monitor</p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Header;\n","import {\n  SortAscendingOutlined,\n  SortDescendingOutlined,\n} from \"@ant-design/icons\";\nimport React from \"react\";\nimport { SortDirection, SortName } from \"_src/constants/nodeMetrics\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  headerTitle: string;\n  currentSortName?: SortName;\n  sortByName?: SortName;\n  currentSortDirection?: SortDirection;\n  handleTitleClick?: (newSortName: SortName) => () => void;\n  handleSortIconClick?: () => void;\n}\n\nconst PeerHeaderItem: React.FC<SimpleProps> = ({\n  headerTitle,\n  currentSortName = SortName.Latency,\n  sortByName,\n  currentSortDirection = SortDirection.SortAscending,\n  handleTitleClick = (_newSortName: SortName) => () => {},\n  handleSortIconClick = () => {},\n}) => {\n  const getSortIconDirection = (currentSortDirection: SortDirection) => {\n    let IconComponent = SortDescendingOutlined;\n\n    if (currentSortDirection === SortDirection.SortAscending) {\n      IconComponent = SortAscendingOutlined;\n    }\n\n    return (\n      <IconComponent\n        className=\"sort-icon is-clickable\"\n        onClick={handleSortIconClick}\n      />\n    );\n  };\n\n  if (!sortByName) {\n    return (\n      <th>\n        <p>{headerTitle}</p>\n      </th>\n    );\n  }\n\n  const columnIsBeingSorted = currentSortName === sortByName;\n\n  return (\n    <th>\n      <div className=\"is-flex\">\n        <p className=\"is-clickable\" onClick={handleTitleClick(sortByName)}>\n          {headerTitle}\n        </p>\n        {columnIsBeingSorted && getSortIconDirection(currentSortDirection)}\n      </div>\n    </th>\n  );\n};\n\nexport default PeerHeaderItem;\n","import React from \"react\";\nimport PeerHeaderItem from \"_components/DashBoard/ConnectedPeers/PeerHeaderItem\";\nimport { SortDirection, SortName } from \"_constants/nodeMetrics\";\nimport { useChangeSort, useSortDirectionToggle } from \"_hooks\";\nimport \"./index.scss\";\n\ninterface PeerHeader {\n  headerTitle: string;\n  currentSortName?: SortName;\n  sortByName?: SortName;\n  currentSortDirection?: SortDirection;\n  handleTitleClick?: (newSortName: SortName) => () => void;\n  handleSortIconClick?: () => void;\n}\n\ninterface SimpleProps {\n  columnHeaders: PeerHeader[];\n}\n\nconst PeerHeaderItemList: React.FC<SimpleProps> = ({ columnHeaders }) => {\n  const [sortDirection, changeSortDirection] = useSortDirectionToggle(\n    SortDirection.SortAscending,\n    SortDirection.SortDescending\n  );\n\n  const [sortName, sortBy] = useChangeSort(SortName.Latency);\n\n  return (\n    <thead>\n      <tr>\n        {columnHeaders.map((columnHeader) => {\n          return (\n            <PeerHeaderItem\n              key={columnHeader.headerTitle}\n              headerTitle={columnHeader.headerTitle}\n              currentSortName={sortName}\n              currentSortDirection={sortDirection}\n              sortByName={columnHeader.sortByName}\n              handleTitleClick={sortBy}\n              handleSortIconClick={changeSortDirection}\n            />\n          );\n        })}\n      </tr>\n    </thead>\n  );\n};\n\nexport default PeerHeaderItemList;\n","import getUnicodeFlagIcon from \"country-flag-icons/unicode\";\nimport React from \"react\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  connectedPeer: StratosNodeMonitor.ConnectedPeer;\n}\n\nconst PeerItem: React.FC<SimpleProps> = ({ connectedPeer }) => {\n  const {\n    address,\n    location,\n    countryCode,\n    latency,\n    connection,\n    openStreams = [],\n  } = connectedPeer;\n\n  return (\n    <tr>\n      <td className=\"peer-location-column is-flex\">\n        {getUnicodeFlagIcon(countryCode)}\n        <p className=\"peer-location-title\">{location}</p>\n      </td>\n      <td>{latency}</td>\n      <td>{address}</td>\n      <td>{connection.join(\",\")}</td>\n      <td>{openStreams.join(\",\")}</td>\n    </tr>\n  );\n};\n\nexport default PeerItem;\n","import React from \"react\";\nimport PeerItem from \"_components/DashBoard/ConnectedPeers/PeerItem\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  connectedPeers: StratosNodeMonitor.ConnectedPeer[];\n}\n\nconst PeerItemList: React.FC<SimpleProps> = ({ connectedPeers }) => {\n  // console.log(\"!! render PeerItemList\");\n\n  return (\n    <tbody>\n      {connectedPeers.map((connectedPeer) => (\n        <PeerItem key={connectedPeer.id} connectedPeer={connectedPeer} />\n      ))}\n    </tbody>\n  );\n};\n\nexport default PeerItemList;\n","import { observer } from \"mobx-react\";\nimport React, { useContext } from \"react\";\nimport Spinner from \"_components/common/Spinner\";\nimport PeerHeaderItemList from \"_components/DashBoard/ConnectedPeers/PeerHeaderItemList\";\nimport PeerItemList from \"_components/DashBoard/ConnectedPeers/PeerItemList\";\nimport StoreContext from \"_context/storeContext\";\nimport { SortName } from \"_src/constants/nodeMetrics\";\nimport \"./index.scss\";\n\nconst columnHeaders = [\n  {\n    headerTitle: \"Location\",\n    sortByName: SortName.Location,\n  },\n  {\n    headerTitle: \"Latency\",\n    sortByName: SortName.Latency,\n  },\n  {\n    headerTitle: \"Address\",\n    sortByName: SortName.Address,\n  },\n  {\n    headerTitle: \"Connection\",\n  },\n  {\n    headerTitle: \"Open Streams\",\n  },\n];\n\nconst ConnectedPeers: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  const connectedPeers = store.appStore.connectedPeers;\n\n  const numberOfConnectedPeers = connectedPeers.length;\n\n  const isLoaded = numberOfConnectedPeers > 0;\n\n  // console.log(\"!! render ConnectedPeers\");\n  return (\n    <div className=\"peers-info-container \">\n      <div className=\"peers-title-container is-flex is-align-items-center is-flex-wrap-wrap is-justify-content-space-between\">\n        <p className=\"peers-title is-flex is-align-items-center\">\n          {numberOfConnectedPeers} discovered peers\n        </p>\n      </div>\n      <div>\n        {!isLoaded ? (\n          <Spinner\n            spaceSize=\"large\"\n            spinSize=\"large\"\n            extraClasses=\"peers-spinner-container\"\n          />\n        ) : (\n          <div className=\"table-container\">\n            <table className=\"table  is-hoverable is-fullwidth \">\n              <PeerHeaderItemList columnHeaders={columnHeaders} />\n              <PeerItemList connectedPeers={connectedPeers} />\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default observer(ConnectedPeers);\n","import React from \"react\";\nimport Spinner from \"_components/common/Spinner\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  nodeDetails: StratosNodeMonitor.NodeDetails;\n}\n\nconst AddressInfo: React.FC<SimpleProps> = ({ nodeDetails }) => {\n  const isLoaded = nodeDetails.address !== \"\";\n\n  const addressContent = isLoaded ? (\n    nodeDetails.address\n  ) : (\n    <Spinner spaceSize=\"middle\" spinSize=\"small\" />\n  );\n\n  return (\n    <div className=\"address-container is-flex is-align-items-center is-flex-wrap-wrap is-justify-content-space-between\">\n      <p className=\"address-title is-flex is-align-items-center\">Address</p>\n      <div className=\"address-value is-flex is-align-items-center\">\n        {addressContent}\n      </div>\n    </div>\n  );\n};\n\nexport default AddressInfo;\n","import React from \"react\";\n\nexport const ModalVisibilityContext = React.createContext(false);\nexport const ModalVisibilityUpdateContext = React.createContext(() => {\n  console.log(\"damn\");\n});\n","import React, { useContext, useState } from \"react\";\nimport {\n  ModalVisibilityContext,\n  ModalVisibilityUpdateContext,\n} from \"_src/context/modalVisibiltyContext\";\n\nexport const useModalVisibility = () => {\n  return useContext(ModalVisibilityContext);\n};\n\nexport const useModalVisibilityUpdate = () => {\n  return useContext(ModalVisibilityUpdateContext);\n};\n\nexport const ModalVisibilityProvider: React.FC<StratosNodeMonitor.ChildProps> =\n  ({ children }: StratosNodeMonitor.ChildProps) => {\n    const [isVisible, setIsVisible] = useState(false);\n\n    const toggleVisibility = () => {\n      setIsVisible((prevIsVisible) => !prevIsVisible);\n    };\n\n    return (\n      <ModalVisibilityContext.Provider value={isVisible}>\n        <ModalVisibilityUpdateContext.Provider value={toggleVisibility}>\n          {children}\n        </ModalVisibilityUpdateContext.Provider>\n      </ModalVisibilityContext.Provider>\n    );\n  };\n","import classNames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport {\n  useModalVisibility,\n  useModalVisibilityUpdate,\n} from \"_src/providers/modalVisibility\";\ninterface SimpleProps {\n  advancedMetrics: StratosNodeMonitor.NodeMetric[];\n\n  metricsEnhancementsList: StratosNodeMonitor.NodeMetricEnhancements;\n  style?: StratosNodeMonitor.AbstractObject;\n}\n\nconst AdvancedMetricsModal: React.FC<SimpleProps> = ({\n  advancedMetrics,\n  metricsEnhancementsList,\n}) => {\n  const isVisible = useModalVisibility();\n  const toggleVisibility = useModalVisibilityUpdate();\n\n  return (\n    <div className={classNames(\"modal\", `${isVisible ? \"is-active\" : \"\"}`)}>\n      <div className=\"modal-background\"></div>\n      <div className=\"modal-content\">\n        <div className=\"advanced-details-modal-content\">\n          <p className=\"subtitle \">Advanced Metrics</p>\n          <div className=\"advanced-details\">\n            {advancedMetrics.map((metricItem) => {\n              const metricsEnhancements =\n                metricsEnhancementsList[metricItem.slug];\n              const metricInfo =\n                metricsEnhancements?.metricInfo || metricItem.metricInfo;\n              return (\n                <div key={metricItem.id} className=\"advanced-paragraph\">\n                  <p className=\"item-title\">{metricItem.title}</p>\n                  <p className=\"item-text\">{metricInfo}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n      <button\n        className=\"modal-close is-large\"\n        onClick={toggleVisibility}\n        aria-label=\"close\"\n      ></button>\n    </div>\n  );\n};\n\nexport default observer(AdvancedMetricsModal);\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  metricInfoClass?: string;\n  titleClass?: string;\n  metricItem: StratosNodeMonitor.NodeMetric;\n  metricInfo: string;\n  handleClick?: StratosNodeMonitor.CustomAction;\n  Icon?: JSX.Element;\n  style?: StratosNodeMonitor.SimpleObject;\n}\n\nconst NodeMetricItem: React.FC<SimpleProps> = ({\n  metricInfoClass,\n  titleClass,\n  metricItem,\n  metricInfo,\n  handleClick,\n  Icon,\n  style = {},\n}) => {\n  const { title } = metricItem;\n  return (\n    <div className=\"node-metric\" style={{ ...style }}>\n      <div className=\"metric-title-container\">\n        <p className={classNames(\"metric-title\", titleClass)}>{title}</p>\n      </div>\n      <div className=\"metric-data is-flex is-align-items-center\">\n        {Icon && <div className=\"mertic-icon-container\">{Icon}</div>}\n        <div className=\"metric-info-contianer\">\n          <p\n            className={classNames(\"metric-info\", metricInfoClass)}\n            onClick={handleClick}\n          >\n            {metricInfo}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeMetricItem;\n","import { Skeleton } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useContext } from \"react\";\nimport NodeMetricItem from \"_components/DashBoard/NodeDetails/NodeMetricItem\";\nimport StoreContext from \"_context/storeContext\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  metricsEnhancementsList?: StratosNodeMonitor.NodeMetricEnhancements;\n}\n\nconst NodeMetricsList: React.FC<SimpleProps> = ({\n  metricsEnhancementsList = {},\n}) => {\n  const store = useContext(StoreContext);\n\n  const { metricsList } = store.appStore.mainNodeMetrics;\n\n  const isLoaded = metricsList.length > 0;\n\n  if (!isLoaded) {\n    return (\n      <div className=\"node-metrics-container\">\n        <Skeleton active />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"node-metrics-container\">\n      <div className=\"columns\">\n        {metricsList.map((metricItem) => {\n          const metricsEnhancements = metricsEnhancementsList[metricItem.slug];\n\n          const metricAction = metricsEnhancements?.infoClickHandler;\n          const metricInfoClass = metricsEnhancements?.metricInfoClass;\n          const metricInfo =\n            metricsEnhancements?.metricInfo || metricItem.metricInfo;\n          const titleClass = metricsEnhancements?.titleClass;\n          const Icon = metricsEnhancements?.Icon;\n\n          return (\n            <div className=\"column\" key={metricItem.id}>\n              <NodeMetricItem\n                metricInfoClass={metricInfoClass}\n                titleClass={titleClass}\n                metricItem={metricItem}\n                metricInfo={metricInfo}\n                handleClick={metricAction}\n                Icon={Icon}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default observer(NodeMetricsList);\n","import { observer } from \"mobx-react\";\nimport React, { useCallback, useContext } from \"react\";\nimport RoundedButton from \"_components/common/RoundedButton\";\nimport { CheckCircleOutlinedIcon } from \"_components/common/WalletIcons\";\nimport AddressInfo from \"_components/DashBoard/NodeDetails/AddressInfo\";\nimport AdvancedMetricsModal from \"_components/DashBoard/NodeDetails/AdvancedMetricsModal\";\nimport NodeMetricsList from \"_components/DashBoard/NodeDetails/NodeMetricsList\";\nimport StoreContext from \"_context/storeContext\";\nimport { NodeMetricSlugs } from \"_src/constants/nodeMetrics\";\nimport { useModalVisibilityUpdate } from \"_src/providers/modalVisibility\";\nimport \"./index.scss\";\n\nconst NodeDetails: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  const { nodeDetails } = store.appStore.nodeInfo;\n  const { metricsList } = store.appStore.nodeMetrics;\n  const { connectedPeers } = store.appStore;\n\n  const toggleVisibility = useModalVisibilityUpdate();\n\n  const getMetrcisEnhancements = useCallback(() => {\n    return {\n      [NodeMetricSlugs.Status]: {\n        Icon: <CheckCircleOutlinedIcon className=\"metric-icon\" />,\n      },\n      [NodeMetricSlugs.PeersDiscovered]: {\n        metricInfo: `${connectedPeers?.length}`,\n      },\n    };\n  }, [connectedPeers]);\n\n  const metricsEnhancementsList: StratosNodeMonitor.NodeMetricEnhancements =\n    getMetrcisEnhancements();\n\n  return (\n    <div className=\"node-details-container\">\n      <div className=\"top-part is-flex is-flex-wrap-wrap \">\n        <AddressInfo nodeDetails={nodeDetails} />\n\n        <div className=\"advanced-button-container is-flex is-justify-content-center \">\n          <RoundedButton\n            title={\"Advanced\"}\n            width=\"120px\"\n            disabled={nodeDetails.address === \"\"}\n            style={{ justifyContent: \"center\", alignItems: \"center\" }}\n            containerClassName=\"advanced-button is-pulled-right\"\n            handleClick={toggleVisibility}\n          />\n          <AdvancedMetricsModal\n            advancedMetrics={metricsList}\n            metricsEnhancementsList={metricsEnhancementsList}\n          />\n        </div>\n      </div>\n      <NodeMetricsList metricsEnhancementsList={metricsEnhancementsList} />\n    </div>\n  );\n};\n\nexport default observer(NodeDetails);\n","import { ResponsiveLine } from \"@nivo/line\";\nimport React from \"react\";\nimport { Directions } from \"_src/constants/traficInfo\";\nimport { formatTrafficValue } from \"_src/services/utils\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  style?: StratosNodeMonitor.SimpleObject;\n  data: any[];\n  maxInbound: number;\n  maxOutbound: number;\n}\n\nconst props = {\n  enableSlices: \"x\",\n  margin: { top: 20, right: 15, bottom: 100, left: 65 },\n  xScale: { type: \"point\" },\n} as const;\n\nconst TrafficChartLine: React.FC<SimpleProps> = ({\n  data,\n  maxInbound,\n  maxOutbound,\n}) => {\n  return (\n    <ResponsiveLine\n      data={data}\n      {...props}\n      curve=\"catmullRom\"\n      lineWidth={1}\n      sliceTooltip={({ slice }) => {\n        return (\n          <div\n            style={{\n              background: \"white\",\n              padding: \"9px 12px\",\n              border: \"1px solid #ccc\",\n              borderRadius: \"12px\",\n            }}\n          >\n            {slice.points.map((point) => {\n              const multiplicator =\n                point.serieId === Directions.Outbound ? -1 : 1;\n\n              const speed = parseInt(`${point.data.yFormatted}`);\n\n              const currentFormatted = formatTrafficValue(\n                speed * multiplicator\n              );\n\n              return (\n                <div\n                  key={point.id}\n                  style={{\n                    color: point.serieColor,\n                    padding: \"3px 0\",\n                  }}\n                >\n                  <strong>{point.serieId}: </strong>\n                  {`${currentFormatted}`}\n                </div>\n              );\n            })}\n          </div>\n        );\n      }}\n      enableArea\n      enableGridY={false}\n      enableGridX\n      xFormat={(value) => `${value}`}\n      enablePoints={false}\n      colors={[\"#e89141\", \"#318e68\"]}\n      yScale={{\n        type: \"linear\",\n        min: maxOutbound * -1,\n        max: maxInbound,\n      }}\n      defs={[\n        {\n          id: \"gradientInbound\",\n          type: \"linearGradient\",\n          colors: [\n            { offset: 0, color: \"green\" },\n            { offset: 100, color: \"rgba(84, 185, 138, 0.06)\" },\n          ],\n        },\n        {\n          id: \"gradientOutbound\",\n          type: \"linearGradient\",\n          colors: [\n            { offset: 0, color: \"rgba(232, 128, 32, 0.06)\" },\n            { offset: 100, color: \"#e89141\" },\n          ],\n        },\n      ]}\n      fill={[\n        { match: { id: Directions.Outbound }, id: \"gradientOutbound\" },\n        {\n          match: (d) => {\n            return d.id === Directions.Inbound;\n          },\n          id: \"gradientInbound\",\n        },\n      ]}\n      axisLeft={{\n        format: (value) => {\n          const speed = value < 0 ? value * -1 : value;\n          const currentFormatted = formatTrafficValue(speed);\n          return currentFormatted;\n        },\n        tickSize: 5,\n        tickPadding: 2,\n        tickRotation: 0,\n      }}\n      axisBottom={{\n        tickPadding: 80,\n        tickRotation: 270,\n      }}\n    />\n  );\n};\n\nexport default TrafficChartLine;\n","import { Skeleton } from \"antd\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport \"./index.scss\";\n\ninterface SimpleProps {\n  metricItem: StratosNodeMonitor.TrafficMetric;\n  style?: StratosNodeMonitor.SimpleObject;\n  cardClassName?: string;\n}\n\nconst TrafficMetricCard: React.FC<SimpleProps> = ({\n  metricItem,\n  style = {},\n  cardClassName,\n}) => {\n  const { direction, current, max } = metricItem;\n\n  const [currentSpeedValue, speedPrefix] = current.split(\" \");\n  const [maxSpeedValue, maxSpeedPrefix] = max.split(\" \");\n\n  const isLoaded = !!max;\n\n  if (!isLoaded) {\n    return <Skeleton active paragraph={{ rows: 2 }} />;\n  }\n\n  return (\n    <div\n      className={classNames(\"traffic-metric\", cardClassName)}\n      style={{ ...style }}\n    >\n      <div className=\"metric-title-container\">\n        <p className={classNames(\"metric-title\")}>{direction}</p>\n      </div>\n      <div className=\"metric-data is-flex  is-flex-direction-column\">\n        <div className=\"metric-speed-container is-flex is-align-items-flex-end is-justify-content-space-between\">\n          <p className={classNames(\"speed-current\")}>{currentSpeedValue}</p>\n          <p className={classNames(\"speed-max\")}>{maxSpeedValue}</p>\n        </div>\n        <div className=\"metric-label-container is-flex is-align-items-flex-end is-justify-content-space-between\">\n          <p className={classNames(\"speed-current-label\")}>\n            {speedPrefix || \"\"}\n          </p>\n          <p className={classNames(\"speed-max-label\")}>\n            {\" \"}\n            Max, {maxSpeedPrefix}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TrafficMetricCard;\n","import { Skeleton } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useContext } from \"react\";\nimport TrafficChartLine from \"_components/DashBoard/TrafficInfo/TrafficChartLine\";\nimport TrafficMetricCard from \"_components/DashBoard/TrafficInfo/TrafficMetricCard\";\nimport StoreContext from \"_context/storeContext\";\nimport \"./index.scss\";\n\nconst TrafficInfo: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  const {\n    inboundTrafficMetric,\n    outboundTrafficMetric,\n    maxInboundSpeed,\n    maxOutboundSpeed,\n    trafficDataLines,\n  } = store.appStore;\n\n  const isLoaded = trafficDataLines.length > 0;\n\n  let graphContainerContent = <Skeleton active paragraph={{ rows: 6 }} />;\n\n  if (isLoaded) {\n    graphContainerContent = (\n      <div className=\"graph-container\">\n        <TrafficChartLine\n          data={trafficDataLines}\n          maxInbound={maxInboundSpeed}\n          maxOutbound={maxOutboundSpeed}\n        />\n      </div>\n    );\n  }\n  return (\n    <div className=\"traffic-info-container \">\n      <div className=\"traffic-title-container is-flex is-align-items-center is-flex-wrap-wrap is-justify-content-space-between\">\n        <p className=\"traffic-title is-flex is-align-items-center\">\n          Real-Time Traffic\n        </p>\n      </div>\n      <div className=\"traffic-data-container is-flex\">\n        <div className=\"cards-container\">\n          <TrafficMetricCard\n            metricItem={inboundTrafficMetric}\n            cardClassName=\"is-inbound\"\n          />\n          <TrafficMetricCard\n            metricItem={outboundTrafficMetric}\n            cardClassName=\"is-outbound\"\n          />\n        </div>\n        {graphContainerContent}\n      </div>\n    </div>\n  );\n};\n\nexport default observer(TrafficInfo);\n","import React from \"react\";\nimport Footer from \"_components/common/Footer\";\nimport Header from \"_components/common/Header\";\nimport ConnectedPeers from \"_components/DashBoard/ConnectedPeers\";\nimport NodeDetails from \"_components/DashBoard/NodeDetails\";\nimport TrafficInfo from \"_components/DashBoard/TrafficInfo\";\nimport { ModalVisibilityProvider } from \"_src/providers/modalVisibility\";\nimport \"./index.scss\";\n\nconst DashBoardPage: React.FC = () => {\n  return (\n    <div className=\"main-page-container columns\">\n      <Header />\n      <section className=\"section page-dashboard column\">\n        <div className=\"container\">\n          <div className=\"block\">\n            <ModalVisibilityProvider>\n              <NodeDetails />\n            </ModalVisibilityProvider>\n            <TrafficInfo />\n            <ConnectedPeers />\n          </div>\n        </div>\n      </section>\n      <Footer />\n    </div>\n  );\n};\n\nexport default DashBoardPage;\n"],"sourceRoot":""}