{"version":3,"sources":["components/hoc/WithSocketConnection.tsx","pages/MainPage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","stores/AppStore.ts","stores/index.tsx","services/socket/types.ts","services/utils.ts","constants/nodeMetrics.ts","constants/traficInfo.ts","context/storeContext.ts","services/socket/createMessage.ts","services/socket/sendMessage.ts","components/common/Spinner/index.tsx","constants/general.ts","hooks/useChangeSort.ts","services/formatters/diskUsage.ts","services/formatters/onlineState.ts","services/geoIp.ts","services/formatters/peerList.ts","services/formatters/trafficInfo.ts","services/processors/types.ts","services/processors/utils.ts","services/processors/messagesProcessor.ts","services/formatters/nodeDetails.ts","services/processors/responseProcessor.ts","hooks/useSocketData.ts","services/parser/rpcSocketDataParser.ts","services/processors/mainProcessor.ts","hooks/useSortDirectionToggle.ts"],"names":["observer","props","store","useContext","StoreContext","children","url","appStore","socketUrl","console","log","socketInfo","useSocketData","setSocketData","_jsx","_Fragment","LoginPage","React","lazy","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sleep","abrupt","stop","DashboardPage","_callee2","_context2","_useState","useState","_useState2","_slicedToArray","isHandshaked","setIsHandshaked","useEffect","isAuthenticatedWithApi","content","isSocketConnected","ppNodeUrl","Suspense","fallback","Spinner","extraClasses","App","StoreProvider","WithSocketConnection","MainPage","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","defaultNodeInfo","nodeDetails","id","address","defaultNodeMetrics","metricsList","defaultTrafficInfo","time","inbound","outbound","defaultTrafficMetric","direction","Directions","Inbound","current","max","emptyFunc","defaultSocketData","AppStore","_classCallCheck","connectedPeers","nodeInfo","nodeMetrics","inboundTrafficMetric","outboundTrafficMetric","inboundSpeed","outboundSpeed","maxInboundSpeed","maxOutboundSpeed","trafficInfo","trafficDataLines","outboundTrafficDataLines","inboundTrafficDataLines","socketData","socketError","subid","resolvedIpList","makeAutoObservable","this","init","action","observable","setConnectedPeers","setNodeInfo","setNodeMetrics","setSocketUrl","setSocketError","setSubid","setIsSocketConnected","setIsAuthenticatedWithApi","isIpResolved","setIsIpResolved","_createClass","key","value","_init","logOut","apply","arguments","data","_this","runInAction","message","flag","speed","updateMaxInboundSpeed","updateMaxOutboundSpeed","currentFormatted","formatTrafficValue","maxFormatted","Outbound","x","y","traficInfoDataItem","filter","element","splice","slice","chartDataLength","newInbound","newOutbound","parseInt","error","setInboundSpeed","setOutboundSpeed","updateInboundTrafficMetric","updateOutboundTrafficMetric","updateInboundTrafficDataLines","updateOutboundTrafficDataLines","updateTrafficDataLines","get","metricItem","main","ip","countryCode","_rootStore","RootStore","Provider","SocketMessagesMap","speedInBytes","speedInKb","speedInMb","speedInGb","suffix","length","undefined","concat","toFixed","formatDate","timestamp","startDate","Date","formattedTime","dateString","_today","pastDate","diffMs","getTime","day","Math","floor","hour","minute","sec","round","ms","dateDiffWith","toString","since","toLocaleString","runningFor","NodeMetricSlugs","SortDirection","SortName","createContext","createSocketMessage","methodName","params","method","createAuthenticationMessage","token","Types","subscribe","createGetDiskUsageMessage","getDiskUsage","createGetNodeDetailsMessage","getNodeDetails","createGetPeerListMessage","getPeerList","createGetTrafficDataMessage","lines","getTrafficData","sendMessageToSocket","_appStore$socketData","sendMessageHandler","sendAuthenticationMessage","CreateFactory","sendGetNodeDetailsMessage","sendGetTrafficDataMessage","_ref$spinSize","spinSize","_ref$spaceSize","spaceSize","_ref$extraClasses","className","classNames","Space","size","Spin","getRewardsTooltip","nodeAddressTooltip","getRewardsTooltipColor","geoIpApiUrl","useChangeSort","defaultSortName","sortName","setSortName","newSortName","formatDiskUsageMessage","notificationResult","disk_usage","Error","data_host","dataHostingMetricInfo","title","slug","DataHosting","metricInfo","formatOnlineStateMessage","online_state","online","onlineStatusMetricInfo","_formatDate","onlineSinceMetricInfo","onlineForMetricInfo","Status","OnlineSince","OnlineFor","lookUpCountryCode","_ip$split","_ip$split2","resolvedCountryCode","res","geoInfoData","_geoInfoData$countryC","split","fetch","sent","json","t0","_x","formatPeerListMessage","peer_list","total","peerlist","peersDiscoveredNodeMetric","connectedPeersPromises","PeersDiscovered","map","_ref2","peerItem","idx","network_address","p2p_address","latency","connection","_yield$lookUpCountryC","_yield$lookUpCountryC2","location","result","_x2","_x3","Promise","all","formatTrafficInfoMessage","traffic_info","traffic_inbound","traffic_outbound","time_stamp","NotificationResultList","verifyFailedMessageResponse","returnCode","messageType","processNodeDetailsMessage","messageReturn","return","SocketTypes","nodeDetailsResult","defaultNodeDetails","processedNodeDetails","node_details","_objectSpread","Formatters","processPeerListMessage","peerListInfo","processNotificationMessage","dataHostingMetric","myTrafficInfo","metrics","_metrics","onlineStatusMetric","onlineSinceMetric","onlineForMetric","updatedMetricsList","push","err","notification","description","updateTrafficInfo","processUknowResponse","originalMessageResponse","code","processMessageResponse","messageResponse","MessagesProcessor","responseResult","message_type","Utils","trafficInfoList","forEach","processNotificationResponse","_messageResponse$para","paramsResult","messageResult","_data","setSendMessageHandler","_useState3","_useState4","retry","setRetry","_useState5","_useState6","parsedData","_useState7","_useState8","ourSocket","setOurSocket","disconnectFromSocketHandler","OPEN","close","connectToSocketHandler","ws","W3CWebSocket","w3cwebsocket","onopen","messageToSend","JSON","stringify","send","onmessage","evt","parsedMessage","_evt$data","eventData","originalMessage","parse","hasErrorA","ifMessageHasAnError","parseEventData","hasError","isParsedWithError","ResponseProcessor","response","processSocketMessage","socketErrorMessage","onclose","setTimeout","connectToSocketHandlerCallback","useCallback","disconnectFromSocketHandlerCallback","useSortDirectionToggle","sortAscending","sortDescending","sortDirection","setSortDirection","previousDirection"],"mappings":"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","file":"static/js/main.8b8cb208.chunk.js","sourcesContent":["import { observer } from \"mobx-react\";\nimport React, { useContext } from \"react\";\nimport { Network } from \"_config\";\nimport StoreContext from \"_context/storeContext\";\nimport { useSocketData } from \"_hooks\";\n\nconst WithSocketConnection: React.FC<StratosNodeMonitor.ChildProps> = (\n  props: StratosNodeMonitor.ChildProps\n) => {\n  const store = useContext(StoreContext);\n\n  const { children } = props;\n\n  const url = store.appStore.socketUrl;\n  console.log(\"🚀 ~ file: WithSocketConnection.tsx ~ line 14 ~ url\", url);\n\n  const socketInfo = useSocketData(url);\n  console.log(\"WithSocketConnection was called\");\n\n  store.appStore.setSocketData(socketInfo);\n\n  return <>{children}</>;\n};\n\nexport default observer(WithSocketConnection);\n","import { observer } from \"mobx-react\";\nimport React, { Suspense, useContext, useEffect, useState } from \"react\";\nimport sleep from \"sleep-promise\";\nimport Spinner from \"_components/common/Spinner\";\nimport StoreContext from \"_context/storeContext\";\n\n// @todo - remove this artifical slowing down bolierplate\nconst LoginPage = React.lazy(async () => {\n  await sleep(1000);\n  return import(\"_pages/LoginPage\");\n});\nconst DashboardPage = React.lazy(async () => {\n  await sleep(2000);\n  return import(\"_pages/DashboardPage\");\n});\n\nconst HomePage = React.lazy(async () => {\n  await sleep(2000);\n  return import(\"_pages/HomePage\");\n});\n\nconst MainPage: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  const [isHandshaked, setIsHandshaked] = useState(false);\n\n  useEffect(() => {\n    console.log(\n      \"from Main page isAuthenticatedWithApi\",\n      store.appStore.isAuthenticatedWithApi\n    );\n    setIsHandshaked(store.appStore.isAuthenticatedWithApi);\n  }, [store.appStore.isAuthenticatedWithApi]);\n\n  let content: React.ReactElement = <div>Ops,there must be an error here!</div>;\n\n  if (!isHandshaked) {\n    content = (\n      <LoginPage\n        isHandshaked={store.appStore.isSocketConnected}\n        ppNodeUrl={store.appStore.socketUrl}\n      />\n    );\n  } else {\n    content = (\n      // <HomePage />\n      <DashboardPage />\n    );\n  }\n\n  return (\n    <Suspense fallback={<Spinner extraClasses=\"is-full-height\" />}>\n      {content}\n    </Suspense>\n  );\n};\n\nexport default observer(MainPage);\n","import WithSocketConnection from \"_components/hoc/WithSocketConnection\";\nimport MainPage from \"_pages/MainPage\";\nimport { StoreProvider } from \"_stores\";\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <StoreProvider>\n      <WithSocketConnection>\n        <MainPage />\n      </WithSocketConnection>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\n  action,\n  makeAutoObservable,\n  observable,\n  runInAction,\n  toJS,\n} from \"mobx\";\nimport { chartDataLength, Directions } from \"_constants/traficInfo\";\nimport { formatTrafficValue } from \"_src/services/utils\";\n\nexport const defaultNodeInfo: StratosNodeMonitor.NodeInfo = {\n  nodeDetails: {\n    id: \"\",\n    address: \"\",\n  },\n};\n\nexport const defaultNodeMetrics: StratosNodeMonitor.NodeMetrics = {\n  metricsList: [],\n};\n\nconst defaultTrafficInfo = {\n  id: \"\",\n  time: \"\",\n  inbound: \"\",\n  outbound: \"\",\n} as const;\n\nconst defaultTrafficMetric = {\n  direction: Directions.Inbound,\n  current: \"\",\n  max: \"\",\n};\ntype ConnectHandlerType = (url?: string) => void;\ntype DisconnectHandlerType = () => void;\ntype SendMessageHandlerType = (\n  data: StratosNodeMonitor.AbstractObject\n) => boolean;\n\ntype HookReturnType = [\n  StratosNodeMonitor.AbstractObject,\n  ConnectHandlerType,\n  DisconnectHandlerType,\n  SendMessageHandlerType\n];\n\nconst emptyFunc = () => {};\n\nconst defaultSocketData: HookReturnType = [\n  {},\n  emptyFunc,\n  emptyFunc,\n  () => {\n    return false;\n  },\n];\n\nclass AppStore {\n  public connectedPeers: StratosNodeMonitor.ConnectedPeer[] = [];\n  public nodeInfo: StratosNodeMonitor.NodeInfo = defaultNodeInfo;\n  public nodeMetrics: StratosNodeMonitor.NodeMetrics = defaultNodeMetrics;\n\n  public inboundTrafficMetric: StratosNodeMonitor.TrafficMetric =\n    defaultTrafficMetric;\n  public outboundTrafficMetric: StratosNodeMonitor.TrafficMetric =\n    defaultTrafficMetric;\n\n  public inboundSpeed: number = 0;\n  public outboundSpeed: number = 0;\n\n  public maxInboundSpeed: number = 0;\n  public maxOutboundSpeed: number = 0;\n  public trafficInfo: StratosNodeMonitor.TrafficInfo = defaultTrafficInfo;\n  public trafficDataLines: StratosNodeMonitor.TrafficDataLine[] = [];\n\n  public outboundTrafficDataLines: StratosNodeMonitor.TraficInfoDataItem[] = [];\n  public inboundTrafficDataLines: StratosNodeMonitor.TraficInfoDataItem[] = [];\n\n  public socketData: HookReturnType = defaultSocketData;\n  public socketUrl: string = \"\";\n\n  // auth\n  public socketError: string = \"\";\n  public subid = \"\";\n  public isSocketConnected: boolean = false;\n  public isAuthenticatedWithApi: boolean = false;\n  public resolvedIpList: StratosNodeMonitor.AbstractObject = {};\n\n  constructor() {\n    makeAutoObservable(this, {\n      init: action,\n      connectedPeers: observable,\n      setConnectedPeers: action,\n      nodeInfo: observable,\n      setNodeInfo: action,\n      nodeMetrics: observable,\n      setNodeMetrics: action,\n      setSocketData: action,\n      socketData: observable,\n\n      setSocketUrl: action,\n      socketUrl: observable,\n      /// auth\n      setSocketError: action,\n      setSubid: action,\n      setIsSocketConnected: action,\n      setIsAuthenticatedWithApi: action,\n\n      socketError: observable,\n      subid: observable,\n      isSocketConnected: observable,\n      isAuthenticatedWithApi: observable,\n\n      resolvedIpList: observable,\n      isIpResolved: action,\n      setIsIpResolved: action,\n    });\n\n    this.init();\n  }\n\n  async init() {\n    this.logOut();\n  }\n\n  setSocketData(data: HookReturnType): void {\n    this.socketData = data;\n  }\n\n  setSocketUrl(url: string): void {\n    this.socketUrl = url;\n  }\n\n  logOut(): void {\n    runInAction(() => {\n      // this.authenticationToken = \"\";\n      this.socketError = \"\";\n      this.subid = \"\";\n      this.isSocketConnected = false;\n      this.isAuthenticatedWithApi = false;\n    });\n  }\n\n  // setAuthenticationToken(token: string): void {\n  //   this.authenticationToken = token;\n  // }\n\n  setSocketError(message: string): void {\n    this.socketError = message;\n  }\n\n  setSubid(subid: string): void {\n    this.subid = subid;\n  }\n\n  setIsSocketConnected(flag: boolean): void {\n    this.isSocketConnected = flag;\n  }\n\n  setIsAuthenticatedWithApi(flag: boolean): void {\n    this.isAuthenticatedWithApi = flag;\n  }\n\n  updateMaxInboundSpeed(speed: number): void {\n    this.maxInboundSpeed =\n      speed > this.maxInboundSpeed ? speed : this.maxInboundSpeed;\n  }\n\n  updateMaxOutboundSpeed(speed: number): void {\n    this.maxOutboundSpeed =\n      speed > this.maxOutboundSpeed ? speed : this.maxOutboundSpeed;\n  }\n\n  setInboundSpeed(speed: number): void {\n    this.inboundSpeed = speed;\n    this.updateMaxInboundSpeed(speed);\n  }\n\n  setOutboundSpeed(speed: number): void {\n    this.outboundSpeed = speed;\n    this.updateMaxOutboundSpeed(speed);\n  }\n\n  updateInboundTrafficMetric(current: number, max: number): void {\n    const currentFormatted = formatTrafficValue(current);\n    const maxFormatted = formatTrafficValue(max);\n\n    this.inboundTrafficMetric = {\n      direction: Directions.Inbound,\n      current: currentFormatted,\n      max: maxFormatted,\n    };\n  }\n\n  updateOutboundTrafficMetric(current: number, max: number): void {\n    const currentFormatted = formatTrafficValue(current);\n    const maxFormatted = formatTrafficValue(max);\n\n    this.outboundTrafficMetric = {\n      direction: Directions.Outbound,\n      current: currentFormatted,\n      max: maxFormatted,\n    };\n  }\n\n  updateInboundTrafficDataLines(x: string, y: number): void {\n    const traficInfoDataItem = { x, y };\n    const data = this.inboundTrafficDataLines.filter(\n      (element) => element.x !== x\n    );\n    data.splice(0, 0, traficInfoDataItem);\n    this.inboundTrafficDataLines = data.slice(0, chartDataLength);\n  }\n\n  updateOutboundTrafficDataLines(x: string, y: number): void {\n    const traficInfoDataItem = { x, y: y * -1 };\n    const data = this.outboundTrafficDataLines.filter(\n      (element) => element.x !== x\n    );\n    data.splice(0, 0, traficInfoDataItem);\n    this.outboundTrafficDataLines = data.slice(0, chartDataLength);\n  }\n\n  updateTrafficDataLines(\n    inboundTrafficDataLines: StratosNodeMonitor.TraficInfoDataItem[],\n    outboundTrafficDataLines: StratosNodeMonitor.TraficInfoDataItem[]\n  ): void {\n    this.trafficDataLines = [\n      {\n        id: Directions.Outbound,\n        data: outboundTrafficDataLines,\n      },\n      {\n        id: Directions.Inbound,\n        data: inboundTrafficDataLines,\n      },\n    ];\n  }\n\n  // called from socket\n  updateTrafficInfo(trafficInfo: StratosNodeMonitor.TrafficInfo): void {\n    const { inbound, outbound, time } = trafficInfo;\n    let newInbound = 0;\n    let newOutbound = 0;\n\n    try {\n      newInbound = parseInt(inbound);\n    } catch (error) {\n      console.log(\"error parsing inbound!\", error);\n    }\n\n    try {\n      newOutbound = parseInt(outbound);\n    } catch (error) {\n      console.log(\"error parsing outbound!\", error);\n    }\n\n    this.setInboundSpeed(newInbound);\n    this.setOutboundSpeed(newOutbound);\n\n    this.updateInboundTrafficMetric(this.inboundSpeed, this.maxInboundSpeed);\n    this.updateOutboundTrafficMetric(this.outboundSpeed, this.maxOutboundSpeed);\n\n    this.updateInboundTrafficDataLines(time, newInbound);\n    this.updateOutboundTrafficDataLines(time, newOutbound);\n\n    this.updateTrafficDataLines(\n      this.inboundTrafficDataLines,\n      this.outboundTrafficDataLines\n    );\n  }\n\n  // called from socket\n  setConnectedPeers(connectedPeers: StratosNodeMonitor.ConnectedPeer[]): void {\n    if (!connectedPeers) {\n      return;\n    }\n    this.connectedPeers = connectedPeers;\n  }\n\n  // called from withApi AND (to substitute) from useSocketData\n  setNodeInfo(nodeInfo: StratosNodeMonitor.NodeInfo): void {\n    this.nodeInfo = nodeInfo;\n  }\n\n  get mainNodeMetrics(): StratosNodeMonitor.NodeMetrics {\n    const mainMetricsList = this.nodeMetrics.metricsList.filter(\n      (metricItem) => metricItem.main === true\n    );\n\n    return { metricsList: mainMetricsList };\n  }\n\n  setNodeMetrics(nodeMetrics: StratosNodeMonitor.NodeMetrics): void {\n    this.nodeMetrics = nodeMetrics;\n  }\n\n  isIpResolved(ip: string) {\n    if (!ip) {\n      return null;\n    }\n    return this.resolvedIpList[ip];\n  }\n\n  setIsIpResolved(ip: string, countryCode: string) {\n    if (!this.isIpResolved(ip)) {\n      this.resolvedIpList[ip] = \"\";\n    }\n\n    this.resolvedIpList[ip] = countryCode;\n  }\n}\n\nexport default AppStore;\n","import React from \"react\";\nimport StoreContext from \"_context/storeContext\";\nimport AppStore from \"./AppStore\";\n\nclass RootStore {\n  public appStore: AppStore;\n\n  constructor() {\n    this.appStore = new AppStore();\n  }\n}\n\nconst _rootStore: StratosNodeMonitor.RootStore<AppStore> = new RootStore();\n\nexport default _rootStore;\n\nexport const StoreProvider: React.FC = ({ children }) => {\n  return (\n    <StoreContext.Provider value={_rootStore}>{children}</StoreContext.Provider>\n  );\n};\n","export enum SocketMessagesMap {\n  subscribe = \"monitor_subscribe\",\n  getDiskUsage = \"monitor_getDiskUsage\",\n  getNodeDetails = \"monitor_getNodeDetails\",\n  getTrafficData = \"monitor_getTrafficData\",\n  getPeerList = \"monitor_getPeerList\",\n}\n\nexport interface SocketMessage<T> {\n  id: number;\n  method: string;\n  params: T;\n}\n\nexport interface SocketError {\n  code: number;\n  message: string;\n}\n\nexport interface BasicSocketResponse<T> {\n  error?: SocketError;\n  originalMessage: T;\n}\n\nexport interface ErrorSocketResponse<T> extends BasicSocketResponse<T> {\n  error: SocketError;\n}\n\nexport type AuthenticationMessageParameters = [string, string];\nexport type GetDiskUsageMessageParameters = [{ subid: string }];\nexport type GetNodeDetailsMessageParameters = [{ subid: string }];\nexport type GetPeerListMessageParameters = [{ subid: string }];\nexport type GetTrafficDataMessageParameters = [\n  { subid: string; lines: number }\n];\n\nexport interface AuthenticationSocketMessage\n  extends SocketMessage<AuthenticationMessageParameters> {}\nexport interface GetDiskUsageSocketMessage\n  extends SocketMessage<GetDiskUsageMessageParameters> {}\nexport interface GetNodeDetailsSocketMessage\n  extends SocketMessage<GetNodeDetailsMessageParameters> {}\nexport interface GetPeerListSocketMessage\n  extends SocketMessage<GetPeerListMessageParameters> {}\nexport interface GetTrafficDataSocketMessage\n  extends SocketMessage<GetTrafficDataMessageParameters> {}\n","export const flatten = <T>(array: T[]) => ([] as T[]).concat(...array);\n\nexport const random = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min) + min);\n\nexport const range = (start: number, end: number) =>\n  Array.from(\" \".repeat(end - start), (_, index) => start + index);\n\nexport const shuffle = <T>(values: T[]) =>\n  values\n    .map((value) => [Math.random(), value] as const)\n    .sort(([left], [right]) => left - right)\n    .map(([, value]) => value);\n\nexport const getTimestamp = () => new Date().getTime();\n\nexport const formatTrafficValue = (speedInBytes: number, isItSpeed = true) => {\n  const speedInKb = speedInBytes / 1024;\n  const speedInMb = speedInKb / 1024;\n  const speedInGb = speedInMb / 1204;\n\n  const suffix = isItSpeed ? \"/s\" : \"\";\n\n  const isKb = speedInKb >= 1 && speedInMb < 1;\n\n  if (isKb) {\n    return `${speedInKb.toFixed(1)} Kb${suffix}`;\n  }\n\n  const isMb = speedInMb >= 1 && speedInGb < 1;\n\n  if (isMb) {\n    return `${speedInMb.toFixed(1)} Mb${suffix}`;\n  }\n\n  const isGb = speedInGb >= 1;\n\n  if (isGb) {\n    return `${speedInGb.toFixed(1)} Gb${suffix}`;\n  }\n\n  return speedInBytes + \" B/s\";\n};\n\nexport const getRandomNumber = (min = 1, max = 10) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const makeRepeated = (\n  arr: StratosNodeMonitor.ConnectedPeer[],\n  repeats: number\n) =>\n  Array.from(\n    {\n      length: repeats,\n    },\n    () => arr\n  ).flat();\n\nexport const dateDiffWith = (dateString: string, type = \"minute\") => {\n  const _today = new Date();\n  const pastDate = new Date(dateString);\n\n  const diffMs = _today.getTime() - pastDate.getTime(); // milliseconds between pastDate and now\n  const diffDays = Math.floor(diffMs / 86400000); // days\n  const diffHrs = Math.floor((diffMs % 86400000) / 3600000); // hours\n  const diffMins = Math.floor(((diffMs % 86400000) % 3600000) / 60000); // minutes\n  const diffSec = Math.round(\n    (((((diffMs % 86400000) % 3600000) % 60000) / 600) * 60) / 100\n  ); // sec\n\n  const result = {\n    day: diffDays,\n    hour: diffHrs,\n    minute: diffMins,\n    sec: diffSec,\n    ms: diffMs,\n  };\n\n  return result;\n};\n\nexport const formatDate = (timestamp: number) => {\n  const startDate = new Date(timestamp * 1000);\n  const formattedTime = dateDiffWith(startDate.toString());\n  const { sec, day, hour, minute } = formattedTime;\n  const since = startDate.toLocaleString();\n\n  const runningFor = `${day} days ${hour} hours ${minute} mins ${sec} sec`;\n\n  return {\n    since,\n    runningFor,\n  };\n};\n","export enum NodeMetricSlugs {\n  Status = \"status\",\n  DataHosting = \"dataHosting\",\n  PeersDiscovered = \"peersDiscovered\",\n  OnlineSince = \"onlineSince\",\n  OnlineFor = \"onlineFor\",\n  AnotherMetric = \"anotherMetric\",\n}\n\nexport enum SortDirection {\n  SortAscending = 1,\n  SortDescending = 2,\n}\n\nexport enum SortName {\n  Location = 1,\n  Latency = 2,\n  Address = 3,\n}\n","export enum Directions {\n  Inbound = \"Inbound\",\n  Outbound = \"Outbound\",\n}\n\nexport const chartDataLength = 20;\n","import React from \"react\";\nimport AppStore from \"_src/stores/AppStore\";\n\nexport default React.createContext(\n  {} as StratosNodeMonitor.RootStore<AppStore>\n);\n","import * as Types from \"_src/services/socket/types\";\n\nexport const createSocketMessage = <T>(\n  methodName: Types.SocketMessagesMap,\n  params: T\n) => {\n  const message = {\n    id: 1,\n    method: methodName,\n    params,\n  };\n\n  return message;\n};\n\nexport const createAuthenticationMessage = (\n  token: string\n): Types.AuthenticationSocketMessage => {\n  const params: Types.AuthenticationMessageParameters = [\"subscription\", token];\n\n  const message = createSocketMessage<typeof params>(\n    Types.SocketMessagesMap.subscribe,\n    params\n  );\n\n  return message;\n};\n\nexport const createGetDiskUsageMessage = (\n  subid: string\n): Types.GetDiskUsageSocketMessage => {\n  const params: Types.GetDiskUsageMessageParameters = [{ subid }];\n\n  const message = createSocketMessage<typeof params>(\n    Types.SocketMessagesMap.getDiskUsage,\n    params\n  );\n\n  return message;\n};\n\nexport const createGetNodeDetailsMessage = (\n  subid: string\n): Types.GetNodeDetailsSocketMessage => {\n  const params: Types.GetNodeDetailsMessageParameters = [{ subid }];\n\n  const message = createSocketMessage<typeof params>(\n    Types.SocketMessagesMap.getNodeDetails,\n    params\n  );\n\n  return message;\n};\n\nexport const createGetPeerListMessage = (\n  subid: string\n): Types.GetPeerListSocketMessage => {\n  const params: Types.GetPeerListMessageParameters = [{ subid }];\n\n  const message = createSocketMessage<typeof params>(\n    Types.SocketMessagesMap.getPeerList,\n    params\n  );\n\n  return message;\n};\n\nexport const createGetTrafficDataMessage = (\n  subid: string,\n  lines = 1\n): Types.GetTrafficDataSocketMessage => {\n  const params: Types.GetTrafficDataMessageParameters = [{ subid, lines }];\n\n  const message = createSocketMessage<typeof params>(\n    Types.SocketMessagesMap.getTrafficData,\n    params\n  );\n\n  return message;\n};\n","import * as CreateFactory from \"_src/services/socket/createMessage\";\nimport * as Types from \"_src/services/socket/types\";\n\nimport RootStore from \"_stores\";\n\nexport const sendMessageToSocket = <T extends Types.SocketMessage<K>, K>(\n  message: T\n) => {\n  const appStore = RootStore.appStore;\n\n  const [\n    _ourDataFromSocket,\n    _connectToSocketHandler,\n    _disconnectFromSocketHandler,\n    sendMessageHandler,\n  ] = appStore.socketData;\n\n  sendMessageHandler(message);\n};\n\nexport const sendAuthenticationMessage = (token: string) => {\n  const message = CreateFactory.createAuthenticationMessage(token);\n  type paramsType = typeof message[\"params\"];\n  return sendMessageToSocket<typeof message, paramsType>(message);\n};\n\nexport const sendGetDiskUsageMessage = (subid: string) => {\n  const message = CreateFactory.createGetDiskUsageMessage(subid);\n  type paramsType = typeof message[\"params\"];\n  return sendMessageToSocket<typeof message, paramsType>(message);\n};\n\nexport const sendGetNodeDetailsMessage = (subid: string) => {\n  const message = CreateFactory.createGetNodeDetailsMessage(subid);\n  type paramsType = typeof message[\"params\"];\n  return sendMessageToSocket<typeof message, paramsType>(message);\n};\n\nexport const sendGetPeerListMessage = (subid: string) => {\n  const message = CreateFactory.createGetPeerListMessage(subid);\n  type paramsType = typeof message[\"params\"];\n  return sendMessageToSocket<typeof message, paramsType>(message);\n};\n\nexport const sendGetTrafficDataMessage = (subid: string, lines = 1) => {\n  const message = CreateFactory.createGetTrafficDataMessage(subid, lines);\n  type paramsType = typeof message[\"params\"];\n  return sendMessageToSocket<typeof message, paramsType>(message);\n};\n","import { Space, Spin } from \"antd\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport \"./index.scss\";\n\ntype SpaceSize = \"large\" | \"middle\" | \"small\";\ntype SpinSize = \"large\" | \"small\" | \"default\" | undefined;\n\ninterface SimpleProps {\n  spinSize?: SpinSize;\n  spaceSize?: SpaceSize;\n  extraClasses?: string;\n}\n\nconst Spinner: React.FC<SimpleProps> = ({\n  spinSize = \"large\",\n  spaceSize = \"large\",\n  extraClasses = \"\",\n}) => {\n  return (\n    <div className={classNames(\"spinner-container\", extraClasses)}>\n      <Space size={spaceSize}>\n        <Spin size={spinSize} />\n      </Space>\n    </div>\n  );\n};\n\nexport default Spinner;\n","export const getRewardsTooltip =\n  \"Please contact the node owner to obtain an access token\";\n\nexport const nodeAddressTooltip = \"Please enter node address to connect with\";\n\nexport const getRewardsTooltipColor = \"#00847b\";\n\nexport const geoIpApiUrl = `http://ip-api.com/json/`;\n","import { useState } from \"react\";\n\ntype HandlerType<T> = (newSortName: T) => () => void;\n\ntype HookReturnType<T> = [T, HandlerType<T>];\n\nexport function useChangeSort<T>(defaultSortName: T): HookReturnType<T> {\n  const [sortName, setSortName] = useState(defaultSortName);\n\n  const sortBy = (newSortName: T) => {\n    return () => {\n      setSortName(newSortName);\n    };\n  };\n\n  return [sortName, sortBy];\n}\n","import { NodeMetricSlugs } from \"_constants/nodeMetrics\";\nimport * as ProcessorTypes from \"_services/processors/types\";\nimport { formatTrafficValue } from \"_services/utils\";\n\nexport const formatDiskUsageMessage = (\n  notificationResult: ProcessorTypes.IDiskUsageResult\n): StratosNodeMonitor.NodeMetric => {\n  const { disk_usage } = notificationResult;\n\n  if (!disk_usage) {\n    throw new Error(\"Disk usage was not found in the socket response\");\n  }\n\n  const { data_host } = disk_usage;\n\n  const dataHostingMetricInfo = formatTrafficValue(data_host, false);\n\n  return {\n    id: \"2\",\n    title: \"Data Hosting\",\n    slug: NodeMetricSlugs.DataHosting,\n    metricInfo: dataHostingMetricInfo,\n    main: true,\n  };\n};\n","import { NodeMetricSlugs } from \"_constants/nodeMetrics\";\nimport * as ProcessorTypes from \"_services/processors/types\";\nimport { formatDate } from \"_services/utils\";\n\nexport const formatOnlineStateMessage = (\n  notificationResult: ProcessorTypes.NotificationResult\n): StratosNodeMonitor.NodeMetric[] => {\n  const { online_state } = notificationResult;\n\n  if (!online_state) {\n    throw new Error(\"Online status data was not found in the socket response\");\n  }\n\n  const { online, since } = online_state;\n  const onlineStatusMetricInfo = online ? \"Online\" : \"Offline\";\n\n  const { since: onlineSinceMetricInfo, runningFor: onlineForMetricInfo } =\n    formatDate(since);\n\n  return [\n    {\n      id: \"1\",\n      title: \"Status\",\n      slug: NodeMetricSlugs.Status,\n      metricInfo: onlineStatusMetricInfo,\n      main: true,\n    },\n    {\n      id: \"4\",\n      title: \"Online Since\",\n      slug: NodeMetricSlugs.OnlineSince,\n      metricInfo: onlineSinceMetricInfo,\n      main: true,\n    },\n    {\n      id: \"6\",\n      title: \"Online For\",\n      slug: NodeMetricSlugs.OnlineFor,\n      metricInfo: onlineForMetricInfo,\n      main: false,\n    },\n  ];\n};\n","import { geoIpApiUrl } from \"_constants/general\";\n\nimport RootStore from \"_stores\";\n\nexport const lookUpCountryCode = async (ip: string) => {\n  const appStore = RootStore.appStore;\n  const [address] = ip.split(\":\");\n\n  const resolvedCountryCode = appStore.isIpResolved(address);\n\n  if (resolvedCountryCode) {\n    return [resolvedCountryCode, ip];\n  }\n\n  try {\n    const url = `${geoIpApiUrl}${address}`;\n    const res = await fetch(url);\n    const geoInfoData = await res.json();\n    const { countryCode = \"ZZ\" } = geoInfoData;\n\n    appStore.setIsIpResolved(address, countryCode);\n\n    return [countryCode, ip];\n  } catch (error) {\n    return [\"ZZ\", ip];\n  }\n};\n","import { NodeMetricSlugs } from \"_constants/nodeMetrics\";\nimport { lookUpCountryCode } from \"_services/geoIp\";\nimport * as ProcessorTypes from \"_services/processors/types\";\n\ninterface FormatterReturnType {\n  peersDiscoveredNodeMetric: StratosNodeMonitor.NodeMetric;\n  connectedPeers: StratosNodeMonitor.ConnectedPeer[];\n}\n\nexport const formatPeerListMessage = async (\n  notificationResult: ProcessorTypes.IPeerResult\n): Promise<FormatterReturnType> => {\n  const { peer_list } = notificationResult;\n\n  if (!peer_list) {\n    throw new Error(\"Peer list was not found in the socket response\");\n  }\n\n  const { total, peerlist } = peer_list;\n\n  const peersDiscoveredNodeMetric = {\n    id: \"3\",\n    title: \"Peers Discovered\",\n    slug: NodeMetricSlugs.PeersDiscovered,\n    metricInfo: `${total}`,\n    main: true,\n  };\n\n  if (total > 0 && !peerlist) {\n    throw new Error(\"Peer list is not correct in the socket response\");\n  }\n\n  if (!peerlist) {\n    return { peersDiscoveredNodeMetric, connectedPeers: [] };\n  }\n\n  const connectedPeersPromises = peerlist.map(async (peerItem, idx) => {\n    const { network_address, p2p_address, latency, connection } = peerItem;\n\n    const [countryCode, location] = await lookUpCountryCode(network_address);\n\n    const result = {\n      id: `${idx + 1}`,\n      location,\n      countryCode,\n      latency: `${latency}`,\n      address: p2p_address,\n      connection: [connection],\n    };\n\n    return result;\n  });\n\n  const connectedPeers = await Promise.all(connectedPeersPromises);\n\n  return { peersDiscoveredNodeMetric, connectedPeers };\n};\n","import * as ProcessorTypes from \"_services/processors/types\";\n\nexport const formatTrafficInfoMessage = (\n  result: ProcessorTypes.ITrafficInfoResult<ProcessorTypes.TrafficInfo>\n): StratosNodeMonitor.TrafficInfo => {\n  const { traffic_info } = result;\n\n  const { traffic_inbound, traffic_outbound, time_stamp } = traffic_info;\n\n  return {\n    id: \"1\",\n    time: time_stamp,\n    inbound: `${traffic_inbound}`,\n    outbound: `${traffic_outbound}`,\n  };\n};\n","import { SocketMessagesMap } from \"_src/services/socket/types\";\n\nexport enum NotificationResultList {\n  disk_usage = \"disk_usage\",\n  online_state = \"online_state\",\n  peer_list = \"peer_list\",\n  traffic_info = \"traffic_info\",\n}\n\n// Info (data entities)\nexport interface DiskUsageInfo {\n  data_host: number;\n}\n\nexport interface NodeDetailsInfo {\n  id: string;\n  address: string;\n}\n\nexport interface OnlineStateInfo {\n  online: boolean;\n  since: number;\n}\n\nexport interface PeerItemInfo {\n  network_address: string;\n  p2p_address: string;\n  status: number;\n  latency: number;\n  connection: string;\n}\n\nexport interface PeerListInfo {\n  total: number;\n  peerlist: PeerItemInfo[];\n}\n\nexport interface TrafficInfo {\n  traffic_inbound: number;\n  traffic_outbound: number;\n  time_stamp: string;\n}\n// end of info\n\n// messages response results (has info items)\nexport type AuthenticationResult = string;\n\nexport interface IDiskUsageResult {\n  disk_usage: DiskUsageInfo;\n}\n\nexport interface DiskUsageResult extends IDiskUsageResult {\n  message_type: SocketMessagesMap.getDiskUsage;\n  return: number;\n}\n\nexport interface NodeDetailsResult {\n  message_type: SocketMessagesMap.getNodeDetails;\n  node_details: NodeDetailsInfo;\n  return: number;\n}\n\nexport interface IPeerResult {\n  peer_list: PeerListInfo;\n}\n\nexport interface PeerListResult extends IPeerResult {\n  message_type: SocketMessagesMap.getPeerList;\n  return: number;\n}\n\nexport interface ITrafficInfoResult<T> {\n  traffic_info: T;\n}\n\nexport interface TrafficInfoResult<K> extends ITrafficInfoResult<K> {\n  message_type: SocketMessagesMap.getTrafficData;\n  return: number;\n}\n// end of messages response results\n\n// messages responses\nexport interface AuthenticationResponse {\n  result: AuthenticationResult;\n}\nexport interface DiskUsageResponse {\n  result: DiskUsageResult;\n}\n\nexport interface NodeDetailsResponse {\n  result: NodeDetailsResult;\n}\n\nexport interface TrafficInfoResponse {\n  result: TrafficInfoResult<TrafficInfo[]>;\n}\n\nexport interface PeerListResponse {\n  result: PeerListResult;\n}\n// end of messages responses\n\n// notification result and response\nexport interface NotificationResult\n  extends IPeerResult,\n    IDiskUsageResult,\n    ITrafficInfoResult<TrafficInfo> {\n  [NotificationResultList.disk_usage]: DiskUsageInfo;\n  [NotificationResultList.online_state]: OnlineStateInfo;\n  [NotificationResultList.peer_list]: PeerListInfo;\n  [NotificationResultList.traffic_info]: TrafficInfo;\n}\n\nexport interface NotificationParams {\n  result: NotificationResult;\n}\n\nexport interface NotificationResponse {\n  params: NotificationParams;\n}\n// notification result and response\n\nexport type MessageResponse =\n  | AuthenticationResponse\n  | DiskUsageResponse\n  | NodeDetailsResponse\n  | PeerListResponse\n  | TrafficInfoResponse;\n\nexport type SocketMessageResponse = NotificationResponse | MessageResponse;\n\n// only those with message_type\nexport type MessageResult =\n  | DiskUsageResult\n  | NodeDetailsResult\n  | PeerListResult\n  | TrafficInfoResult<TrafficInfo[]>;\n","import * as Types from \"_src/services/processors/types\";\nimport * as SocketTypes from \"_src/services/socket/types\";\n\nexport const isNotification = (\n  response: Types.SocketMessageResponse\n): response is Types.NotificationResponse => {\n  return \"params\" in response;\n};\n\nexport const isMessage = (\n  response: Types.SocketMessageResponse\n): response is Types.MessageResponse => {\n  return \"result\" in response;\n};\n\nexport const isAuthenticationResponse = (\n  response: Types.MessageResponse\n): response is Types.AuthenticationResponse => {\n  return typeof response.result === \"string\";\n};\n\nexport const isGetDiskUsageResult = (\n  responseResult: Types.MessageResult\n): responseResult is Types.DiskUsageResult => {\n  return (\n    \"message_type\" in responseResult &&\n    responseResult.message_type === SocketTypes.SocketMessagesMap.getDiskUsage\n  );\n};\n\nexport const isNodeDetailsResult = (\n  responseResult: Types.MessageResult\n): responseResult is Types.NodeDetailsResult => {\n  return (\n    \"message_type\" in responseResult &&\n    responseResult.message_type === SocketTypes.SocketMessagesMap.getNodeDetails\n  );\n};\n\nexport const isPeerListResult = (\n  responseResult: Types.MessageResult\n): responseResult is Types.PeerListResult => {\n  return (\n    \"message_type\" in responseResult &&\n    responseResult.message_type === SocketTypes.SocketMessagesMap.getPeerList\n  );\n};\n\nexport const isTrafficInfoResult = (\n  responseResult: Types.MessageResult\n): responseResult is Types.TrafficInfoResult<Types.TrafficInfo[]> => {\n  return (\n    \"message_type\" in responseResult &&\n    responseResult.message_type === SocketTypes.SocketMessagesMap.getTrafficData\n  );\n};\n\nexport const isNotificationResult = (\n  paramsResult: Types.NotificationResult\n): paramsResult is Types.NotificationResult => {\n  return (\n    Types.NotificationResultList.disk_usage in paramsResult &&\n    Types.NotificationResultList.online_state in paramsResult &&\n    Types.NotificationResultList.peer_list in paramsResult &&\n    Types.NotificationResultList.traffic_info in paramsResult\n  );\n};\n\nexport const verifyFailedMessageResponse = (\n  returnCode: number,\n  messageType: string\n) => {\n  if (`${returnCode}` !== \"0\") {\n    throw new Error(`PP node failed for \"${messageType}\"`);\n  }\n};\n","import { notification } from \"antd\";\nimport * as Formatters from \"_src/services/formatters\";\nimport * as Types from \"_src/services/processors/types\";\nimport { verifyFailedMessageResponse } from \"_src/services/processors/utils\";\nimport {\n  sendGetNodeDetailsMessage,\n  sendGetTrafficDataMessage,\n} from \"_src/services/socket/sendMessage\";\nimport * as SocketTypes from \"_src/services/socket/types\";\n\nimport RootStore from \"_stores\";\n\nexport const processAuthenticationMessage = (\n  messageResponse: Types.AuthenticationResponse\n) => {\n  const appStore = RootStore.appStore;\n  const { result: subid } = messageResponse;\n\n  if (!appStore.subid && subid) {\n    appStore.setSubid(subid);\n    appStore.setIsAuthenticatedWithApi(true);\n\n    // now sending node details message request\n    sendGetNodeDetailsMessage(appStore.subid);\n    sendGetTrafficDataMessage(appStore.subid, 20);\n  }\n};\n\nexport const processGetDiskUsageMessage = (result: Types.DiskUsageResult) => {\n  const { disk_usage, return: messageReturn } = result;\n\n  verifyFailedMessageResponse(\n    messageReturn,\n    SocketTypes.SocketMessagesMap.getDiskUsage\n  );\n\n  console.log(\"disk_usage !!\", disk_usage);\n\n  const dataHostingMetric = Formatters.formatDiskUsageMessage(result);\n  console.log(\n    \"🚀 ~ file: messagesProcessor.ts ~ line 34 ~ processGetDiskUsageMessage ~ dataHostingMetric\",\n    dataHostingMetric\n  );\n};\n\nexport const processNodeDetailsMessage = (result: Types.NodeDetailsResult) => {\n  const appStore = RootStore.appStore;\n\n  const { return: messageReturn } = result;\n\n  verifyFailedMessageResponse(\n    messageReturn,\n    SocketTypes.SocketMessagesMap.getNodeDetails\n  );\n\n  const nodeDetails = Formatters.formatNodeDetailsMessage(result);\n  const nodeInfo = { nodeDetails };\n\n  appStore.setNodeInfo(nodeInfo);\n};\n\nexport const processPeerListMessage = async (result: Types.PeerListResult) => {\n  const appStore = RootStore.appStore;\n  const { return: messageReturn } = result;\n\n  verifyFailedMessageResponse(\n    messageReturn,\n    SocketTypes.SocketMessagesMap.getPeerList\n  );\n\n  const peerListInfo = await Formatters.formatPeerListMessage(result);\n\n  const { connectedPeers } = peerListInfo;\n  console.log(\n    \"🚀 ~ file: messagesProcessor.ts ~ line 55 ~ processPeerListMessage ~ peerListInfo\",\n    peerListInfo\n  );\n\n  appStore.setConnectedPeers(connectedPeers);\n};\n\nexport const processTrafficInfoMessage = (\n  result: Types.TrafficInfoResult<Types.TrafficInfo[]>\n) => {\n  console.log(\n    \"🚀 ~ file: messagesProcessor.ts ~ line 61 ~ processTrafficInfoMessage ~ result\",\n    result\n  );\n  const appStore = RootStore.appStore;\n\n  const { traffic_info: trafficInfoList, return: messageReturn } = result;\n\n  verifyFailedMessageResponse(\n    messageReturn,\n    SocketTypes.SocketMessagesMap.getTrafficData\n  );\n\n  trafficInfoList.forEach((trafficInfo) => {\n    const myTrafficInfo = Formatters.formatTrafficInfoMessage({\n      traffic_info: trafficInfo,\n    });\n    console.log(\n      \"🚀 ~ file: messagesProcessor.ts ~ line 79 ~ processTrafficInfoMessage ~ myTrafficInfo\",\n      myTrafficInfo\n    );\n\n    appStore.updateTrafficInfo(myTrafficInfo);\n  });\n};\n\nexport const processNotificationMessage = async (\n  result: Types.NotificationResult\n) => {\n  const appStore = RootStore.appStore;\n  console.log(\"result from notification\", result);\n\n  const metricsList = [];\n\n  try {\n    const dataHostingMetric = Formatters.formatDiskUsageMessage(result);\n    metricsList.push(dataHostingMetric);\n  } catch (err) {\n    notification.error({\n      message: \"Could not format data hosting info\",\n      description: `${(err as Error).message}`,\n    });\n  }\n\n  try {\n    const peerListInfo = await Formatters.formatPeerListMessage(result);\n\n    const { peersDiscoveredNodeMetric, connectedPeers } = peerListInfo;\n    metricsList.push(peersDiscoveredNodeMetric);\n\n    appStore.setConnectedPeers(connectedPeers);\n  } catch (err) {\n    notification.error({\n      message: \"Could not format peer list info\",\n      description: `${(err as Error).message}`,\n    });\n  }\n\n  try {\n    const myTrafficInfo = Formatters.formatTrafficInfoMessage(result);\n\n    appStore.updateTrafficInfo(myTrafficInfo);\n  } catch (error) {\n    notification.error({\n      message: \"Could not format traffic info\",\n      description: `${(error as Error).message}`,\n    });\n  }\n\n  try {\n    const metrics = Formatters.formatOnlineStateMessage(result);\n    const [onlineStatusMetric, onlineSinceMetric, onlineForMetric] = metrics;\n\n    metricsList.push(onlineStatusMetric);\n    metricsList.push(onlineSinceMetric);\n    metricsList.push(onlineForMetric);\n  } catch (err) {\n    notification.error({\n      message: \"Could not format online data metrics info\",\n      description: `${(err as Error).message}`,\n    });\n  }\n\n  if (metricsList.length) {\n    const updatedMetricsList = {\n      metricsList,\n    };\n\n    appStore.setNodeMetrics(updatedMetricsList);\n  }\n};\n","import * as ProcessorTypes from \"_src/services/processors/types\";\nimport RootStore from \"_stores\";\n\nexport const formatNodeDetailsMessage = (\n  nodeDetailsResult: ProcessorTypes.NodeDetailsResult\n): StratosNodeMonitor.NodeDetails => {\n  const { appStore } = RootStore;\n  const { nodeDetails: defaultNodeDetails } = appStore.nodeInfo;\n\n  const { node_details: processedNodeDetails } = nodeDetailsResult;\n\n  const { id, address } = processedNodeDetails;\n\n  return { ...defaultNodeDetails, id, address };\n};\n","import * as MessagesProcessor from \"_src/services/processors/messagesProcessor\";\nimport * as Types from \"_src/services/processors/types\";\nimport * as Utils from \"_src/services/processors/utils\";\n\nexport const processUknowResponse = (\n  originalMessageResponse: Types.SocketMessageResponse,\n  code: number\n) => {\n  console.log(\n    \"we got an unknow message or notification response. we dont know what to do. here it is\",\n    originalMessageResponse\n  );\n\n  console.log(\"code\", code);\n};\n\nexport const processMessageResponse = (\n  messageResponse: Types.MessageResponse\n) => {\n  if (Utils.isAuthenticationResponse(messageResponse)) {\n    return MessagesProcessor.processAuthenticationMessage(messageResponse);\n  }\n\n  const { result } = messageResponse;\n\n  if (Utils.isGetDiskUsageResult(result)) {\n    return MessagesProcessor.processGetDiskUsageMessage(result);\n  }\n\n  if (Utils.isNodeDetailsResult(result)) {\n    return MessagesProcessor.processNodeDetailsMessage(result);\n  }\n\n  if (Utils.isPeerListResult(result)) {\n    return MessagesProcessor.processPeerListMessage(result);\n  }\n\n  if (Utils.isTrafficInfoResult(result)) {\n    return MessagesProcessor.processTrafficInfoMessage(result);\n  }\n\n  return processUknowResponse(messageResponse, 1);\n};\n\nexport const processNotificationResponse = (\n  messageResponse: Types.NotificationResponse\n) => {\n  const messageResult = messageResponse?.params?.result;\n\n  const isNotificationResult = Utils.isNotificationResult(messageResult || {});\n\n  if (!isNotificationResult) {\n    return processUknowResponse(messageResponse, 2);\n  }\n\n  return MessagesProcessor.processNotificationMessage(messageResult);\n};\n","import { notification } from \"antd\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport W3CWebSocket from \"websocket\";\nimport {\n  isParsedWithError,\n  parseEventData,\n} from \"_src/services/parser/rpcSocketDataParser\";\n\nimport { processSocketMessage } from \"_src/services/processors/mainProcessor\";\nimport RootStore from \"_stores\";\n\ntype ConnectHandlerType = (url?: string) => void;\ntype DisconnectHandlerType = () => void;\ntype SendMessageHandlerType = (\n  data: StratosNodeMonitor.AbstractObject\n) => boolean;\n\ntype HookReturnType = [\n  StratosNodeMonitor.AbstractObject,\n  ConnectHandlerType,\n  DisconnectHandlerType,\n  SendMessageHandlerType\n];\n\ntype HookType = (url: string) => HookReturnType;\n\n// retry socket connection\nconst defaultRetry = 0;\n\nconst retryInterval = 1500;\n\nexport const useSocketData: HookType = (url) => {\n  const appStore = RootStore.appStore;\n  useEffect(() => {\n    if (appStore.socketUrl) {\n      console.log(`new url is !! ${appStore.socketUrl}`);\n    }\n  }, [appStore.socketUrl]);\n  // send message function\n  const [sendMessageHandler, setSendMessageHandler] =\n    useState<SendMessageHandlerType>(\n      () => (_data: StratosNodeMonitor.AbstractObject) => false\n    );\n\n  const [retry, setRetry] = useState(defaultRetry);\n\n  const [parsedData, setParsedData] =\n    useState<StratosNodeMonitor.AbstractObject>({});\n\n  const [ourSocket, setOurSocket] = useState<W3CWebSocket.w3cwebsocket>();\n\n  const disconnectFromSocketHandler: DisconnectHandlerType = () => {\n    if (ourSocket && ourSocket.OPEN) {\n      // so we don't want to re-connect\n      setRetry(0);\n\n      ourSocket.close();\n      appStore.logOut();\n    }\n  };\n\n  const connectToSocketHandler: ConnectHandlerType = (socketUrl) => {\n    try {\n      const ws = new W3CWebSocket.w3cwebsocket(socketUrl || url);\n\n      ws.onopen = () => {\n        console.log(\"connected to socket (from hook, connection is opened)\");\n        if (ws && ws.OPEN) {\n          appStore.logOut();\n          appStore.setIsSocketConnected(true);\n          setOurSocket(ws);\n        }\n\n        // function to send messages to the socket\n        setSendMessageHandler(() => {\n          return (data: StratosNodeMonitor.AbstractObject) => {\n            console.log(\"from handler!!\");\n            try {\n              const messageToSend = JSON.stringify(data);\n              console.log(\n                \"🚀 ~ file: useSocketData.ts ~ line 70 ~ return ~ messageToSend\",\n                messageToSend\n              );\n              ws.send(messageToSend);\n              return true;\n            } catch (err) {\n              return false;\n            }\n          };\n        });\n      };\n\n      ws.onmessage = (evt) => {\n        const parsedMessage = parseEventData(evt);\n\n        const hasError = isParsedWithError(parsedMessage);\n\n        if (hasError) {\n          const { error } = parsedMessage;\n          const { code, message } = error;\n          console.log(\"socker - we have an error\", error);\n          console.log(\"parsedMessage is\", parsedMessage);\n          console.log(\"event in the socket response\", evt);\n          appStore.setSocketError(`${code} -  ${message}`);\n          // that should be optional? proper error handling\n          // appStore.logOut();\n          return;\n        }\n\n        const { originalMessage } = parsedMessage;\n\n        try {\n          processSocketMessage(originalMessage);\n        } catch (error) {\n          console.log(\"error after processing\", error);\n\n          const { message: socketErrorMessage } = error as Error;\n\n          notification.error({\n            message: \"Socket Error\",\n            description: `${socketErrorMessage}`,\n          });\n        }\n      };\n\n      ws.onclose = () => {\n        console.log(\"disconnected\");\n\n        if (retry > 0) {\n          setTimeout(() => {\n            setRetry((retry) => retry - 1);\n          }, retryInterval);\n        }\n      };\n    } catch (err) {\n      console.log(\"error trying to create an instace of ws\", err);\n\n      appStore.setIsSocketConnected(false);\n\n      notification.error({\n        message: \"Socket Error\",\n        description: `${(err as Error).message}`,\n      });\n\n      appStore.setSocketError(`${(err as Error).message}`);\n      return;\n    }\n  };\n\n  const connectToSocketHandlerCallback = useCallback((socketUrl) => {\n    connectToSocketHandler(socketUrl);\n  }, []);\n\n  const disconnectFromSocketHandlerCallback = useCallback(() => {\n    disconnectFromSocketHandler();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"first effect in the socket\");\n\n    console.log(\"appStore.socketUrl\", appStore.socketUrl);\n    if (appStore.socketUrl) {\n      console.log(`we have url. connecting to ${appStore.socketUrl}`);\n      setTimeout(() => {\n        connectToSocketHandlerCallback(appStore.socketUrl);\n      }, 3000);\n    }\n    return () => {\n      disconnectFromSocketHandlerCallback();\n    };\n  }, [appStore.socketUrl]);\n\n  return [\n    parsedData,\n    connectToSocketHandler,\n    disconnectFromSocketHandler,\n    sendMessageHandler,\n  ];\n};\n","import W3CWebSocket from \"websocket\";\nimport * as ProcessorTypes from \"_src/services/processors/types\";\nimport * as SocketTypes from \"_src/services/socket/types\";\n\ntype ParsedMessage =\n  | SocketTypes.ErrorSocketResponse<W3CWebSocket.IMessageEvent>\n  | SocketTypes.BasicSocketResponse<ProcessorTypes.SocketMessageResponse>;\n\nexport const isParsedWithError = (\n  message: ParsedMessage\n): message is SocketTypes.ErrorSocketResponse<W3CWebSocket.IMessageEvent> => {\n  return \"error\" in message;\n};\n\nexport const ifMessageHasAnError = (\n  message: ProcessorTypes.SocketMessageResponse\n): message is ProcessorTypes.SocketMessageResponse => {\n  return \"error\" in message;\n};\n\nexport const parseEventData = (evt: W3CWebSocket.IMessageEvent) => {\n  const eventData = evt?.data?.toString();\n\n  if (!eventData) {\n    const parsedMessage: SocketTypes.ErrorSocketResponse<typeof evt> = {\n      error: {\n        code: -161616,\n        message: \"socket response has no data in the message event\",\n      },\n      originalMessage: evt,\n    };\n\n    return parsedMessage;\n  }\n\n  try {\n    const message: ProcessorTypes.SocketMessageResponse = JSON.parse(eventData);\n\n    const parsedMessage: SocketTypes.BasicSocketResponse<typeof message> = {\n      originalMessage: message,\n    };\n\n    const hasErrorA = ifMessageHasAnError(message);\n\n    if (hasErrorA) {\n      parsedMessage.error = (\n        message as unknown as SocketTypes.ErrorSocketResponse<typeof evt>\n      ).error;\n    }\n    return parsedMessage;\n  } catch (err) {\n    const parsedMessage: SocketTypes.ErrorSocketResponse<typeof evt> = {\n      error: {\n        code: -131313,\n        message: \"could not parse message from the socket\",\n      },\n      originalMessage: evt,\n    };\n\n    return parsedMessage;\n  }\n};\n","import * as ResponseProcessor from \"_src/services/processors/responseProcessor\";\nimport * as Types from \"_src/services/processors/types\";\nimport { isMessage, isNotification } from \"_src/services/processors/utils\";\n\nexport const processSocketMessage = (\n  originalMessageResponse: Types.SocketMessageResponse\n) => {\n  if (isMessage(originalMessageResponse)) {\n    return ResponseProcessor.processMessageResponse(originalMessageResponse);\n  }\n\n  if (isNotification(originalMessageResponse)) {\n    return ResponseProcessor.processNotificationResponse(\n      originalMessageResponse\n    );\n  }\n\n  return ResponseProcessor.processUknowResponse(originalMessageResponse, 4);\n};\n","import { useState } from \"react\";\n\ntype HandlerType = () => void;\n\ntype HookReturnType<T> = [T, HandlerType];\n\nexport function useSortDirectionToggle<T>(\n  sortAscending: T,\n  sortDescending: T\n): HookReturnType<T> {\n  const [sortDirection, setSortDirection] = useState(sortAscending);\n\n  const changeSortDirection = () => {\n    setSortDirection((previousDirection: T) =>\n      previousDirection === sortAscending ? sortDescending : sortAscending\n    );\n  };\n\n  return [sortDirection, changeSortDirection];\n}\n"],"sourceRoot":""}